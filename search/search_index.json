{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Slap documentation!","text":"<p>Slap is a command-line tool to simplify common workflows in the development of Python projects independent of the PEP 517 build backend being used, capable of managing single- and multi-project repositories.</p>"},{"location":"#installation","title":"Installation","text":"<p>I recommend installing Slap using Pipx. (Requires Python 3.10 or higher)</p> <pre><code>$ pipx install slap-cli\n</code></pre> <p>Note: Currently Slap relies on an alpha version of <code>poetry-core</code> (<code>^1.1.0a6</code>). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. <code>1.2.0a2</code>).</p> <p>If you use Slap in GitHub Actions, try one of the actions provided by Slap directly:</p> <ul> <li><code>NiklasRosenstein/slap@gha/install/v1</code></li> <li><code>NiklasRosenstein/slap@gha/changelog/update/v1</code></li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation for Slap here: https://niklasrosenstein.github.io/slap/</p> <p>Check out the Getting started guide.</p>"},{"location":"#feature-matrix","title":"Feature Matrix","text":"Feature Poetry Documentation Manage structured changelog entries \u274c slap changelog Show project details \u274c slap info Build and publish to PyPI using Twine \u2705 (single project only) slap publish Create a new release (bump version numbersr) \u274c (sub-par support) slap release Run a command configured in <code>pyproject.toml</code> \u274c slap run Run tests configured in <code>pyproject.toml</code> \u274c slap test Manage Python virtualenv's \u2705 (but out-of-worktree) slap venv Generate a dependencies report \u274c slap report dependencies Project dependencies lock file \u2705 \u274c Feature / Build backend Flit Poetry Setuptools Documentation Add dependency \u2705 \u2705 \u274c slap add Sanity check project configuration \u2705 slap check Bootstrap project files \u2705 slap init Install projects using Pip \u2705 \u2705 \u2705 slap install Symlink projects (editable installs) \u2705 \u2705 \u2705 slap link Bump interdependencies in mono-repository \u2705 (not tested regularly) \u2705 \u2705 (partial) slap release <p>Legend: \u2705 explicitly supported, \u274c explicitly not supported, (blank) not relevant or currently not supported</p>"},{"location":"#issues-suggestions-contributions","title":"Issues / Suggestions / Contributions","text":"<p>Slap is currently very opinionated by the fact that I built it as my personal workflow tool, but I welcome suggestions and contributions, and I am hopeful it will be useful to a wider audience than myself.</p> <p>Please report any issues you encounter via GitHub Issues. Feel free to use the GitHub Discussions forum to ask questions or make suggestions on new features (e.g. if you would like a new build backend to be supported?). Lastly, feel free to submit pull requests to the GitHub Repository.</p>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#why-slap","title":"Why \"Slap\"?","text":"<p>Finding a good, catchy name that also types easily in the terminal and is not already widely used isn't easy, ok?</p>"},{"location":"#what-makes-this-different-to-the-poetry-cli","title":"What makes this different to the Poetry CLI?","text":"<p>Some people might find this similar to tools like Poetry, and while there is some overlap in functionality, Slap is not a build backend and is more targeted towards library development. In fact, most of my projects use Poetry as the build backend but I never even once interact with the Poetry CLI throughout the lifetime of the project.</p> <p>The most notable differences to Poetry are</p> <ul> <li>Supports mono-repositories (i.e. multiple related Python projects in the same repository), to the extent that it   bumps version numbers of project inter-dependencies and installs your projects in topological order</li> <li>Supports development installs independent of the build backend (yes; this means you can install Poetry packages   in editable mode even though the Poetry backend right now does not support editable installs)</li> <li>Slap's version bump command (<code>slap release</code>) updates the version not just in your <code>pyproject.toml</code> but also the   <code>__version__</code> in your source code as well as in related projects (see mono-repositories above) and any additional   references you can configure via Regex patterns</li> <li>Does not automagically create a virtual environment for you when instal your project(s); instead, it errors when   you try to install into a non-virtual Python environment and gives you an easy-to-use tool to create and activate   virtual environments (and allowing multiple environments per project as well as global environments)</li> <li>Uses Pip to install your project(s), unlike Poetry which comes with its own dependency resolver and package   installer (which I personally have been having a lot of issues with in the past).</li> <li>Does not have a concept of lock files</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"TypeDescriptionPRIssuesAuthor Improvement  fix spelling in warning log@NiklasRosenstein Feature  Add zsh to supported shells for shimming@cdbrkfxrpt Fix  Fix outdated command documentation@cdbrkfxrpt Improvement  Rename `GitRepositoryHostPlugin` to `RepositoryCIPlugin`; this clarifies the intent and reduces confusion with the `RepositoryHost` interface.79@NiklasRosenstein Improvement  allow GitHub username resolution to raise any Exception; we catch it, log it and fall back to using the configured Git email address instead.80@NiklasRosenstein"},{"location":"changelog/#171-2023-02-09","title":"1.7.1 (2023-02-09)","text":"TypeDescriptionPRIssuesAuthor Fix  The Poetry key for dependency groups is `[tool.poetry.group]`, not `[tool.poetry.groups]`. We now support both but show a warning if the latter is used to inform the user that they should be using `group` instead.77@NiklasRosenstein"},{"location":"changelog/#170-2023-02-06","title":"1.7.0 (2023-02-06)","text":"TypeDescriptionPRIssuesAuthor Breaking change  Reimplement command to update PRs in added changelog entries and rename it to `slap changelog diff pr update`75@NiklasRosenstein Improvement  Update `GithubActionsChangelogUpdateAutomationPlugin.get_pr()` to return the full PR URL instead of just the number.75@NiklasRosenstein Breaking change  Rename `ChangelogUpdateAutomationPlugin` to `GitRepositoryHostPlugin`, add `GitRepositoryHostPlugin.all()` and `~.get()`, rename plugin entrypoint from `slap.plugins.changelog_update_automation` to `slap.plugins.git_repository_host`75@NiklasRosenstein Feature  add `slap changelog diff assert-added`75@NiklasRosenstein"},{"location":"changelog/#1633-2023-01-29","title":"1.6.33 (2023-01-29)","text":"TypeDescriptionPRIssuesAuthor Improvement  improve error message when there is no current environment set via `slap venv -s {env}`@NiklasRosenstein Feature  support Poetry 1.2.0+ new `tool.poetry.group.dev.dependencies`@NiklasRosenstein Fix  fix `pyproject.toml` for Poetry 1.3.0+ validation of `tool.poetry.extras` which can only list dependency names, but not their version constraints. Instead, use `tool.poetry.groups.*` introduced in Poetry 1.2.0@NiklasRosenstein Fix  some internal mypy fixes that come up with newer versions of MyPy@NiklasRosenstein"},{"location":"changelog/#1632-2023-01-22","title":"1.6.32 (2023-01-22)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix running Slap on Windows for commands run from `slap test` and detecting the active Python virtualenv.@NiklasRosenstein"},{"location":"changelog/#1631-2022-12-01","title":"1.6.31 (2022-12-01)","text":"TypeDescriptionPRIssuesAuthor Fix  fix `.flake8` config in template created by `slap init`, newer versions of Flake will error if a comment is on the same line with a value@NiklasRosenstein"},{"location":"changelog/#1630-2022-09-20","title":"1.6.30 (2022-09-20)","text":"TypeDescriptionPRIssuesAuthor Fix  fixed an issue with `poetry-core ==1.2.0`python-slap/slap-cli#66@NiklasRosenstein"},{"location":"changelog/#1629-2022-09-12","title":"1.6.29 (2022-09-12)","text":"TypeDescriptionPRIssuesAuthor Fix  fix return code of `slap venv --exists,-e`@NiklasRosenstein"},{"location":"changelog/#1628-2022-09-12","title":"1.6.28 (2022-09-12)","text":"TypeDescriptionPRIssuesAuthor Feature  add `--use-venv` option to all Venv-aware commands, add `slap venv --exists,-e` flag@NiklasRosenstein"},{"location":"changelog/#1627-2022-09-05","title":"1.6.27 (2022-09-05)","text":"TypeDescriptionPRIssuesAuthor Fix  Updated how `slap install --index` and `--extra-index` are used to inject credentials; they now behave the same (with `--extra-index` marked as deprecated). The `url` is now optional, allowing you use the option only to inject credentials of a package index configured in the project (e.g. `pyproject.toml`) without specifying the URL@NiklasRosenstein"},{"location":"changelog/#1626-2022-07-31","title":"1.6.26 (2022-07-31)","text":"TypeDescriptionPRIssuesAuthor Fix  bump dependency on `nr.util` which is guaranteed to have the `nr.utils.url` package@NiklasRosenstein"},{"location":"changelog/#1625-2022-07-29","title":"1.6.25 (2022-07-29)","text":"TypeDescriptionPRIssuesAuthor Breaking change  replace `--index-url` option with `--index` option which takes the same format as `--extra-index` (but the `name=` key can be omitted)@NiklasRosenstein"},{"location":"changelog/#1624-2022-07-21","title":"1.6.24 (2022-07-21)","text":"TypeDescriptionPRIssuesAuthor Improvement  make use of `nr.python.environment` package to detect and deactivate/activate a virtual env@NiklasRosenstein Feature  add `--index-url` and `--extra-index` option to `slap install` (note that `--extra-index` requires a different value format than Pip's `--extra-index-url`  option)@NiklasRosenstein"},{"location":"changelog/#1623-2022-07-21","title":"1.6.23 (2022-07-21)","text":"TypeDescriptionPRIssuesAuthor Fix  fix an AttributeError when using new `--ignore-active-venv` option (no clue why Mypy did not pick it up)@NiklasRosenstein"},{"location":"changelog/#1622-2022-07-21","title":"1.6.22 (2022-07-21)","text":"TypeDescriptionPRIssuesAuthor Feature  add `--ignore-active-venv` option to Venv-aware commands such as `slap install`@NiklasRosenstein Fix  fix wrong return code in `slap install` if venv check fails (e.g. if attempting to install into a virtual environment without `--no-venv-check`)@NiklasRosenstein"},{"location":"changelog/#1621-2022-07-17","title":"1.6.21 (2022-07-17)","text":"TypeDescriptionPRIssuesAuthor Fix  fix `slap report dependencies` command (regression in previous release)@NiklasRosenstein"},{"location":"changelog/#1620-2022-07-16","title":"1.6.20 (2022-07-16)","text":"TypeDescriptionPRIssuesAuthor Fix  `slap publish` now builds from the current project subdirectory@NiklasRosenstein"},{"location":"changelog/#1619-2022-07-16","title":"1.6.19 (2022-07-16)","text":"TypeDescriptionPRIssuesAuthor Fix  fix error message on missing `py.typed` file62@NiklasRosenstein Improvement  add `--no-venv-check` option to `VenvAwareCommand`, fixes #6161@NiklasRosenstein Improvement  use `build` module instead of hand-crafted build backend, add `Dependencies.build` property53@NiklasRosenstein"},{"location":"changelog/#1618-2022-07-01","title":"1.6.18 (2022-07-01)","text":"TypeDescriptionPRIssuesAuthor Feature  add `slap test -x,--exclude` option@NiklasRosenstein"},{"location":"changelog/#1617-2022-06-20","title":"1.6.17 (2022-06-20)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slap install --upgrade` option which is now correctly a flag when it previously incorrectly expected an argument@NiklasRosenstein"},{"location":"changelog/#1616-2022-06-20","title":"1.6.16 (2022-06-20)","text":"TypeDescriptionPRIssuesAuthor Improvement  Add `W503` and `W504` to `.flake8` file of `slap init`@NiklasRosenstein"},{"location":"changelog/#1615-2022-05-27","title":"1.6.15 (2022-05-27)","text":"TypeDescriptionPRIssuesAuthor Improvement  add `strict` option to Mypy settings in template@NiklasRosenstein"},{"location":"changelog/#1614-2022-05-23","title":"1.6.14 (2022-05-23)","text":"TypeDescriptionPRIssuesAuthor Fix  Add missing black options to init template@NiklasRosenstein Improvement  Init template now uses dmypy by default@NiklasRosenstein Improvement  Set python_version = 3.6 in Init template@NiklasRosenstein Fix  `slap install` no longer calls Pip without dependenciesto install, instead it prints this info and exits successfully@NiklasRosenstein"},{"location":"changelog/#1613-2022-05-06","title":"1.6.13 (2022-05-06)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix misspelling in GH template@NiklasRosenstein"},{"location":"changelog/#1612-2022-05-06","title":"1.6.12 (2022-05-06)","text":"TypeDescriptionPRIssuesAuthor Improvement  Update GH action reference after Slap repository was moved from `NiklasRosenstein/slap` to `python-slaps/slap.cli`@NiklasRosenstein"},{"location":"changelog/#1611-2022-05-06","title":"1.6.11 (2022-05-06)","text":"TypeDescriptionPRIssuesAuthor Improvement  Update default template to include black, isort, flake8@NiklasRosenstein Improvement  Set min Python version in init templates to 3.6@NiklasRosenstein"},{"location":"changelog/#1610-2022-05-02","title":"1.6.10 (2022-05-02)","text":"TypeDescriptionPRIssuesAuthor Fix  The `slap add` command now installs the dependency even if `--upgrade` is not specified if the constraint does not accept the currently installed version.@NiklasRosenstein"},{"location":"changelog/#169-2022-04-28","title":"1.6.9 (2022-04-28)","text":"TypeDescriptionPRIssuesAuthor Fix  Use SPDX license information only in `slap.util.extenral.licenses` instead of Deja code which now requires a login; this fixes `slap init` when it tries to get the license text@NiklasRosenstein"},{"location":"changelog/#168-2022-04-28","title":"1.6.8 (2022-04-28)","text":"TypeDescriptionPRIssuesAuthor Fix  Automatic detection of packages now ignores subdirectories that have a `pyproject.toml` file@NiklasRosenstein"},{"location":"changelog/#167-2022-04-26","title":"1.6.7 (2022-04-26)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slap venv X.Y` to create an environment of the specified Python major/minor version@NiklasRosenstein"},{"location":"changelog/#166-2022-04-26","title":"1.6.6 (2022-04-26)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix (workaround) to installing packages with `slap install` option without the `--link` option if it has runtime dependencies that require extra index URLs.@NiklasRosenstein"},{"location":"changelog/#165-2022-04-21","title":"1.6.5 (2022-04-21)","text":"TypeDescriptionPRIssuesAuthor Fix  The `slap link` command no longer fails when run as root (due to Flit adding a check here; if we want to have the same check in Slap we need to do it ourselves in `slap install` as well)@NiklasRosenstein"},{"location":"changelog/#164-2022-04-19","title":"1.6.4 (2022-04-19)","text":"TypeDescriptionPRIssuesAuthor Improvement  Set `VIRTUAL_ENV` when venv-aware command activates the environment@NiklasRosenstein Feature  Add `--from` action to `slap install` command@NiklasRosenstein Improvement  The `slap link` command is no longer limited to symlinking only one package per project@NiklasRosenstein"},{"location":"changelog/#163-2022-04-18","title":"1.6.3 (2022-04-18)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix venv aware commands to add the absolute path to the `PATH` environment variable instead of a relative path@NiklasRosenstein"},{"location":"changelog/#162-2022-04-18","title":"1.6.2 (2022-04-18)","text":"TypeDescriptionPRIssuesAuthor Improvement  Add `PythonEnvironment.version_tuple`@NiklasRosenstein Improvement  The `slap venv` command now automatically picks an environment name if you do not specify one with the `-c,--create` flag@NiklasRosenstein Improvement  Changed `slap install` to no longer install all extras defined in the project by default, now you need to explicitly specify them in `[tool.slap.install].dev-extras`@NiklasRosenstein"},{"location":"changelog/#161-2022-04-16","title":"1.6.1 (2022-04-16)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slap link` to produce absolute paths in the shebang for generated scripts by supplying an absolute path to the Python interpreter to the Flit installer@NiklasRosenstein"},{"location":"changelog/#160-2022-04-16","title":"1.6.0 (2022-04-16)","text":"TypeDescriptionPRIssuesAuthor Feature  add `-p,--path` option to `slap venv` command, note that `-p` was repurposed from `--python` and the option no longer has a short form@NiklasRosenstein Improvement  `slap test` and `slap run` commands now activate the active virtual environment if any before running the commands@NiklasRosenstein Feature  Add `-s,--set` option to `slap venv`@NiklasRosenstein Improvement  The `slap run` command can now run arbitrary commands, but falls back to the ones aliased on the configuration on a match.@NiklasRosenstein Improvement  Add `VenvAwareCommand` and use it in `add`, `install`, `link`, `report`, `run` and `test`@NiklasRosenstein Improvement  Add `location` to `DistributionMetadata`, which propagates into the output of `slap report dependencies`@NiklasRosenstein"},{"location":"changelog/#154-2022-04-14","title":"1.5.4 (2022-04-14)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix issue with \"cannot install into global environment\" even if a Slap venv is active@NiklasRosenstein"},{"location":"changelog/#153-2022-04-14","title":"1.5.3 (2022-04-14)","text":"TypeDescriptionPRIssuesAuthor Fix  Fixed forwarding `--python` argument to `slap link` command when using `slap install --link`@NiklasRosenstein Improvement  For all Slap commands that operate on a Python environment (`install`, `link`, `add`), they will now look for the environment to target in the following order: 1) the `-p,--python` option, 2) the `PYTHON` environment variable, 3) the last local activated environment with `slap venv`, 4) just use `python`58@NiklasRosenstein"},{"location":"changelog/#152-2022-04-13","title":"1.5.2 (2022-04-13)","text":"TypeDescriptionPRIssuesAuthor Fix  fix in pep508@NiklasRosenstein"},{"location":"changelog/#151-2022-04-13","title":"1.5.1 (2022-04-13)","text":"TypeDescriptionPRIssuesAuthor Fix  `slap.python.pep508` no longer requires `dataclasses`@NiklasRosenstein"},{"location":"changelog/#150-2022-04-13","title":"1.5.0 (2022-04-13)","text":"TypeDescriptionPRIssuesAuthor Fix  fix pep508 invokation when installing into Pytho 3.6 environments@NiklasRosenstein"},{"location":"changelog/#145-2022-04-04","title":"1.4.5 (2022-04-04)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slap venv link` linking to an absolute path (correct) instead of a relartive path (wrong) when linking from a local environment@NiklasRosenstein Improvement  No longer error when running Slap in a Python project directory using Poetry where some dependencies are declared using the table format in TOML, but log that the type of dependency is currently unsupported@NiklasRosenstein Improvement  Allow unrecognized keys in `ChangelogConfig`@NiklasRosenstein Improvement  Add a separate API to retrieve the projects in a repository in topological order such that most Slap commands that do not care about the order do not have the overhead of inspecting the project dependencies and sorting the projects.NiklasRosenstein/slam#50@NiklasRosenstein Feature  Add `slap.dependency` module@NiklasRosenstein Feature  Add `slap report dependencies` command@NiklasRosenstein Fix  Fix detection of added changelog entries in GitHub Actions for forked repositories; but that does not fix #49@NiklasRosenstein Fix  Fix a potential issue in `slap add` when `tomlkit` returns an `OutOfOrderTableProxy` instead of a `Table` container in which case we did not mutate the actual TOML document@NiklasRosenstein Feature  Add `--source` option to `slap add` command@NiklasRosenstein"},{"location":"changelog/#144-2022-04-04","title":"1.4.4 (2022-04-04)","text":"TypeDescriptionPRIssuesAuthor Improvement  add `-g,--global` option to `slap venv link` command@NiklasRosenstein Improvement  read Git `user.name` and `user.email` from local repository first and then globally@NiklasRosenstein"},{"location":"changelog/#143-2022-04-03","title":"1.4.3 (2022-04-03)","text":"TypeDescriptionPRIssuesAuthor Fix  Add missing `tomlkit` dependency (needed by the `slap add` command)@NiklasRosenstein"},{"location":"changelog/#142-2022-03-31","title":"1.4.2 (2022-03-31)","text":"TypeDescriptionPRIssuesAuthor Fix  adjust for breaking changes in databind 2.0.0 (no more databind.json.settings module)@NiklasRosenstein"},{"location":"changelog/#141-2022-03-31","title":"1.4.1 (2022-03-31)","text":"TypeDescriptionPRIssuesAuthor Improvement  Enhance docs and output of `slap venv` command@NiklasRosenstein Improvement  The `slap venv` command can now be used with `-a,--activate` and without a `name` argument to activate the previously activated environment or the only one that is available in the context (local vs. global).@NiklasRosenstein Improvement  Improve `ChangelogReleasePlugin` to write \"releasing changelog\" line only once@NiklasRosenstein Improvement  Improve changelog checks plugin to catch more types of errors to return in the check details@NiklasRosenstein Improvement  improve output produces by `slap venv -a`, `slap publish` and `slap release`@NiklasRosenstein"},{"location":"changelog/#140-2022-03-29","title":"1.4.0 (2022-03-29)","text":"TypeDescriptionPRIssuesAuthor Feature  Add `ProjectHandler.add_dependency()` and `Project.add_dependency()@NiklasRosenstein Feature  Add `slap add` command@NiklasRosenstein"},{"location":"changelog/#136-2022-03-27","title":"1.3.6 (2022-03-27)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `NameError` in non-monorepository scenario when using `slap install`@NiklasRosenstein"},{"location":"changelog/#135-2022-03-24","title":"1.3.5 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slap release` to consider the monorepository config as well@NiklasRosenstein"},{"location":"changelog/#134-2022-03-24","title":"1.3.4 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Improvement  `slam install` without `--no-dev` now installs _all_ extras for a project unless the new `[install.dev-extras]` option is set@NiklasRosenstein"},{"location":"changelog/#133-2022-03-24","title":"1.3.3 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix how `[install.extras]` is taken into account (used to always take all extras)@NiklasRosenstein"},{"location":"changelog/#132-2022-03-24","title":"1.3.2 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Feature  support `[install.extras]` option in the monorepository and project config@NiklasRosenstein"},{"location":"changelog/#131-2022-03-24","title":"1.3.1 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Feature  add `github` template to `slap init`@NiklasRosenstein Fix  `slap run` now uses the reopsitory `slap.toml` configuration file to read the run configuration if no main project exists; `Application.main_project()` no longer tries to find the \"closest\" project because right now Slap does not actually try to find a \"better\" project root than the current working directory@NiklasRosenstein"},{"location":"changelog/#130-2022-03-23","title":"1.3.0 (2022-03-23)","text":"TypeDescriptionPRIssuesAuthor Improvement  upgrade to using `databind` 2.x@NiklasRosenstein Breaking change  Rename Slam to Slap@NiklasRosenstein Improvement  Split default project handler into separate implementations for Poetry, Flit and Setuptools and properly support Setuptools now (reading `setup.cfg`)@NiklasRosenstein Feature  add `-b,--build-directory` option to `slap publish` command@NiklasRosenstein Feature  add `slap.check.check()` decorator and `slap.check.get_checks()` function to make implementing check plugins more convenient@NiklasRosenstein Improvement  add `Project.version()` and `Project.get_version_refs()`@NiklasRosenstein Improvement  move interdependencies version ref detection into `DefaultProjectHandler`@NiklasRosenstein Improvement  add overload for `match_version_ref_pattern()` that can return a fallback value@NiklasRosenstein"},{"location":"changelog/#124-2022-03-22","title":"1.2.4 (2022-03-22)","text":"TypeDescriptionPRIssuesAuthor Improvement  The default repository handler now only matches if it appears to make sense to use the Slam CLI inside it.@NiklasRosenstein Feature  add `slam venv` and `slam venv link` commands@NiklasRosenstein Fix  `slam init` now identifies the author to use in the template from Git's global config if the current directory is not already a Git repository@NiklasRosenstein"},{"location":"changelog/#123-2022-03-20","title":"1.2.3 (2022-03-20)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `slam install` command accessing the wrong option name for `--no-venv-check` causing an error when `--link` was used@NiklasRosenstein"},{"location":"changelog/#122-2022-03-20","title":"1.2.2 (2022-03-20)","text":"TypeDescriptionPRIssuesAuthor Improvement  `test` command no info-logs the command being run@NiklasRosenstein Feature  add `slam test -l,--list` option@NiklasRosenstein Improvement  `slam init -t poetry` now creates a test file@NiklasRosenstein Fix  Fix `slam init` to create a `test/test_import.py` instead of `test/test.py`@NiklasRosenstein Fix  Fix `slam install` command to forward to the `--no-venv-check` option to the `slam link` command@NiklasRosenstein Fix  Fix `slam changelog convert` to use the proper default author@NiklasRosenstein"},{"location":"changelog/#121-2022-03-14","title":"1.2.1 (2022-03-14)","text":"TypeDescriptionPRIssuesAuthor Feature  add `slam changelog ` argument, defaults to the same as `--name`@NiklasRosenstein Improvement  `slam init` now understands dots as namespace packages@NiklasRosenstein Improvement  `slam init` package name written into `pyproject.toml` keeps dots@NiklasRosenstein Feature  add `slam run` command@NiklasRosenstein Improvement  added `-vv` flag to Pytest command rendered in `pyproject.toml` by `slam init -t poetry` @NiklasRosenstein"},{"location":"changelog/#120-2022-03-03","title":"1.2.0 (2022-03-03)","text":"TypeDescriptionPRIssuesAuthor Refactor  add `Repository` and `RepositoryHandlerPlugin` which gets to decide which projects are loaded, remove most of the related members from the `Application` class@NiklasRosenstein Improvement  morph `VcsHost` into `RepositoryHost` classNiklasRosenstein Fix  fix possible `AssertionError` in `Application._get_main_project()` that can occur if Slam is invoked in a directory that does not contain a `pyproject.toml` nor `slam.toml` file.@NiklasRosenstein Improvement  `slam changelog format` in the Terminal now colorizes inline code (indicated by backticks)@NiklasRosenstein Improvement  All application plugins are now loaded by default (no explicit list of plugins to load), but the `tool.slam.application.disable` config persists to disable the activation of a particular set of plugins@NiklasRosenstein Feature  add `slam init` command@NiklasRosenstein"},{"location":"changelog/#112-2022-03-02","title":"1.1.2 (2022-03-02)","text":"TypeDescriptionPRIssuesAuthor Fix  `git+https://...` requirements are now understood and no longer converted into a dependency caled just \"git\"@NiklasRosenstein"},{"location":"changelog/#111-2022-02-26","title":"1.1.1 (2022-02-26)","text":"TypeDescriptionPRIssuesAuthor Fix  support old `break` change type and convert it to `breaking change`@NiklasRosenstein Feature  add `slam publish --dry,-d` option@NiklasRosenstein"},{"location":"changelog/#110-2022-02-26","title":"1.1.0 (2022-02-26)","text":"TypeDescriptionPRIssuesAuthor Improvement  add `Project.application` member@NiklasRosenstein Feature  add release plugin to automatically bump interdependencies between projects in a monorepository (can be disabled by setting `tool.slam.release.interdependencies = false`)@NiklasRosenstein"},{"location":"changelog/#1010-2022-02-25","title":"1.0.10 (2022-02-25)","text":"TypeDescriptionPRIssuesAuthor Fix  `slam install` now skips projects that dont expose Python packages@NiklasRosenstein"},{"location":"changelog/#109-2022-02-25","title":"1.0.9 (2022-02-25)","text":"TypeDescriptionPRIssuesAuthor Fix  fix consistent sorting of packages ordered topologically by interdependencies@NiklasRosenstein Feature  recognize `tool.poetry.packages` option in `DefaultProjectHandler.get_packages()`@NiklasRosenstein"},{"location":"changelog/#108-2022-02-25","title":"1.0.8 (2022-02-25)","text":"TypeDescriptionPRIssuesAuthor Fix  `slam changelog convert-pr` command now provides YAML error details if the file cannot be parsed and allows the `release_date` to not be set (to convert `_unreleased.yml`)@NiklasRosenstein Fix  `Project.get_packages()` no longer delegates to the `ProjectHandler` if the project is not a Python project (does not have a `pyproject.toml`) to avoid weird namespace packages to be detected unintentionally@NiklasRosenstein"},{"location":"changelog/#107-2022-02-23","title":"1.0.7 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Fix  `slam test` now only runs subproject tests instead of all tests in a monorepo if the main project (the one from the cwd) is not the same as the root project@NiklasRosenstein Fix  `slam changelog update-pr` always counted 0 entries to update and thus never committed the changes@NiklasRosenstein"},{"location":"changelog/#106-2022-02-23","title":"1.0.6 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Improvement  `slam changelog update-pr` no longer overwrites existing PR references in entries unless the new `--overwrite` option is passed@NiklasRosenstein"},{"location":"changelog/#105-2022-02-23","title":"1.0.5 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Feature  add `ChangelogManager.readonly` which prevents you from saving a changelog to disk@NiklasRosenstein Feature  add `[tool.shut.changelog].enabled` option which can be used to turn off the ability to add changelogs to the current project via the CLI@NiklasRosenstein"},{"location":"changelog/#104-2022-02-23","title":"1.0.4 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Improvement  hide output from `git checkout -b` in `github-actions` plugin@NiklasRosenstein Fix  fix shortform detection for GitHub pull request URLs@NiklasRosenstein"},{"location":"changelog/#103-2022-02-23","title":"1.0.3 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Improvement  use more concrete branch name for checkout in `github-actions` plugin to work around issues if the branch name is the same as a top level folder in the repository@NiklasRosenstein Fix  fix `github-actions` tendency to swallow command output which could have been of use in case of an error@NiklasRosenstein"},{"location":"changelog/#102-2022-02-23","title":"1.0.2 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Improvement  parse semver in `[tool.poetry.extras]`@NiklasRosenstein Feature  add `--extras` and `--only-extras` options to `slam install`@NiklasRosenstein"},{"location":"changelog/#101-2022-02-23","title":"1.0.1 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Fix  fix the URL generated for pull request IDs when passed to the `slam changelog add` command for Github hosted repositories@NiklasRosenstein"},{"location":"changelog/#100a6-2022-02-15","title":"1.0.0a6 (2022-02-15)","text":"TypeDescriptionPRIssuesAuthor Improvement  `Command.help` now treats the first line differently to support docstrings where the first line is on the same line as the quotes@NiklasRosenstein Improvement  `slam changelog update-pr` now supports updating the PR reference for changelogs of all projects@NiklasRosenstein"},{"location":"changelog/#100a5-2022-02-15","title":"1.0.0a5 (2022-02-15)","text":"TypeDescriptionPRIssuesAuthor Fix  test runner without TTY now does the correct line prefixing@NiklasRosenstein"},{"location":"changelog/#100a3-2022-02-13","title":"1.0.0a3 (2022-02-13)","text":"TypeDescriptionPRIssuesAuthor Fix  fix entrypoint for `slam` script@NiklasRosenstein"},{"location":"changelog/#100a2-2022-02-13","title":"1.0.0a2 (2022-02-13)","text":"TypeDescriptionPRIssuesAuthor Improvement  reduce code duplicity in `shut.commands.link` and `shut.util.python_package`@NiklasRosenstein Fix  fix `shut log command --author,-a` option being a flag@NiklasRosenstein Improvement  allow `pyproject.toml` to not exist when using `shut release` command@NiklasRosenstein Improvement  fix pattern replacing `{version}` string in release references@NiklasRosenstein Improvement  Add `Application.load_subapp()` and `Application.subapps`@NiklasRosenstein Improvement  `shut release` now has an `include` configuration key that can be used to include the version refs of sub projects, for example in a mono repository where a root `shut.toml` is used to manage the same version number across all components@NiklasRosenstein Improvement  add support for `SLAM_DIR` environment variable@NiklasRosenstein"},{"location":"changelog/#100a1-2022-02-13","title":"1.0.0a1 (2022-02-13)","text":"TypeDescriptionPRIssuesAuthor Breaking change  Fully reimplment Shut, rename it to Slam@NiklasRosenstein"},{"location":"changelog/#0211-2021-11-21","title":"0.21.1 (2021-11-21)","text":"TypeDescriptionPRIssuesAuthor Fix  using `VirtualFiles.get_modified_files()` no longer creates non-existent directories@NiklasRosenstein Fix  catch malformed ref error when trying to determine main branch name and use `develop` as default (see #40)@NiklasRosenstein Fix  `$package.render-requirements-txt` is now handled correctly@NiklasRosenstein"},{"location":"changelog/#0210-2021-09-18","title":"0.21.0 (2021-09-18)","text":"TypeDescriptionPRIssuesAuthor Feature  add `$.scripts` in `package.yml` and `shut pkg run` command@NiklasRosenstein"},{"location":"changelog/#0200-2021-09-16","title":"0.20.0 (2021-09-16)","text":"TypeDescriptionPRIssuesAuthor Feature  add `shut init` command group with initial `shut init mkdocs` command@NiklasRosenstein Feature  add `documentation` job in GitHub Actions template@NiklasRosenstein Feature  ignore GitHub Actions template when checking package config in GitHub Actions (this is mainly used when using an unreleased version of shut to generate the action template or when needing to do quick modifications to the action config without triggering the shut checks in CI).@NiklasRosenstein"},{"location":"changelog/#0190-2021-09-15","title":"0.19.0 (2021-09-15)","text":"TypeDescriptionPRIssuesAuthor Improvement  Changelog entry `fixes` is now optional@NiklasRosenstein Improvement  switch to Mako as a template engine from Jinja2@NiklasRosenstein Feature  add `$.templates` to `AbstractProjectModel` and the `github-actions` template@NiklasRosenstein Improvement  `shut pkg new` now adds the `github-template` to the generated `package.yml`@NiklasRosenstein Improvement  remove template rendering capability of `pylint` test driver, instead add `pylintrc` template plugin@NiklasRosenstein"},{"location":"changelog/#0182-2021-09-04","title":"0.18.2 (2021-09-04)","text":"TypeDescriptionPRIssuesAuthor Fix  min `click` version must be `7.1` for `no_args_is_help` option, also allow `8.x`@NiklasRosenstein"},{"location":"changelog/#0181-2021-08-27","title":"0.18.1 (2021-08-27)","text":"TypeDescriptionPRIssuesAuthor Fix  fix added in `0.18.0` for #33 is actually incorrect, the `command` variable was needed when using the `_tempcopy()` feature. now it is fixed for goodNiklasRosenstein/shut#33@NiklasRosenstein"},{"location":"changelog/#0180-2021-08-26","title":"0.18.0 (2021-08-26)","text":"TypeDescriptionPRIssuesAuthor Feature  add `pylint` test driver@NiklasRosenstein Fix  the fix from `0.17.4` actually made the install cache not work at all and just always install test requirements, now shut knows per driver selection whether dependencies have been installed before or not@NiklasRosenstein Feature  test drivers are now loaded via the `shut.test_drivers` entrypoint, allowing plugins to be registered from external packages@NiklasRosenstein Feature  internal: add `AbstractProjectModel.get_auxiliary_renderers()`@NiklasRosenstein Feature  `pylint` now comes with `.pylintrc` templates (only `shut` for now) and can also render templates from HTTP(S) URLs@NiklasRosenstein Feature  Shut now recognizes lowercase readme/license filesNiklasRosenstein/shut#31@NiklasRosenstein Fix  render `command` variable into `setup.py` only if package `$.install.hooks` is usedNiklasRosenstein/shut#33@NiklasRosenstein"},{"location":"changelog/#0174-2021-08-20","title":"0.17.4 (2021-08-20)","text":"TypeDescriptionPRIssuesAuthor Fix  fix missing test-requirements installation with `shut mono|pkg test --isolate` if the comand was run previously@NiklasRosenstein"},{"location":"changelog/#0173-2021-08-20","title":"0.17.3 (2021-08-20)","text":"TypeDescriptionPRIssuesAuthor Fix  `shut mono|pkg test --isolate` no longer installs the main package in develop mode@NiklasRosenstein"},{"location":"changelog/#0172-2021-08-14","title":"0.17.2 (2021-08-14)","text":"TypeDescriptionPRIssuesAuthor Fix  `shut mono|pkg update --verify-tag \"\"` does not show an error when it should@NiklasRosenstein Feature  `shut mono|pkg update --verify-tag` now accepts strings prefixed with `refs/tags/` and strips that prefix (useful for GitHub Actions to use the `$GITHUB_REF` variable)@NiklasRosenstein Fix  `shut pkg update --dry` option not respected@NiklasRosenstein"},{"location":"changelog/#0171-2021-08-13","title":"0.17.1 (2021-08-13)","text":"TypeDescriptionPRIssuesAuthor Improvement  dd `shut mono|pkg test -q,--quiet` option to quietly install test requirements with Pip, changed default to not do silent installs@NiklasRosenstein"},{"location":"changelog/#0170-2021-08-13","title":"0.17.0 (2021-08-13)","text":"TypeDescriptionPRIssuesAuthor Feature  add `shut pkg test --install/--no-install` which will default to `--install` if the current Python installation (determined by the `PYTHON` variable or falling back to just the `python` command) is a virtual env@NiklasRosenstein Feature  add support for a `mypy` test driver@NiklasRosenstein Feature  api: add `Package.get_source_directory()`@NiklasRosenstein Feature  add `$.test-drivers` field in package model and deprecate `$.test-driver` for it.@NiklasRosenstein Feature  add `shut mono test --install/--no-install` option (parallel to the existing option for `shut pkg test`), without the flag test requirements are only installed if Shut did not install the same requirements into the same environment before@NiklasRosenstein Feature  make sure `$.test-requirements` are installed when running `shut mono|pkg test` in addition to the test-driver requirements. Update some output formatting of `shut mono|pkg test`@NiklasRosenstein Fix  lines in `MANIFEST.in` outside the shut-specific block are not kept on `shut pkg update` (fixed in `VirtualFiles.write_all()`)@NiklasRosenstein Fix  package `$.author` data can now be de-serialized from a mapping again (as used to be possible before migrating to `databind.core^1.x`@NiklasRosenstein Fix  fix printing of `Failed test details:` when there were no failures but at least one skipped test case@NiklasRosenstein Feature  `pytest` driver now supports a `$.parallelism` option which automatically pulls in `pytest-xdist` as a test requirement@NiklasRosenstein Feature  `shut mono|pkg bump --tag|--push|--dry` options now have short versions `-t|-p|-d` respectively@NiklasRosenstein"},{"location":"changelog/#0161-2021-08-12","title":"0.16.1 (2021-08-12)","text":"TypeDescriptionPRIssuesAuthor Fix  pass `filename` to databind deserializer when loading monorepo/package configuration files@NiklasRosenstein Fix  Cannot run \"pip install\" without develop mode on package that inherits monorepo licenseNiklasRosenstein/shut#22@NiklasRosenstein"},{"location":"changelog/#0160-2021-08-10","title":"0.16.0 (2021-08-10)","text":"TypeDescriptionPRIssuesAuthor Fix  fix missing import for `typing.Dict` in `pytest` driver module, which could in some Python versions result in a `NameError`@NiklasRosenstein Improvement  add `extra_requires[test]` in generated `setup.py`@NiklasRosenstein Fix  fix `setup.py` rendering for inherit license filesNiklasRosenstein/shut#21@NiklasRosenstein Improvement  `_tempcopy()` function in `setup.py` now fails if the file cannot be copied from the source file@NiklasRosenstein"},{"location":"changelog/#0151-2021-08-09","title":"0.15.1 (2021-08-09)","text":"TypeDescriptionPRIssuesAuthor Feature  add BSD2, BSD3, BSD4 and Apache2 license templates@ndjeong"},{"location":"changelog/#0150-2021-08-09","title":"0.15.0 (2021-08-09)","text":"TypeDescriptionPRIssuesAuthor Feature  add `shut mono|pkg status --json --include-config` options@NiklasRosenstein"},{"location":"changelog/#0143-2021-08-08","title":"0.14.3 (2021-08-08)","text":"TypeDescriptionPRIssuesAuthor Fix  fix `VendoredRequirement._normpath()` which corrupted absolute paths on Windows (e.g. `C:/path/to` would be converted to `./C:\\path\\to` when it should just be `C:\\path\\to`). This caused `shut pkg install` on Windows to fail.@NiklasRosenstein Fix  `No module named setuptools` error when using `shut pkg install` in venv on WindowsNiklasRosenstein/shut#16@NiklasRosenstein Fix  fix additional CR in generated `LICENSE.txt` on Windows when installing Shut from sourceNiklasRosenstein/shut#17@NiklasRosenstein Fix  `py.typed` file is rendered into `MANIFEST.in` with backslashes@NiklasRosenstein"},{"location":"changelog/#0142-2021-08-03","title":"0.14.2 (2021-08-03)","text":"TypeDescriptionPRIssuesAuthor Improvement  update how install hooks are rendered into `setup.py`@NiklasRosenstein"},{"location":"changelog/#0141-2021-07-23","title":"0.14.1 (2021-07-23)","text":"TypeDescriptionPRIssuesAuthor Fix  `TypeError` when using --extra and --dev/--test@NiklasRosenstein"},{"location":"changelog/#0140-2021-07-22","title":"0.14.0 (2021-07-22)","text":"TypeDescriptionPRIssuesAuthor Feature  add `--dev/--no-dev` and `--test/--no-test` options to `shut mono install` and `shut pkg install`@NiklasRosenstein"},{"location":"changelog/#0133-2021-06-20","title":"0.13.3 (2021-06-20)","text":"TypeDescriptionPRIssuesAuthor Fix  exclude python requirements when rendering `requirements.txt`@NiklasRosenstein"},{"location":"changelog/#0132-2021-06-20","title":"0.13.2 (2021-06-20)","text":"TypeDescriptionPRIssuesAuthor Fix  fix format of requirements in requirements.txt@NiklasRosenstein"},{"location":"changelog/#0131-2021-06-20","title":"0.13.1 (2021-06-20)","text":"TypeDescriptionPRIssuesAuthor Fix  also install `PackageModel.test_requirements` on `shut pkg install`@NiklasRosenstein"},{"location":"changelog/#0130-2021-06-20","title":"0.13.0 (2021-06-20)","text":"TypeDescriptionPRIssuesAuthor Feature  add `PackageModel.dev_requirements` which will be installed with `shut pkg install`@NiklasRosenstein Feature  add `PackageModel.render_requirements_txt` which will be rendered with `shut pkg update`@NiklasRosenstein"},{"location":"changelog/#0120-2021-06-08","title":"0.12.0 (2021-06-08)","text":"TypeDescriptionPRIssuesAuthor Improvement  allow running Shut via `python -m shut`@NiklasRosenstein Fix  fix call to `run_install()` in `shut mono install`@NiklasRosenstein"},{"location":"changelog/#0114-2021-02-01","title":"0.11.4 (2021-02-01)","text":"TypeDescriptionPRIssuesAuthor Fix  `shut pkg install` now correctly installs transitive package interdependencies in the right order@NiklasRosenstein"},{"location":"changelog/#0113-2021-01-29","title":"0.11.3 (2021-01-29)","text":"TypeDescriptionPRIssuesAuthor Fix  fix error rendering `setup.py` if the license file did not exist@NiklasRosenstein Feature  add `get-version` command to `shut mono` and `shut pkg`@NiklasRosenstein Fix  `shut pkg requirements add` now adds the InstallConfiguration pip args@NiklasRosenstein"},{"location":"changelog/#0112-2020-12-19","title":"0.11.2 (2020-12-19)","text":"TypeDescriptionPRIssuesAuthor Fix  fix license_file relative path generation in setuptools renderer, now correctly inherits the license file from the monorepo@NiklasRosenstein"},{"location":"changelog/#0111-2020-12-04","title":"0.11.1 (2020-12-04)","text":"TypeDescriptionPRIssuesAuthor Fix  fix error in `setuptools` renderer if no license is configured in the package@NiklasRosenstein"},{"location":"changelog/#0110-2020-12-03","title":"0.11.0 (2020-12-03)","text":"TypeDescriptionPRIssuesAuthor Feature  add `$.package-data` field to `package.yml`@NiklasRosenstein Fix  add missing package data that needs to be packaged with `shut`@NiklasRosenstein"},{"location":"changelog/#0103-2020-11-27","title":"0.10.3 (2020-11-27)","text":"TypeDescriptionPRIssuesAuthor Fix  referencing a LICENSE or README outside the package directory now does not fail on install if the source file does not exist, but it will print a warning@NiklasRosenstein"},{"location":"changelog/#0102-2020-11-27","title":"0.10.2 (2020-11-27)","text":"TypeDescriptionPRIssuesAuthor Fix  add `PackageModel.license_file` and fix license rendering into MANIFEST.in and setup.py@NiklasRosenstein"},{"location":"changelog/#0101-2020-11-27","title":"0.10.1 (2020-11-27)","text":"TypeDescriptionPRIssuesAuthor Fix  remove debug print in \"package-url\" check@NiklasRosenstein"},{"location":"changelog/#0100-2020-11-27","title":"0.10.0 (2020-11-27)","text":"TypeDescriptionPRIssuesAuthor Feature  packages now inherit the monorepos license if it is unset (using PackageModel.get_license())@NiklasRosenstein Feature  If a package inherits the monoreop license, the LICENSE file will not be replicated in the package directory but instead be copied from the monorepo (using `_tempcopy()` in `setup.py`)@NiklasRosenstein Feature  `shut {mono,pkg} update` commands now produce a LICENSE.txt file if a license template exists for the specified license (currently only `MIT`)@NiklasRosenstein Feature  packages now inherit the monorepo `author` and `url`, and `version` if `release.single_version == True`@NiklasRosenstein Feature  add \"shut pkg format\" command@NiklasRosenstein Feature  package `author` and `url` are now inherited from the monorepo@NiklasRosenstein"},{"location":"changelog/#090-2020-11-20","title":"0.9.0 (2020-11-20)","text":"TypeDescriptionPRIssuesAuthor Fix  cli: Fix `shut mono bump` not updating requirements in package `setup.py` if packages have inter dependenciesNiklasRosenstein/shut#7@NiklasRosenstein Feature  shut.model.package: Add `$.install.index-url` and `$.install.extra-index-urls` fields@NiklasRosenstein Feature  cli: `shut pkg install` now supports `$.install.index-url` and `$.install.extra-index-urls`, added a `--pipx` option@NiklasRosenstein Feature  checks: Add check for namespace files@NiklasRosenstein Fix  fix order of dependencies in the same mono repository when using `shut pkg install`@NiklasRosenstein"},{"location":"changelog/#080-2020-09-09","title":"0.8.0 (2020-09-09)","text":"TypeDescriptionPRIssuesAuthor Feature  cli: Add `shut ... test --keep-test-env` option@NiklasRosenstein Feature  shut.test.base: Add `TestStatus.SKIPPED` enumeration value@NiklasRosenstein Fix  shut.test.pytest: Support skipped tests instead of failing ungracefully@NiklasRosenstein Feature  cli: Support skipped tests `shut ... test` output@NiklasRosenstein"},{"location":"changelog/#073-2020-09-09","title":"0.7.3 (2020-09-09)","text":"TypeDescriptionPRIssuesAuthor Fix  cli: Fix `AttributeError` when running `shut mono bump --snapshot`@NiklasRosenstein"},{"location":"changelog/#072-2020-09-08","title":"0.7.2 (2020-09-08)","text":"TypeDescriptionPRIssuesAuthor Fix  cli: Fix `shut pkg install` command@NiklasRosenstein"},{"location":"changelog/#071-2020-09-08","title":"0.7.1 (2020-09-08)","text":"TypeDescriptionPRIssuesAuthor Feature  shore.models.monorepo: Add `Monorepo.get_inter_dependencies_graph()`@NiklasRosenstein Fix  cli: `shut mono install` now uses topological order to retrieve package requirements@NiklasRosenstein"},{"location":"changelog/#070-2020-09-08","title":"0.7.0 (2020-09-08)","text":"TypeDescriptionPRIssuesAuthor Improvement  cli: Removed `-a,--all` flag from `shut mono update`, the command now always behaves like that flag is set@NiklasRosenstein Feature  cli: Add `shut mono update` flags `--verify` and `--verify-tag`@NiklasRosenstein Fix  shut.renderers.setuptools: Fix rendering of `extras_require`@NiklasRosenstein Feature  cli: Add `shut mono install` command@NiklasRosenstein"},{"location":"changelog/#060-2020-09-08","title":"0.6.0 (2020-09-08)","text":"TypeDescriptionPRIssuesAuthor Feature  shut.changelog: Add `breaking_change` Changelog type@NiklasRosenstein Feature  cli: `shut ... bump` command without version argument or bump mode option will determine the bump mode from the unreleased changelog@NiklasRosenstein Improvement  shore.model: `dump()` method now uses `nr.fs.atomic_file` to ensure the original file contents are not modified if the dump operation fails@NiklasRosenstein Improvement  shore.model.requirements: Add `BaseRequirement` and `VendoredRequirement` classes, require databind.core and databind.json ^0.4.0 for the `@datamodel(serialize_as)` feature@NiklasRosenstein Feature  shut.model.package: `Package.requirements` and related properties are now of type `BaseRequirement`, allowing the use of `VendoredRequirement`s@NiklasRosenstein Improvement  cli: `shut pkg build` and `shut pkg publish` will now error if the package uses vendored requirements@NiklasRosenstein Feature  cli: `shut pkg requirements add` now supports adding vendored requirements using the `-v,--vendor` option@NiklasRosenstein Improvement  shut.model.package: Use new `RequirementsList` class instead of `List[BaseRequirement]`@NiklasRosenstein Feature  shut.model.requirements: `Requirement` now supports package extras@NiklasRosenstein Feature  cli: Add `--verify` option to `shut pkg update`@NiklasRosenstein Feature  shut.checkers.package: Add `up to date` check for packages@NiklasRosenstein Feature  cli: `shut pkg install` now supports installing vendored requirements@NiklasRosenstein Fix  shut.renderers.setuptools: Fix error when package author was not set@NiklasRosenstein Improvement  shut.checkers: Change Checkers interface (remove `project` argument)@NiklasRosenstein Feature  cli: `shut pkg bump` now prevents bumping if managed files are outdated@NiklasRosenstein Fix  cli: `shut pkg bump` now prevents bumping if package version is managed by a monorepo single-version (as was previously already expected to happen)@NiklasRosenstein Improvement  cli: `shut mono bump` now includes the packages in the mono repo if `$.release.single-version` is enabled@NiklasRosenstein Improvement  shut.checkers.monorepo: remove `bad-package-directory` check again, having a package name differ from the directory name is a valid use case@NiklasRosenstein Feature  cli: Add `shut mono publish` command which delegates to `shut pkg publish`.@NiklasRosenstein Improvement  shut.publishers.warehouse: The `WarehouseProvider` now uses the new `PackageModel.get_publish_conf()` instead of `PackageModel.publish` directly, allowing packages to inherit the publish configuration of the mono repository@NiklasRosenstein"},{"location":"changelog/#055-2020-09-05","title":"0.5.5 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Improvement  shut.test.pytest: set altname for `PytestDriver.report_file` to `report-file`@NiklasRosenstein Improvement  cli: `shut mono test` now prints a summary of the status for every tested package@NiklasRosenstein"},{"location":"changelog/#054-2020-09-05","title":"0.5.4 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Improvement  shut.test.pytest: `PytestDriver.args` option now defaults to `[\"-vv\"]`@NiklasRosenstein Feature  cli: Add `shut mono test --only` option@NiklasRosenstein"},{"location":"changelog/#053-2020-09-05","title":"0.5.3 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Feature  cli: Support `VIRTUALENV` and `PIP` environment variables in `shut pkg test` and `shut mono test`@NiklasRosenstein"},{"location":"changelog/#052-2020-09-05","title":"0.5.2 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Feature  cli: add `--checks/--no-checks` toggle to `shut pkg` and `shut mono` commands@NiklasRosenstein Fix  shut.test.pytest: Fix parsing of Pytest JSON record for test functions from a `unittest.TestCase` subclass@NiklasRosenstein"},{"location":"changelog/#051-2020-09-05","title":"0.5.1 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Fix  cli: fix running \"shut pkg install\" from inside \"shut pkg test --isolate\" call@NiklasRosenstein"},{"location":"changelog/#050-2020-09-05","title":"0.5.0 (2020-09-05)","text":"TypeDescriptionPRIssuesAuthor Improvement  shut.model.package: Remove `PackageData` class, merge it's members into `PackageModel` (this does not change the interface of `PackageModel`), Removed `PackageModel.data` property@NiklasRosenstein Tests  fix unit tests@NiklasRosenstein Improvement  shore.checkers.package: `package-author` check is now an error level check@NiklasRosenstein Improvement  cli: `shut mono bump` and `shut pkg bump` no longer run checks, the command group already does it@NiklasRosenstein Fix  shut.renderers.setuptools: fix rendering of `python_requires` option in `setup.py` if package is universal (i.e. the `python` requirement uses an OR (|) which we cannot currently translate to setuptools correctly)@NiklasRosenstein Feature  cli: add `shut pkg test` command which and `PackageModel.test_driver` configuration, the `shore.test` sub-package implements test drivers (currently just `pytest`)@NiklasRosenstein Feature  cli: add `shut mono test` command@NiklasRosenstein"},{"location":"changelog/#040-2020-09-04","title":"0.4.0 (2020-09-04)","text":"TypeDescriptionPRIssuesAuthor Improvement  cli: Updated temrinal output of `shut ... checks`@NiklasRosenstein Improvement  shut.model.package: Add `PackageError` exception class@NiklasRosenstein Improvement  shut.checkers.monorepo: Add `bad-package-directory` check to Monorepo checker@NiklasRosenstein Improvement  cli: `shut pkg checks` now inherits checks from the Monorepo if the check result targets the package directly (e.g. the `bad-package-directory` check)@NiklasRosenstein Improvement  shut.checkers.core: Add `CheckResult.subject` member (default: `None`)@NiklasRosenstein Improvement  cli: `shut pkg` and `shut mono` commands will now print failed checks to stderr before executing the requested subcommand.@NiklasRosenstein Improvement  shut.checkers.monorepo: include error message in `invalid-package` check result@NiklasRosenstein Improvement  shut.checkers.generic: `unknown-config-options` check no longer shows if it passes@NiklasRosenstein Improvement  shut.checkers.generic: rename `unknown-config` check to `unknown-config-options`@NiklasRosenstein Improvement  cli: no longer set `PYTHONWARNINGS` environment variable@NiklasRosenstein Improvement  shut.model.monorepo: add `Monorepo.get_inter_dependencies_for()` method@NiklasRosenstein Feature  cli: add `shut pkg install` command@NiklasRosenstein"},{"location":"changelog/#030-2020-08-29","title":"0.3.0 (2020-08-29)","text":"TypeDescriptionPRIssuesAuthor Improvement  update Changelog typing for databind@NiklasRosenstein Improvement  update paths printed in `shut ... bump` when changelog is released@NiklasRosenstein"},{"location":"changelog/#020-2020-08-29","title":"0.2.0 (2020-08-29)","text":"TypeDescriptionPRIssuesAuthor Docs  fix README example@NiklasRosenstein"},{"location":"configuration/","title":"Configuration","text":"<p>The Slap configuration is read either from a <code>slap.toml</code> file or from the <code>[tool.slap]</code> section in <code>pyproject.toml</code>.</p> <p>Note</p> <p>A <code>slap.toml</code> configuration file is usually only used at the project root in case of mono-repositories for multiple Python projects. The file is often used to</p> <ul> <li>disable mono-repository level changelogs (<code>slap changelog</code>)</li> <li>configure global tests or commands (<code>slap run</code>, <code>slap test</code>)</li> <li>global version references (<code>slap release</code>)</li> </ul> <p>In this section, we describe the global configuration options that affect Slap directly and are not specifically tied to any single Slap command.</p> Option Type Default Description <code>typed</code> <code>bool | None</code> <code>None</code> Whether the Python code uses type hints. If not set, Slap acts as if this is not known. <code>disable</code> <code>list[str]</code> <code>[]</code> A list of Slap application plugins to disable. <code>enable-only</code> <code>list[str]</code> <code>[]</code> A list of Slap application plugins to enable."},{"location":"configuration/#plugin-loading","title":"Plugin loading","text":"<p>All Slap commands are implemented as Class ApplicationPlugins. By default, Slap will load plugin that is registered under the <code>slap.plugins.application</code> entrypoint, however plugins can be disabled using the <code>disable</code> option or an explicit list of plugins to load and none other can be set with <code>enable-only</code>.</p> <p>Restricting the plugins to load will impact the set of commands available at your disposal through the Slap CLI.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#1-installation","title":"1. Installation","text":"<p>I recommend installing Slap using Pipx. (Requires Python 3.10 or higher)</p> <pre><code>$ pipx install slap-cli\n</code></pre> <p>Note: Currently Slap relies on an alpha version of <code>poetry-core</code> (<code>^1.1.0a6</code>). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. <code>1.2.0a2</code>).</p> <p>If you use Slap in GitHub Actions, try one of the actions provided by Slap directly:</p> <ul> <li><code>NiklasRosenstein/slap@gha/install/v1</code></li> <li><code>NiklasRosenstein/slap@gha/changelog/update/v1</code></li> </ul>"},{"location":"getting-started/#2-bootstrapping-a-new-project","title":"2. Bootstrapping a new project","text":"<p>Slap has an <code>init</code> command that bootstraps project files for you. You can preview what the generated files look like by checking out the init command's documentation.</p> <p>Using this command to start a project from scratch is entirely optional and you may use <code>poetry new</code> or <code>flit init</code> instead, or just write everything from scratch.</p> <p>Currently, it provides only a template for projects using Poetry as the build-backend and the template is rather opinionated (i.e. it tells Slap that the project uses typing and the default test commands use Mypy and Pytest).</p> <pre><code>$ mkdir my_package; cd my_package\n$ slap init --name my_package\nwrite /home/niklas/git/my_package/pyproject.toml\nwrite /home/niklas/git/my_package/LICENSE\nwrite /home/niklas/git/my_package/readme.md\nwrite /home/niklas/git/my_package/.gitignore\nwrite /home/niklas/git/my_package/src/my_package/__init__.py\nwrite /home/niklas/git/my_package/test/test_import.py\nwrite /home/niklas/git/my_package/src/my_package/py.typed\n</code></pre> <p>Note</p> <p>You can include dots (<code>.</code>) in the <code>--name</code> argument value to bootstrap for a PEP 420 implicit namespace package, such as <code>$ slap init --name databind.core</code>.</p>"},{"location":"getting-started/#3-creating-a-virtual-environment","title":"3. Creating a virtual environment","text":"<p>Slap's <code>venv</code> command is a small but convenient tool to create, activate and delete Python virtual environments with the same-named standard library module.</p> <p>In order to use it's activate feature, you need to set up a shell function that shadow's the <code>slap</code> command. For details on how to do this, follow the instructions in the venv command's documentation.</p> <pre><code>$ slap venv -ac 3.10\ncreating local environment \"3.10\" (using python3.10)\nactivating local environment \"3.10\"\n(3.10) $\n</code></pre> <p>Note</p> <p>Combining the <code>-a,--activate</code> and <code>-c,--create</code> options will create and subsequently activate the environment.</p> <p>Without a <code>-p,--python</code> argument, the Python version is derived from the environment name as <code>\"python\" + name</code>.</p>"},{"location":"getting-started/#4-install-your-package-into-the-environment","title":"4. Install your package into the environment","text":"<p>Whether you only just bootstrapped your project files or you cloned an existing Python project, before you can use or test it locally, you need to install it into the virtual environment created in the previous step. The <code>install</code> command will use Pip to install your package and all of its dependencies.</p> <p>You are not required to use Slap's <code>venv</code> command for this step, you can be in any kind of Python virtual environment.</p> <p>Note</p> <p>Using the <code>--link</code> option will symlink your package into the Python environment instead of installing it with Pip, allowing you to make edits to your source code without needing to re-install it after every change. If all your dependencies are already installed, you can also use the <code>slap link</code> command to only do the linking step (this is also convenient if only your project's entry points have changed).</p> <pre><code>(3.10) $ slap install --link\n... pip install output here ...\nsymlinking my_package\n</code></pre> <p>If you are not currently in a virtual environment, Slap will refuse to install unless you pass the <code>--no-venv-check</code> option. This is to protect you from accidentally installing into a global Python installation.</p> <pre><code>(3.10) $ deactivate\n$ slap install\nerror: refusing to install because you are not in a virtual environment\n       enter a virtual environment or use --no-venv-check\n</code></pre> <p>Note</p> <p>The <code>slap install</code> command will by default install all run dependencies, as well as development dependencies and any extra dependencies. You can change this behaviour with any of the <code>--only-extras</code>, <code>--extras</code> and <code>--no-dev</code> options. You can also install only dependencies and not your actual project by passing the <code>--no-root</code> option.</p> <p>Check out the install command's documentation for more information.</p>"},{"location":"getting-started/#5-inspect-what-slap-knows-about-your-project","title":"5. Inspect what Slap knows about your project","text":"<p>At times, the <code>info</code> command comes in handy to get a better understanding how Slap sees your project.</p> <code>slap info</code> for Slap's project $ slap info<pre><code>Repository \"/home/runner/work/slap/slap\"\n  vcs: Git(\"/home/runner/work/slap/slap\")\n  host: GithubRepositoryHost(repo='NiklasRosenstein/slap')\n  projects: ['slap-cli']\nProject \".\" (id: slap-cli)\n  version: 1.7.1\n  dist-name: slap-cli\n  packages: slap (src)\n  readme: readme.md\n  handler: PoetryProjectHandler\n  dependencies:\n    run:\n      - 'beautifulsoup4 &gt;=4.10.0,&lt;5.0.0'\n      - 'build &gt;=0.8.0,&lt;0.9.0'\n      - 'cleo &gt;=1.0.0a4'\n      - 'databind &gt;=2.0.0,&lt;3.0.0'\n      - 'flit &gt;=3.6.0,&lt;4.0.0'\n      - 'nr.python.environment &gt;=0.1.4,&lt;0.2.0'\n      - 'nr.util &gt;=0.8.12,&lt;1.0.0'\n      - 'poetry-core &gt;=1.1.0a6,&lt;2.0.0'\n      - 'ptyprocess &gt;=0.7.0,&lt;0.8.0'\n      - 'pygments &gt;=2.11.2,&lt;3.0.0'\n      - 'PyYAML &gt;=4.0'\n      - 'requests &gt;=2.27.1,&lt;3.0.0'\n      - 'setuptools &gt;=39.1.0'\n      - 'tomli &gt;=2.0.0,&lt;3.0.0'\n      - 'tomlkit &gt;=0.10.1,&lt;0.11.0'\n      - 'tqdm &gt;=4.64.0,&lt;5.0.0'\n      - 'twine &gt;=3.7.0,&lt;4.0.0'\n    dev:\n      - 'black &gt;=22.3.0,&lt;23.0.0'\n      - 'flake8 &gt;=4.0.1,&lt;5.0.0'\n      - 'isort &gt;=5.10.1,&lt;6.0.0'\n      - 'mypy &gt;=0.931,&lt;0.932'\n      - 'pytest &gt;=7.1.1,&lt;8.0.0'\n      - 'types-beautifulsoup4 &gt;=4.10.0,&lt;5.0.0'\n      - 'types-pygments &gt;=2.9.16,&lt;3.0.0'\n      - 'types-PyYAML &gt;=6.0.3,&lt;7.0.0'\n      - 'types-requests &gt;=2.27.7,&lt;3.0.0'\n      - 'types-termcolor &gt;=1.1.3,&lt;2.0.0'\n    extra.docs:\n      - mkdocs\n      - mkdocs-material\n      - 'novella ==0.2.3'\n      - 'pydoc-markdown ==4.6.0'\n</code></pre>"},{"location":"getting-started/#6-sanity-check-your-project-configuration","title":"6. Sanity check your project configuration","text":"<p>The <code>slap check</code> command provides some feedback on the sanity of your project configuration. The below example is the check output for Slap's own project.</p> $ slap check<pre><code>  changelog:validate           OK             \u2014 All 128 changelogs are valid.\n  general:packages             OK             \u2014 Detected /home/runner/work/slap/slap/src/slap\n  general:typed                OK             \u2014 py.typed exists as expected\n  poetry:classifiers           OK             \u2014 All classifiers are valid.\n  poetry:license               OK             \u2014 License \"MIT\" is a valid SPDX identifier.\n  poetry:readme                OK             \u2014 Poetry readme is configured correctly (path: readme.md)\n  poetry:urls                  RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\"\n  release:source-code-version  OK             \u2014 Found __version__ in slap\n  release:consistent-versions  OK             \u2014 All version references are equal\n\nSummary: 8 OK, 1 RECOMMENDATION, exit code: 0\n</code></pre> <p>Note</p> <p>\ud83d\udc4b Please feel free to create a GitHub Issue if you any suggestions on new types of checks to add or to improve any of the existing checks. </p>"},{"location":"getting-started/#7-run-tests","title":"7. Run tests","text":"<p>The <code>test</code> command runs the commands configured in your <code>pyproject.toml</code> configuration under the <code>[tool.slap.test]</code> section. It is common to include <code>slap check</code> as one of the tests, as well as static type checking and unit tests.</p> <p>If you bootstrapped your project with Slap, you will already have some test commands set up. Otherwise, consider adding test commands like the below example to your project configuration.</p> Example pyproject.toml<pre><code>[tool.slap.test]\ncheck = \"slap check\"\nmypy = \"mypy src/\"\npytest = \"pytest test/\"\n</code></pre> <code>slap test</code> for Slap's project $ slap test<pre><code>black| All done! \u2728 \ud83c\udf70 \u2728\nblack| 50 files would be left unchanged.\ncheck|   changelog:validate           OK             \u2014 All 128 changelogs are valid.\ncheck|   general:packages             OK             \u2014 Detected /home/runner/work/slap/slap/src/slap\ncheck|   general:typed                OK             \u2014 py.typed exists as expected\ncheck|   poetry:classifiers           OK             \u2014 All classifiers are valid.\ncheck|   poetry:license               OK             \u2014 License \"MIT\" is a valid SPDX identifier.\ncheck|   poetry:readme                OK             \u2014 Poetry readme is configured correctly (path: readme.md)\ncheck|   poetry:urls                  RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\"\ncheck|   release:source-code-version  OK             \u2014 Found __version__ in slap\ncheck|   release:consistent-versions  OK             \u2014 All version references are equal\ncheck| \ncheck| Summary: 8 OK, 1 RECOMMENDATION, exit code: 0\nmypy| Daemon started\nmypy| Success: no issues found in 560 source files\npytest| ============================= test session starts ==============================\npytest| platform linux -- Python 3.10.9, pytest-7.2.1, pluggy-1.0.0 -- /home/runner/work/slap/slap/.venvs/runtime/bin/python\npytest| cachedir: .pytest_cache\npytest| rootdir: /home/runner/work/slap/slap\npytest| collecting ... collected 15 items\npytest| \npytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__good_input PASSED [  6%]\npytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__bad_input PASSED [ 13%]\npytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_pypi_dependency PASSED [ 20%]\npytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_git_dependency PASSED [ 26%]\npytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_url_dependency PASSED [ 33%]\npytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_path_dependency PASSED [ 40%]\npytest| tests/slap/python/test_dependency.py::test__parse_dependency_config__various_configurations PASSED [ 46%]\npytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_empty_string PASSED [ 53%]\npytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_wildcard PASSED [ 60%]\npytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_pep_508_spec PASSED [ 66%]\npytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_semver_spec PASSED [ 73%]\npytest| tests/slap/python/test_dependency.py::test__VersionSpec__throws_on_invalid_pep_508_spec SKIPPED (Detecting invalid PEP 508 selectors is currently not supported) [ 80%]\npytest| tests/slap/python/test_dependency.py::test__PypiDependency__parse PASSED [ 86%]\npytest| tests/slap/python/test_environment.py::test__PythonEnvironment__with_current_python_instance PASSED [ 93%]\npytest| tests/slap/python/test_pep508.py::test__Pep508Environment__sample_markers PASSED [100%]\npytest| \npytest| ======================== 14 passed, 1 skipped in 0.55s =========================\n\ntest summary:\n  \u2022 black (exit code: 0)\n  \u2022 check (exit code: 0)\n  \u2022 flake8 (exit code: 0)\n  \u2022 isort (exit code: 0)\n  \u2022 mypy (exit code: 0)\n  \u2022 pytest (exit code: 0)\n</code></pre>"},{"location":"getting-started/#8-run-commands","title":"8. Run commands","text":"<p>Inspired by <code>npm run</code> and <code>yarn run</code>, <code>slap run</code> is likewise a simple tool to run aliased commands in your project configuration. For example, Slap uses the following aliases that can be run with <code>slap run docs:dev</code> and <code>slap run docs:build</code>, respectively.</p> <pre><code>[tool.slap.run]\n\"docs:build\" = \"cd docs &amp;&amp; novella --base-url slap/\"\n\"docs:dev\" = \"cd docs &amp;&amp; novella --serve\"\n</code></pre>"},{"location":"getting-started/#9-add-a-changelog-entry","title":"9. Add a changelog entry","text":"<p>Slap provides a format for storing changelogs in a structure way. You can add entries to the changelog using the <code>slap changelog add</code> command. A changelog entry contains at a minimum contains a type, description and one or more authors. An entry may also be associated with one or more issues and/or a Pull Request (stored as URLs).</p> <p>Note</p> <p>If your repository is hosted on GitHub, you can use issue and PR numbers and they will be automatically converted to full URLs. If you don't supply an <code>-a,--author</code> option, your Git email will be used. In case of a GitHub repository, that email address will be converted to a Git username instead.</p> Example <pre><code>$ slap changelog add -t improvement -cd 'Add this cool new feature' --issue 52\nid = \"9fad16b6-9da7-49a1-9c4d-63dbf6c8eae9\"\ntype = \"improvement\"\ndescription = \"Add this cool new feature\"\nauthor = \"@NiklasRosenstein\"\nissues = [\n    \"https://github.com/NiklasRosenstein/slap/issues/52\",\n]\n\n[develop 1a131e2] improvement: Add this cool new feature\n 1 file changed, 8 insertions(+)\n create mode 100644 .changelog/_unreleased.toml\n</code></pre> <p>Tip</p> <p>The <code>slap changelog update-pr</code> command can be used to add the <code>pr</code> URL to all changelog entries added between two Git revisions. If used from a CI job, you can automate the addition of the <code>pr</code> field when a PR is opened instead of manually having to add the URL after the PR was created.</p> <p>If your repository is hosted on GitHub, all you need to do is set up the  <code>NiklasRosenstein/slap@gha/changelog/update/v1</code> action.</p>"},{"location":"getting-started/#10-create-a-release","title":"10. Create a release","text":"<p>Slap's <code>release</code> command updates version numbers in you code base and can also commit the changes, tag them and push them to the Git remote. It can also be used to validate that all version references in your project are the same.</p> <p>Supported version locations</p> <p>Slap supports a few places where the version number of your project is hardcoded by default. You can always let Slap know about any other places by configuring additional version references (see the release's commands Configuration documentation).</p> <ul> <li>The <code>version</code> in your <code>pyproject.toml</code> (for Flit or Poetry) or <code>setup.cfg</code> (for Setuptools)</li> <li>The <code>__version__</code> in your Python source code</li> <li>Dependencies on other packages in the same mono-repository (aka. inter-dependencies)</li> </ul> <p>The <code>release</code> command will also automatically update the currently staged changelog entries in <code>.changelog/_unreleased.toml</code> by inserting the current date as the release date and renaming the file to <code>.changelog/{version}.toml</code>.</p> Example  To create a new release, pass the version number or a rule name instead.  $ slap release --tag --push patch<pre><code>bumping 2 version references to 1.7.2\n  pyproject.toml:       1.7.1 \u2192 1.7.2 # 'version = \"1.7.1\"'\n  src/slap/__init__.py: 1.7.1 \u2192 1.7.2 # '__version__ = \"1.7.1\"'\n\nreleasing changelog\n  .changelog/_unreleased.toml \u2192 .changelog/1.7.2.toml\n\ntagging 1.7.2\n\npushing develop, 1.7.2 to origin\n</code></pre> <p>Tip</p> <p>You can also use the <code>--validate</code> flag to validate and show all known version number references:</p> $ slap release --validate<pre><code>versions are ok\n  pyproject.toml:       1.7.1 # 'version = \"1.7.1\"'\n  src/slap/__init__.py: 1.7.1 # '__version__ = \"1.7.1\"'\n</code></pre>"},{"location":"getting-started/#11-publish-to-pypi","title":"11. Publish to PyPI","text":"<p>The <code>publish</code> command builds distributions using your configured build backend and publishes them to a Python package index using Twine. For mono repositories, the command will build all projects before publishing them.</p> $ slap publish<pre><code>Build slap-cli\n  slap-cli-1.4.0.tar.gz\n  slap_cli-1.4.0-py3-none-any.whl\nPublishing\n</code></pre> <p>Note</p> <p>It is recommended that you perform this step only after you created a new release and all your CI checks have passed. Even better, you can configure your CI to publish the package for your once all checks have passed. You can pass the credentials to the <code>-u,--username</code> and <code>-p,--password</code> options just as with the Twine CLI.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#project","title":"Project","text":"<p>At it's core, any directory can be a \"project\", but most projects would have a <code>pyproject.toml</code> or <code>slap.toml</code> configuration file. Most commonly, it will have a <code>pyproject.toml</code> file that contains the Slap configuration under the <code>[tool.slap]</code> namespace. Many concepts in Slap are attached directly to a project. For example if the project has a <code>pyproject.toml</code>, it is considered a Python project, and Python projects can have packages that can be installed, built or published to PyPI or another repository.</p> <p>A project with a <code>slap.toml</code> configuration file (or with no configuration file) is usually used as the parent project for two or more sub-projects. This configuration represents a mono-repository where multiple projects are stored and versioned together.</p> <p>Slap understands most details about a project through a Class ProjectHandlerPlugin. It comes with a default implementation that supports Poetry and Flit Python projects.</p>"},{"location":"glossary/#repository","title":"Repository","text":"<p>A repository is a directory that contains one or more projects. For singular projects, the repository directory is the same as the project directory. For a mono-repository configuration, any directory that contains multiple projects is considered the repository directory (it usually contains a <code>slap.toml</code> configuration file).</p> <p>Note that the repository directory is also considered a project directory, but if it isn't also a Python project (i.e. if it has a <code>pyproject.toml</code> instead of a <code>slap.toml</code>) it will be ignored for most Slap commands.</p> Single projectMono repository <pre><code>my_pacakge/                           -&gt; Repository / Project \"my_package\"\n  pyproject.toml\n  readme.md\n  src/\n  tests/\n</code></pre> <pre><code>/                                     -&gt; Repository / Project \"$\"\n  my_first_package/                   -&gt; Project \"my_first_package\"\n    pyproject.toml\n    readme.md\n    src/\n    tests/\n  my_second_package/                  -&gt; Project \"my_second_package\"\n    pyproject.toml\n    readme.md\n    src/\n    tests/\n  slap.toml\n</code></pre> <p>Slap understands most details about a repository through a Class RepositoryHandlerPlugin. It comes with a default implementation that supports Git repositories and GitHub.</p>"},{"location":"api/documentation/","title":"API Documentation","text":""},{"location":"api/documentation/#class-application","title":"Class Application","text":"<pre><code>class Application()\n</code></pre> <p>[view_source]</p> <p>The application object is the main hub for command-line interactions. It is responsible for managing the project that is the main subject of the command-line invokation (or multiple of such), provide the cleo command-line application that ApplicationPlugins can register commands to, etc.</p> <p></p> <p></p>"},{"location":"api/documentation/#config","title":"config","text":"<p>The application configuration loaded once via <code>get_application_configuration()</code>.</p> <p></p> <p></p>"},{"location":"api/documentation/#cleo","title":"cleo","text":"<p>The cleo application to which new commands can be registered via ApplicationPlugins.</p> <p></p> <p></p>"},{"location":"api/documentation/#repository","title":"repository","text":"<pre><code>@property\ndef repository() -&gt; Repository\n</code></pre> <p>[view_source]</p> <p>Return the Slap repository that is the subject of the current application. There may be command plugins that do not require the repository to function, so this property creates the repository lazily.</p> <p></p> <p></p>"},{"location":"api/documentation/#configurations","title":"configurations","text":"<pre><code>def configurations() -&gt; list[Configuration]\n</code></pre> <p>[view_source]</p> <p>Return a list of all configuration objects, i.e. all projects and eventually the {@link pydoc:slap.repository.Repository}, unless one project is from the same directory as the repository.</p> <p></p> <p></p>"},{"location":"api/documentation/#load_plugins","title":"load_plugins","text":"<pre><code>def load_plugins() -&gt; None\n</code></pre> <p>[view_source]</p> <p>Loads all application plugins (see ApplicationPlugin) and activates them.</p> <p>By default, all plugins available in the <code>slap.application.ApplicationPlugin</code> entry point group are loaded. This behaviour can be modified by setting either the <code>[tool.slap.plugins.disable]</code> or <code>[tool.slap.plugins.enable]</code> configuration option (without the <code>tool.slap</code> prefix in case of a <code>slap.toml</code> configuration file). The default plugins delivered immediately with Slap are enabled by default unless disabled explicitly with the <code>disable</code> option.</p> <p></p> <p></p>"},{"location":"api/documentation/#run","title":"run","text":"<pre><code>def run() -&gt; None\n</code></pre> <p>[view_source]</p> <p>Loads and activates application plugins and then invokes the CLI.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-applicationplugin","title":"Class ApplicationPlugin","text":"<pre><code>class ApplicationPlugin(t.Generic[T], abc.ABC)\n</code></pre> <p>[view_source]</p> <p>A plugin that is activated on application load, usually used to register additional CLI commands.</p> <p></p> <p></p>"},{"location":"api/documentation/#load_configuration","title":"load_configuration","text":"<pre><code>@abc.abstractmethod\ndef load_configuration(app: Application) -&gt; T\n</code></pre> <p>[view_source]</p> <p>Load the configuration of the plugin. Usually, plugins will want to read the configuration from the Slap configuration, which is either loaded from <code>pyproject.toml</code> or <code>slap.toml</code>. Use <code>Application.raw_config</code> to access the Slap configuration.</p> <p></p> <p></p>"},{"location":"api/documentation/#activate","title":"activate","text":"<pre><code>@abc.abstractmethod\ndef activate(app: Application, config: T) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Activate the plugin. Register a <code>Command</code> to Application.cleo or another type of plugin to the <code>Application.plugins</code> registry.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-repositoryhandlerplugin","title":"Class RepositoryHandlerPlugin","text":"<pre><code>class RepositoryHandlerPlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>A plugin to provide data and operations on a repository level.</p> <p></p> <p></p>"},{"location":"api/documentation/#matches_repository","title":"matches_repository","text":"<pre><code>@abc.abstractmethod\ndef matches_repository(repository: Repository) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Return <code>True</code> if the handler is able to provide data for the given project.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_vcs","title":"get_vcs","text":"<pre><code>@abc.abstractmethod\ndef get_vcs(repository: Repository) -&gt; Vcs | None\n</code></pre> <p>[view_source]</p> <p>Return the version control system that the repository is managed with.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_repository_host","title":"get_repository_host","text":"<pre><code>@abc.abstractmethod\ndef get_repository_host(repository: Repository) -&gt; RepositoryHost | None\n</code></pre> <p>[view_source]</p> <p>Return the interface for interacting with the VCS hosting service.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_projects","title":"get_projects","text":"<pre><code>@abc.abstractmethod\ndef get_projects(repository: Repository) -&gt; list[Project]\n</code></pre> <p>[view_source]</p> <p>Return the projects of this repository.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-projecthandlerplugin","title":"Class ProjectHandlerPlugin","text":"<pre><code>class ProjectHandlerPlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>A plugin that implements the core functionality of a project. Project handlers are intermediate layers between the Slap tooling and the actual project configuration, allowing different types of configurations to be adapted and used with Slap.</p> <p></p> <p></p>"},{"location":"api/documentation/#matches_project","title":"matches_project","text":"<pre><code>@abc.abstractmethod\ndef matches_project(project: Project) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Return <code>True</code> if the handler is able to provide data for the given project.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_dist_name","title":"get_dist_name","text":"<pre><code>@abc.abstractmethod\ndef get_dist_name(project: Project) -&gt; str | None\n</code></pre> <p>[view_source]</p> <p>Return the distribution name for the project.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_readme","title":"get_readme","text":"<pre><code>@abc.abstractmethod\ndef get_readme(project: Project) -&gt; str | None\n</code></pre> <p>[view_source]</p> <p>Return the readme file configured for the project.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_packages","title":"get_packages","text":"<pre><code>@abc.abstractmethod\ndef get_packages(project: Project) -&gt; list[Package] | None\n</code></pre> <p>[view_source]</p> <p>Return a list of packages for the project. Return <code>None</code> to indicate that the project is expected to not contain any packages.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_dependencies","title":"get_dependencies","text":"<pre><code>@abc.abstractmethod\ndef get_dependencies(project: Project) -&gt; Dependencies\n</code></pre> <p>[view_source]</p> <p>Return the dependencies of the project.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_version","title":"get_version","text":"<pre><code>def get_version(project: Project) -&gt; str | None\n</code></pre> <p>[view_source]</p> <p>Return the main project version string.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_version_refs","title":"get_version_refs","text":"<pre><code>def get_version_refs(project: Project) -&gt; list[VersionRef]\n</code></pre> <p>[view_source]</p> <p>Allows the project handler to return additional version refs. Usually returns the version reference in <code>pyproject.toml</code>.</p> <p></p> <p></p>"},{"location":"api/documentation/#add_dependency","title":"add_dependency","text":"<pre><code>def add_dependency(project: Project, dependency: Dependency,\n                   where: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Add a dependency to the project configuration.</p> <p>Arguments:</p> <ul> <li><code>project</code> - The project to update.</li> <li><code>selector</code> - The dependency to add.</li> <li><code>where</code> - The location of where to add the dependency. This is either <code>'run'</code>, <code>'dev'</code>, or otherwise   refers to the name of an extra requirement.   Raises NotImplementedError: If the operation is not supported by the project handler.</li> </ul> <p></p> <p></p>"},{"location":"api/documentation/#class-checkplugin","title":"Class CheckPlugin","text":"<pre><code>class CheckPlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>This plugin type can be implemented to add custom checks to the <code>slap check</code> command. Note that checks will be grouped and their names prefixed with the plugin name, so that name does not need to be included in the name of the returned checks.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-releaseplugin","title":"Class ReleasePlugin","text":"<pre><code>class ReleasePlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>This plugin type provides additional references to the project's version number allowing <code>slap release</code> to update these references to a new version number.</p> <p></p> <p></p>"},{"location":"api/documentation/#get_version_refs_1","title":"get_version_refs","text":"<pre><code>def get_version_refs(project: Project) -&gt; list[VersionRef]\n</code></pre> <p>[view_source]</p> <p>Return a list of occurrences of the project version.</p> <p></p> <p></p>"},{"location":"api/documentation/#create_release","title":"create_release","text":"<pre><code>def create_release(repository: Repository, target_version: str,\n                   dry: bool) -&gt; t.Sequence[Path]\n</code></pre> <p>[view_source]</p> <p>Gives the plugin a chance to perform an arbitrary action after all version references have been bumped, being informed of the target version. If dry is <code>True</code>, the plugin should only act as if it was performing its usual actions but not commit the changes to disk. It should return the list of files that it modifies or would have modified.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-versionincrementingruleplugin","title":"Class VersionIncrementingRulePlugin","text":"<pre><code>class VersionIncrementingRulePlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>This plugin type can be implemented to provide rules accepted by the <code>slap release &lt;rule&gt;</code> command to \"bump\" an existing version number to another. The builtin rules implemented in <code>slap.ext.version_incrementing_rules</code>.</p> <p></p> <p></p>"},{"location":"api/documentation/#class-repositoryciplugin","title":"Class RepositoryCIPlugin","text":"<pre><code>class RepositoryCIPlugin(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>This plugin type can be used with the <code>slap changelog update-pr -use &lt;plugin_name&gt;</code> option. It provides all the details derivable from the environment (e.g. environment variables available from CI builds) that can be used to detect which changelog entries have been added in a pull request, the pull request URL and the means to publish the changes back to the original repository.</p> <p></p> <p></p>"},{"location":"api/documentation/#all","title":"all","text":"<pre><code>@staticmethod\ndef all() -&gt; dict[str, t.Callable[[], RepositoryCIPlugin]]\n</code></pre> <p>[view_source]</p> <p>Iterates over all registered automation plugins and returns a dictionary that maps the plugin name to a factory function.</p> <p></p> <p></p>"},{"location":"api/documentation/#get","title":"get","text":"<pre><code>@staticmethod\ndef get(plugin_name: str, io: IO) -&gt; RepositoryCIPlugin\n</code></pre> <p>[view_source]</p> <p>Returns an instance of the plugin with given name, fully initialized.</p> <p>Raises a <code>ValueError</code> if the plugin does not exist.</p>"},{"location":"api/plugins/","title":"Plugins","text":"<p>A lot of Slap's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Slap further.</p>"},{"location":"api/plugins/#types-of-plugins","title":"Types of plugins","text":"<ul> <li>Class ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an   application plugin using the <code>Application.plugins</code> registry.</li> <li>Class CheckPlugin \u2013 The type of plugin used by <code>slap check</code>.</li> <li>Class ReleasePlugin \u2013 The type of plugin used by <code>slap release</code> to detect version references.</li> </ul>"},{"location":"commands/add/","title":"<code>slap add</code>","text":"<p>This command is venv aware.</p> <p>This command adds one or more Python packages to the dependencies defined in <code>pyproject.toml</code>. If the packages are not already installed, they will be installed into the current Python environment using Pip.</p> Synopsis <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  add [options] [--] &lt;packages&gt;...\n\nArguments:\n  packages                  One or more packages to install with Pip and add to the project configuration.\n\nOptions:\n      --no-venv-check       Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv  Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV   Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n  -d, --dev                 Add as development dependencies.\n  -e, --extra=EXTRA         Add as extra dependencies for the specified extra name.\n      --no-install          Do not actually install the dependencies with Pip. Note that if the dependency is not already installed and no version selector is specified with the package name, it will fall back to a match-all version range (`*`).\n      --source=SOURCE       Specify the source from which the package should be installed.\n      --upgrade             Upgrade dependencies that are already installed and declared in the project. If the dependency is already declared, the --source option can be skipped as it will be inherited from the declaration.\n  -p, --python=PYTHON       The Python executable to install to.\n  -h, --help                Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet               Do not output any message.\n  -V, --version             Display this application version.\n      --ansi                Force ANSI output.\n      --no-ansi             Disable ANSI output.\n  -n, --no-interaction      Do not ask any interactive question.\n  -v|vv|vvv, --verbose      Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n  command is executed, it will check if we're currently in a virtual environment. If not, it will activate\n  the environment that is considered \"active\" by the Slap `venv` command.\n</code></pre>"},{"location":"commands/add/#usage-example","title":"Usage example","text":"<p>The below example installs <code>httpx</code> using Pip and adds the dependency to <code>pyproject.toml</code>. If your project is using Poetry as the build backend, it will add <code>httpx = \"^0.22.0\"</code> wheras if it is using Flit, the command will add instead <code>'httpx (&gt;=0.22.0,&lt;0.23.0)'</code>.</p> <pre><code>$ slap add httpx\nInstalling httpx\nAdding httpx ^0.22.0\n</code></pre> <p>Note</p> <p>Slap uses <code>pkg_resources.get_distribution()</code> to retrieve the version of the package that got installed, or was already installed, and assumes that the package is available in the target Python environment.</p>"},{"location":"commands/add/#support-matrix","title":"Support matrix","text":"Build system Supported Flit \u2705 Poetry \u2705 Setuptools \u274c (dependencies defined in <code>setup.cfg</code>)"},{"location":"commands/changelog/","title":"<code>slap changelog</code>","text":"<p>This command provides four sub-commands that allow you to interact with Slap's structured changelog format: <code>add</code>, <code>convert</code>, <code>format</code> and <code>update-pr</code>.</p>"},{"location":"commands/changelog/#configuration","title":"Configuration","text":"<p>Option scope: <code>[tool.slap.changelog]</code> or <code>[changelog]</code></p> Option Type Default Description <code>enabled</code> <code>bool</code> <code>True</code> Whether the changelog feature is enabled for the directory in which the option is configured. This is useful to disable on the root of a mono-repository that contains multiple Python projects if one wants to prevent accidentally add changelog entries to the root directory. <code>directory</code> <code>str</code> <code>.changelog/</code> The directory in which the changelogs are stored. <code>valid-types</code> <code>list[str]</code> <code>[\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"]</code> A list of strings that are accepted in changelog entries as types. <code>ChangelogConfig</code> documentation  ## Class ChangelogConfig  <pre><code>@ExtraKeys(True)\n\n@dataclasses.dataclass\nclass ChangelogConfig()\n</code></pre>  [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/changelog.py#L51)    #### enabled  Whether the changelog feature is enabled. This acts locally for the current project and not globally. Particularly useful for monorepos that have multiple subprojects each with their changelog directories to prevent accidentally creating changelogs in the root directory.  When not set, it will be considered `True` if the current project is a Python project.    #### directory  The directory in which changelogs are stored.    #### valid\\_types  The list of valid types that can be used in changelog entries. The default types are `DEFAULT_CHANGELOG_TYPES`."},{"location":"commands/changelog/#subcommands","title":"Subcommands","text":""},{"location":"commands/changelog/#slap-changelog-add","title":"<code>slap changelog add</code>","text":"<p>Add an entry to the unreleased changelog. Given the <code>-c,--commit</code> option, it will also create a Git commit with the same message as the entry description, prefixed by the changelog type. If used in a sub-directory of a project, the commit message is prefixed by the sub-directory.</p> <p>Example</p> <pre><code>$ slap changelog add -t fix -d 'Fix the documentation' --issue 231 --issue 234\n# Added changelog entry to .changelog/_unreleased.toml\nid = \"e0ee08af-ff2e-4aee-b795-e6c37e4c16de\"\ntype = \"fix\"\ndescription = \"Fix the documentation\"\nauthor = \"@NiklasRosenstein\"\nissues = [\n\"https://github.com/username/repo/issues/231\",\n\"https://github.com/username/repo/issues/234\",\n]\n</code></pre> Default changelog types <pre><code>DEFAULT_VALID_TYPES = [\n  'breaking change',\n  'deprecation',\n  'docs',\n  'feature',\n  'fix',\n  'hygiene',\n  'improvement',\n  'refactor',\n  'tests'\n]\n</code></pre> Synopsis <pre><code>Description:\n  Add an entry to the unreleased changelog via the CLI.\n\nUsage:\n  changelog add [options]\n\nOptions:\n  -t, --type=TYPE                The type of the changelog. Unless configured differently, one of: breaking change, deprecation, docs, feature, fix, hygiene, improvement, refactor, tests\n  -d, --description=DESCRIPTION  A Markdown formatted description of the changelog entry.\n  -a, --author=AUTHOR            Your username or email address. By default, this will be your configured Git name and email address.\n      --pr=PR                    The pull request that the change is introduced to the main branch with. This is not usually known at the time the changelog entry is created, so this option is not often used. If the remote repository is well supported by Slap, a pull request number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified.\n  -i, --issue=ISSUE              An issue related to this changelog. If the remote repository is well supported by Slap, an issue number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified. (multiple values allowed)\n  -c, --commit                   Commit the currently staged changes in the VCS as well as the updated changelog file to disk. The commit message is a concatenation of the --type, -t and --description, -d, as well as the directory relative to the VCS toplevel if the changelog is created not in the toplevel directory of the repository.\n  -h, --help                     Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet                    Do not output any message.\n  -V, --version                  Display this application version.\n      --ansi                     Force ANSI output.\n      --no-ansi                  Disable ANSI output.\n  -n, --no-interaction           Do not ask any interactive question.\n  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Add an entry to the unreleased changelog via the CLI.\n\n  A changelog is a TOML file, usually in the .changelog/ directory, named with\n  the version number it refers to and containing changelog entries. Changes that\n  are currently not released in a version are stored in a file called\n  _unreleased.toml.\n\n  Changelog entries contain at least one author, a type (e.g. whether the entry\n  describes a feature, enhancement, bug fix, etc.) and optionally a subject (e.g.\n  whether the change is related to docs or a particular component of the code), a\n  Markdown description, possibly a link to a pull request with which the change\n  was introduced and links to issues that the changelog addresses.\n\n  Example:\n\n    # .changelog/0.1.1.toml\n    [changelog]\n    release-date = \"2022-01-17\"\n\n    [[changelog.entries]]\n    id = \"a7bc01f\"\n    type = \"improvement\"\n    description = \"Improvement to `my_package.util`\"\n    author = \"username\"\n    pr = \"https://github.com/username/my_package/pulls/13\"\n\n  Changelog entries can be managed easily using the slap changelog command.\n\n    $ slap changelog add -t feature -d 'Improvement to `my_package.util`\"\n\n  The pr field is usually set manually after the PR is created or updated\n  automatically by a CI action using the slap changelog update-pr-field command.\n</code></pre>"},{"location":"commands/changelog/#slap-changelog-convert","title":"<code>slap changelog convert</code>","text":"<p>This command converts changelogs from the previous YAML-based format used by Shut (a predecessor to Slap) to the TOML format.</p> Synopsis <pre><code>Description:\n  Convert Slap's old YAML based changelogs to new style TOML changelogs.\n\nUsage:\n  changelog convert [options]\n\nOptions:\n  -a, --author=AUTHOR        The author to fall back to. If not specified, the current VCS queried for the author name instead and their email will be used (depending on the normalization of the repository remote, this will be converted to a username, for example in the case of GitHub).\n  -d, --directory=DIRECTORY  The directory from which to load the old changelogs. Defaults to the same directory that the new changelogs will be written to.\n      --dry                  Do not make changes on disk.\n  -x, --fail-fast            If this flag is enabled, exit as soon as an error is encountered with any file.\n  -h, --help                 Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet                Do not output any message.\n  -V, --version              Display this application version.\n      --ansi                 Force ANSI output.\n      --no-ansi              Disable ANSI output.\n  -n, --no-interaction       Do not ask any interactive question.\n  -v|vv|vvv, --verbose       Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Convert Slap's old YAML based changelogs to new style TOML changelogs.\n\n  Sometimes the changelog entries in the old style would be suffixed with the\n  author's username in the format of @Name or (@Name), so this command will\n  attempt to extract that information to figure out the author of the change.\n</code></pre>"},{"location":"commands/changelog/#slap-changelog-format","title":"<code>slap changelog format</code>","text":"<p>Pretty print a changelog for the terminal or formatted as Markdown. Use the <code>-a,--all</code> option to format all changelogs. This command is particularly useful to embed the changelog contents into generated documentation. For example, if you use Novella, you can use the below bit in your documentation:</p> <pre><code>@shell cd .. &amp;&amp; slap changelog format --as-markdown --all\n</code></pre> <p>This is actually used in this very documentation: Check out the Changelog page.</p> Synopsis <pre><code>Description:\n  Format the changelog in the terminal or in Markdown format.\n\nUsage:\n  changelog format [options] [--] [&lt;version&gt;]\n\nArguments:\n  version               The changelog version to format.\n\nOptions:\n  -m, --markdown        Render the changelog in Markdown format.\n  -a, --all             Render all changelogs in reverse chronological order.\n  -h, --help            Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet           Do not output any message.\n  -V, --version         Display this application version.\n      --ansi            Force ANSI output.\n      --no-ansi         Disable ANSI output.\n  -n, --no-interaction  Do not ask any interactive question.\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n</code></pre>"},{"location":"commands/changelog/#slap-changelog-diff-pr-update","title":"<code>slap changelog diff pr update</code>","text":"<p>Updates the <code>pr</code> field of entries in the unreleased changelog. This is useful to run from continuous integration jobs to avoid having to manually inject the pull request URL into changelog entries. If you are using GitHub, try using the <code>NiklasRosenstein/slap@gha/changelog/update/v2</code> action.</p> Synopsis <pre><code>Description:\n  Base class for commands that perform changelog diffs.\n\nUsage:\n  changelog diff pr update [options] [--] [&lt;ref_or_range&gt;]\n\nArguments:\n  ref_or_range          The Git ref or Git range (formatted as BASE..HEAD) to look inspect the diff for. If only a Git ref is specified, the diff between that ref and the current worktree is used. The --use option can be used in a compatible CI environment to automatically derive the base Git ref in Pull Requests.\n\nOptions:\n      --use=USE         Use the specified plugin for interacting with the Git repository host. Use this in supported CI environments instead of manually configuring the command-line settings. You can list the available plugins with the changelog pr plugins command.\n  -d, --dry             Do not actually make changes on disk.\n      --overwrite       Update PR references even if an entry's reference is already set but different.\n      --pr=PR           The PR URL to set. If not set, the --use option must be specified.\n  -h, --help            Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet           Do not output any message.\n  -V, --version         Display this application version.\n      --ansi            Force ANSI output.\n      --no-ansi         Disable ANSI output.\n  -n, --no-interaction  Do not ask any interactive question.\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n</code></pre>"},{"location":"commands/changelog/#slap-changelog-diff-assert-added","title":"<code>slap changelog diff assert-added</code>","text":"<p>This is a useful command to run in CI on Pull Requests to ensure that a new changelog entry was added by the PR. If you are using GitHub, try using the <code>NiklasRosenstein/slap@gha/changelog/assert-added/v2</code> action.</p> Synopsis <pre><code>Description:\n  Base class for commands that perform changelog diffs.\n\nUsage:\n  changelog diff assert-added [options] [--] [&lt;ref_or_range&gt;]\n\nArguments:\n  ref_or_range          The Git ref or Git range (formatted as BASE..HEAD) to look inspect the diff for. If only a Git ref is specified, the diff between that ref and the current worktree is used. The --use option can be used in a compatible CI environment to automatically derive the base Git ref in Pull Requests.\n\nOptions:\n      --use=USE         Use the specified plugin for interacting with the Git repository host. Use this in supported CI environments instead of manually configuring the command-line settings. You can list the available plugins with the changelog pr plugins command.\n  -h, --help            Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet           Do not output any message.\n  -V, --version         Display this application version.\n      --ansi            Force ANSI output.\n      --no-ansi         Disable ANSI output.\n  -n, --no-interaction  Do not ask any interactive question.\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n</code></pre>"},{"location":"commands/check/","title":"<code>slap check</code>","text":"<p>Check your project configuration for errors, warnings or recommendations.</p>"},{"location":"commands/check/#configuration","title":"Configuration","text":"<p>Option scope: <code>[tool.slap.check]</code> or <code>[check]</code></p> Option Type Default Description <code>plugins</code> <code>list[str]</code> <code>[\"changelog\", \"general\", \"poetry\", \"release\"]</code> A list of check plugins to use. Note that the Poetry plugin only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't it. Additional plugins can be registered via an <code>ApplicationPlugin</code> under the <code>CheckPlugin</code> group."},{"location":"commands/check/#built-in-check-plugins","title":"Built-in check plugins","text":""},{"location":"commands/check/#class-changelogvalidationcheckplugin","title":"Class ChangelogValidationCheckPlugin","text":"<pre><code>@dataclasses.dataclass\nclass ChangelogValidationCheckPlugin(CheckPlugin)\n</code></pre> <p>[view_source]</p> <p>This check plugin validates the structured changelog files, if any.</p> <p>Plugin ID: <code>changelog</code></p> <p></p> <p></p>"},{"location":"commands/check/#class-generalchecksplugin","title":"Class GeneralChecksPlugin","text":"<pre><code>class GeneralChecksPlugin(CheckPlugin)\n</code></pre> <p>[view_source]</p> <p>This plugin provides general checks applicable to all types of projects managed with Slap.</p> <p>Plugin ID: <code>general</code>.</p> <p></p> <p></p>"},{"location":"commands/check/#class-poetrychecksplugin","title":"Class PoetryChecksPlugin","text":"<pre><code>class PoetryChecksPlugin(CheckPlugin)\n</code></pre> <p>[view_source]</p> <p>Check plugin to validate the Poetry configuration and compare it with Slap's expectations.</p> <p>Plugin ID: <code>poetry</code></p> <p></p> <p></p>"},{"location":"commands/check/#get_readme_check","title":"get_readme_check","text":"<pre><code>@check(\"readme\")\ndef get_readme_check(project: Project) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if Poetry will be able to pick up the right readme file.</p> <p></p> <p></p>"},{"location":"commands/check/#get_urls_check","title":"get_urls_check","text":"<pre><code>@check(\"urls\")\ndef get_urls_check(project: Project) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if URLs are configured in the Poetry configuration and recommends to configure the <code>Homepage</code>, <code>Repository</code>, <code>Documentation</code> and <code>Bug Tracker</code> URLs under <code>[tool.poetry.urls]</code>.</p> <p></p> <p></p>"},{"location":"commands/check/#get_classifiers_check","title":"get_classifiers_check","text":"<pre><code>@check(\"classifiers\")\ndef get_classifiers_check(project: Project) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if all Python package classifiers are valid and recommends to configure them if none are set.</p> <p></p> <p></p>"},{"location":"commands/check/#get_license_check","title":"get_license_check","text":"<pre><code>@check(\"license\")\ndef get_license_check(project: Project) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if package license is a valid SPDX license identifier and recommends to configure a license if none is set.</p> <p></p> <p></p>"},{"location":"commands/check/#class-releasechecksplugin","title":"Class ReleaseChecksPlugin","text":"<pre><code>class ReleaseChecksPlugin(CheckPlugin)\n</code></pre> <p>[view_source]</p> <p>Performs some checks relevant for the <code>slap release</code> command.</p> <p></p> <p></p>"},{"location":"commands/check/#check_packages_have_source_code_version","title":"check_packages_have_source_code_version","text":"<pre><code>@check(\"source-code-version\")\ndef check_packages_have_source_code_version(\n        project: Project) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if all Python packages in the project have a version defined in the source code.</p> <p></p> <p></p>"},{"location":"commands/check/#check_version_number_consistency","title":"check_version_number_consistency","text":"<pre><code>@check(\"consistent-versions\")\ndef check_version_number_consistency(\n        app: Application) -&gt; tuple[CheckResult, str]\n</code></pre> <p>[view_source]</p> <p>Checks if the version numbers in the project source code, project configuration and any other instances that are detected by release plugins or in the <code>[tool.slap.release].references</code> option are consistent.</p>"},{"location":"commands/info/","title":"<code>slap info</code>","text":"<p>Shows details about your repository and project(s) as Slap understands them.</p> Synopsis <pre><code>Description:\n  Show info about the Slap application workspace and the loaded projects.\n\nUsage:\n  info [options]\n\nOptions:\n  -h, --help            Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet           Do not output any message.\n  -V, --version         Display this application version.\n      --ansi            Force ANSI output.\n      --no-ansi         Disable ANSI output.\n  -n, --no-interaction  Do not ask any interactive question.\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n</code></pre> <p>Example from the Slap repository itself:</p> $ slap info<pre><code>Repository \"/home/runner/work/slap/slap\"\n  vcs: Git(\"/home/runner/work/slap/slap\")\n  host: GithubRepositoryHost(repo='NiklasRosenstein/slap')\n  projects: ['slap-cli']\nProject \".\" (id: slap-cli)\n  version: 1.7.1\n  dist-name: slap-cli\n  packages: slap (src)\n  readme: readme.md\n  handler: PoetryProjectHandler\n  dependencies:\n    run:\n      - 'beautifulsoup4 &gt;=4.10.0,&lt;5.0.0'\n      - 'build &gt;=0.8.0,&lt;0.9.0'\n      - 'cleo &gt;=1.0.0a4'\n      - 'databind &gt;=2.0.0,&lt;3.0.0'\n      - 'flit &gt;=3.6.0,&lt;4.0.0'\n      - 'nr.python.environment &gt;=0.1.4,&lt;0.2.0'\n      - 'nr.util &gt;=0.8.12,&lt;1.0.0'\n      - 'poetry-core &gt;=1.1.0a6,&lt;2.0.0'\n      - 'ptyprocess &gt;=0.7.0,&lt;0.8.0'\n      - 'pygments &gt;=2.11.2,&lt;3.0.0'\n      - 'PyYAML &gt;=4.0'\n      - 'requests &gt;=2.27.1,&lt;3.0.0'\n      - 'setuptools &gt;=39.1.0'\n      - 'tomli &gt;=2.0.0,&lt;3.0.0'\n      - 'tomlkit &gt;=0.10.1,&lt;0.11.0'\n      - 'tqdm &gt;=4.64.0,&lt;5.0.0'\n      - 'twine &gt;=3.7.0,&lt;4.0.0'\n    dev:\n      - 'black &gt;=22.3.0,&lt;23.0.0'\n      - 'flake8 &gt;=4.0.1,&lt;5.0.0'\n      - 'isort &gt;=5.10.1,&lt;6.0.0'\n      - 'mypy &gt;=0.931,&lt;0.932'\n      - 'pytest &gt;=7.1.1,&lt;8.0.0'\n      - 'types-beautifulsoup4 &gt;=4.10.0,&lt;5.0.0'\n      - 'types-pygments &gt;=2.9.16,&lt;3.0.0'\n      - 'types-PyYAML &gt;=6.0.3,&lt;7.0.0'\n      - 'types-requests &gt;=2.27.7,&lt;3.0.0'\n      - 'types-termcolor &gt;=1.1.3,&lt;2.0.0'\n    extra.docs:\n      - mkdocs\n      - mkdocs-material\n      - 'novella ==0.2.3'\n      - 'pydoc-markdown ==4.6.0'\n</code></pre>"},{"location":"commands/init/","title":"<code>slap init</code>","text":"<p>This command bootstrap Python project files.</p> Synopsis <pre><code>Description:\n  Bootstrap some files for a Python project.\n\nUsage:\n  init [options] [--] [&lt;directory&gt;]\n\nArguments:\n  directory                The directory in which to create the generated files. If not specified, a new directory with the name specified via the --name option is created.\n\nOptions:\n      --name=NAME          The name of the Python package.\n      --license=LICENSE    The package license. [default: \"MIT\"]\n  -t, --template=TEMPLATE  The template to use. [default: \"poetry\"]\n  -f, --overwrite          Overwrite files.\n  -d, --dry                Dont actually write files.\n      --as-markdown        Render the content as Markdown (uses by the Slap docs)\n  -h, --help               Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet              Do not output any message.\n  -V, --version            Display this application version.\n      --ansi               Force ANSI output.\n      --no-ansi            Disable ANSI output.\n  -n, --no-interaction     Do not ask any interactive question.\n  -v|vv|vvv, --verbose     Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Bootstrap some files for a Python project.\n\n  Currently available templates:\n\n  1. poetry\n</code></pre>"},{"location":"commands/init/#templates","title":"Templates","text":""},{"location":"commands/init/#poetry","title":"Poetry","text":"$ slap init -t poetry --name my.pkg<pre><code>write /home/runner/work/slap/slap/docs/pyproject.toml\nwrite /home/runner/work/slap/slap/docs/LICENSE\nwrite /home/runner/work/slap/slap/docs/readme.md\nwrite /home/runner/work/slap/slap/docs/.flake8\nwrite /home/runner/work/slap/slap/docs/.gitignore\nwrite /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py\nwrite /home/runner/work/slap/slap/docs/tests/test_import.py\nwrite /home/runner/work/slap/slap/docs/src/my/pkg/py.typed\n</code></pre> /home/runner/work/slap/slap/docs/pyproject.toml<pre><code>[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry]\nname = \"my.pkg\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Unknown &lt;me@unknown.org&gt;\"]\nlicense = \"MIT\"\nreadme = \"readme.md\"\npackages = [{ include = \"my/pkg\", from = \"src\" }]\nclassifiers = []\nkeywords = []\n\n[tool.poetry.urls]\n# \"Bug Tracker\" = \"\"\n# Documentation = \"\"\n# Homepage = \"\"\n# Repository = \"\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\n\n[tool.poetry.dev-dependencies]\nblack = \"*\"\nflake8 = \"*\"\nisort = \"*\"\nmypy = \"*\"\npytest = \"*\"\n\n[tool.slap]\ntyped = true\n\n[tool.slap.test]\ncheck = \"slap check\"\nmypy = \"dmypy run src/\"\npytest = \"pytest tests/ -vv\"\nblack = \"black --check src/ tests/\"\nisort = \"isort --check-only src/ tests/\"\nflake8 = \"flake8 src/ tests/\"\n\n[tool.slap.run]\nfmt = \"black src/ tests/ &amp;&amp; isort src/ tests/\"\n\n[tool.mypy]\npython_version = \"3.6\"\nexplicit_package_bases = true\nmypy_path = [\"src\"]\nnamespace_packages = true\npretty = true\nshow_error_codes = true\nshow_error_context = true\nstrict = true\nwarn_no_return = true\nwarn_redundant_casts = true\nwarn_unreachable = true\nwarn_unused_ignores = true\n\n[tool.isort]\nprofile = \"black\"\nline_length = 120\ncombine_as_imports = true\n\n[tool.black]\nline-length = 120\n</code></pre> /home/runner/work/slap/slap/docs/LICENSE<pre><code>MIT License\n\nCopyright (c) 2023 Unknown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nthis software and associated documentation files (the \"Software\"), to deal in\nSoftware without restriction, including without limitation the rights to use,\nmodify, merge, publish, distribute, sublicense, and/or sell copies of the\nand to permit persons to whom the Software is furnished to do so, subject to\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included in all\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre> /home/runner/work/slap/slap/docs/readme.md<pre><code># my.pkg\n</code></pre> /home/runner/work/slap/slap/docs/.flake8<pre><code>[flake8]\nmax-line-length = 120\n# Black can yield formatted code that triggers these Flake8 warnings.\nignore=\n    # line break before binary operator\n    W503,\n    # line break after binary operator\n    W504,\n</code></pre> /home/runner/work/slap/slap/docs/.gitignore<pre><code>/.vscode\n/dist\n/build\n.venv/\n*.egg-info/\n__pycache__/\npoetry.lock\n</code></pre> /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py<pre><code>__version__ = \"0.1.0\"\n</code></pre> /home/runner/work/slap/slap/docs/tests/test_import.py<pre><code>def test_import():\n    exec(\"from my.pkg import *\")\n</code></pre> /home/runner/work/slap/slap/docs/src/my/pkg/py.typed<pre><code>\n</code></pre>"},{"location":"commands/init/#github","title":"Github","text":"$ slap init -t github<pre><code>write /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml\n</code></pre> /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml<pre><code>name: Python application\n\non:\n  push: { branches: [ develop ], tags: [ \"*\" ] }\n  pull_request: { branches: [ develop ] }\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [ \"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.x\" ]\n    steps:\n    - uses: actions/checkout@v2\n    - uses: python-slap/slap-cli@gha/install/v1\n    - uses: actions/setup-python@v2\n      with: { python-version: \"${{ matrix.python-version }}\" }\n    - run: slap install -vv --no-venv-check\n    - run: slap test\n\n  update-changelog:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    steps:\n      - uses: actions/checkout@v2\n      - uses: python-slap/slap-cli@gha/changelog/update/v1\n</code></pre>"},{"location":"commands/install/","title":"<code>slap install</code>","text":"<p>This command is venv aware.</p> <p>Install the current project or all projects in a mono-repository into the current Python environment, including development dependencies and extras. After cloning a new repository, this is often the first command you run after creating a virtual environment (for that, see <code>slap venv</code>).</p> <p>Common options to add are <code>--link</code> if you want to develop on the project(s) and <code>--no-venv-check</code> if you want don't want Slap to protect you from accidentally installing the project(s) into a non-virtual Python environment.</p> Synopsis <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  install [options]\n\nOptions:\n      --no-venv-check            Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv       Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV        Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n      --only=ONLY                Path to the subproject to install only. May still cause other projects to be installed if required by the selected project via inter dependencies, but only their run dependencies will be installed.\n      --link                     Symlink the root project using slap link instead of installing it directly.\n      --no-dev                   Do not install development dependencies.\n      --no-root                  Do not install the package itself, but only its dependencies.\n      --extras=EXTRAS            A comma-separated list of extras to install. Note that \"dev\" is a valid extras.\n      --only-extras=ONLY-EXTRAS  Install only the specified extras. Note that \"dev\" is a valid extras.\n      --upgrade                  Upgrade already installed packages.\n      --from=FROM                Install another Slap project from the given directory.\n      --index=INDEX              Set an index URL to install from. Must be formatted like name=myindex,url=https://... The username and password may be specified as arguments as well. Note that this format requires that commas are urlencoded if they are presented in the URL. This argument can be used to override the URL of the index that a dependency is installed from (the dependency must specify a `source` in `pyproject.toml`) and/or inject credentials. (multiple values allowed)\n      --extra-index=EXTRA-INDEX  Deprecated. Same as --index. (multiple values allowed)\n  -p, --python=PYTHON            The Python executable to install to.\n  -h, --help                     Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet                    Do not output any message.\n  -V, --version                  Display this application version.\n      --ansi                     Force ANSI output.\n      --no-ansi                  Disable ANSI output.\n  -n, --no-interaction           Do not ask any interactive question.\n  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n  command is executed, it will check if we're currently in a virtual environment. If not, it will activate\n  the environment that is considered \"active\" by the Slap `venv` command.\n</code></pre>"},{"location":"commands/link/","title":"<code>slap link</code>","text":"<p>This command is venv aware.</p> <p>Symlink your project or all projects in a mono-repository into the current Python environment. This works for Poetry projects as well.</p> <p>Warning</p> <p>Independent from the Python build system you are using, Slap reuses Flit's symlinking feature to perform this action. This actually symbolically links your source code into the Python site-packages. Be aware that this can cause your code to be overwritten for example by Pip if you end up overwriting the symlinked installation of your package by installing another version of it into the same environment.</p> Synopsis <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  link [options]\n\nOptions:\n      --no-venv-check       Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv  Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV   Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n  -p, --python=PYTHON       The Python executable to install to.\n      --dump-pyproject      Dump the updated pyproject.toml and do not actually do the linking.\n  -h, --help                Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet               Do not output any message.\n  -V, --version             Display this application version.\n      --ansi                Force ANSI output.\n      --no-ansi             Disable ANSI output.\n  -n, --no-interaction      Do not ask any interactive question.\n  -v|vv|vvv, --verbose      Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n\n  Symlink your Python package with the help of Flit.\n\n  This command uses Flit [0] to symlink the Python package you are currently\n  working on into your Python environment's site-packages. This is particulary\n  useful if your project is using a PEP 517 [1] compatible build system that does\n  not support editable installs.\n\n  When you run this command, the pyproject.toml will be temporarily rewritten such\n  that Flit can understand it. The following ways to describe a Python project are\n  currently supported be the rewriter:\n\n  1. Poetry [2]\n\n    Supported configurations:\n      - version\n      - plugins (aka. \"entrypoints\")\n      - scripts\n\n  2. Flit [0]\n\n    Since the link command relies on Flit, no subset of configuration neeeds to be\n    explicitly supported.\n\n  Example usage:\n\n    $ slap link\n    Discovered modules in /projects/my_package/src: my_package\n    Extras to install for deps 'all': {'.none'}\n    Symlinking src/my_package -&gt; .venv/lib/python3.10/site-packages/my_package\n\n  Important notes:\n\n    This command will symlink your package into your Python environment; this is\n    much unlike a Pip editable install which instead points to your code via a\n    .pth file. If you install something into your environment that requires an\n    older version of the package you symlinked, Pip may write into those symlinked\n    files and effectively change your codebase, which could lead to potential loss\n    of changes.\n\n  [0]: https://flit.readthedocs.io/en/latest/\n  [1]: https://www.python.org/dev/peps/pep-0517/\n  [2]: https://python-poetry.org/\n</code></pre>"},{"location":"commands/publish/","title":"<code>slap publish</code>","text":"<p>This command builds an <code>sdist</code> and <code>wheel</code> distribution for your project or every project in your mono-repository and publishes it using Twine (the command has pretty much all the same options). Often you will use this command immediately after running <code>slap release</code> or from a CI job when new tag/release was created.</p> <p>If you just want to build your package(s) and not actually publish them, add the <code>-d,--dry</code> option. To be able to inspect the resulting distribution files and not loose them to the temporary directory, pass an explicit build directory using <code>-b,--build-directory</code>.</p> Synopsis <pre><code>Description:\n  A wrapper to publish the Python project to a repository such as PyPI.\n\nUsage:\n  publish [options]\n\nOptions:\n      --python=PYTHON                    use this Python executable to build the distribution but do not automatically install build requirements into it; if not specified a temporary build environment is created\n  -r, --repository=REPOSITORY             [default: \"pypi\"]\n      --repository-url=REPOSITORY-URL    \n  -s, --sign                             \n      --sign-with=SIGN-WITH              \n  -i, --identity=IDENTITY                \n  -u, --username=USERNAME                \n  -p, --password=PASSWORD                \n      --non-interactive                  \n  -c, --comment=COMMENT                  \n      --config-file=CONFIG-FILE           [default: \"~/.pypirc\"]\n      --skip-existing                    \n      --cert=CERT                        \n      --client-cert=CLIENT-CERT          \n      --disable-progress-bar             \n  -d, --dry                              \n  -b, --build-directory=BUILD-DIRECTORY  \n  -h, --help                             Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet                            Do not output any message.\n  -V, --version                          Display this application version.\n      --ansi                             Force ANSI output.\n      --no-ansi                          Disable ANSI output.\n  -n, --no-interaction                   Do not ask any interactive question.\n  -v|vv|vvv, --verbose                   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  A wrapper to publish the Python project to a repository such as PyPI.\n\n  Uses the PEP 517 build system defined in the pyproject.toml to build\n  packages and then uploads them with Twine. Note that it currently expects the build\n  backend to be installed already.\n\n  The command-line options are almost identical to the twine upload command.\n\n  Note: You can combine the `-d` and `-b` options to effectively perform a build, storing\n  the artifacts into the specified directory but not publishing them.\n</code></pre>"},{"location":"commands/release/","title":"<code>slap release</code>","text":"<p>This command updates the version numbers in your project(s).</p> Synopsis <pre><code>Description:\n  Create a new release of your Python package.\n\nUsage:\n  release [options] [--] [&lt;version&gt;]\n\nArguments:\n  version                  The target version number or rule to apply to the current version.\n\nOptions:\n  -t, --tag                Create a Git tag after the version numbers were updated.\n  -p, --push               Push the changes to the Git remote repository.\n  -r, --remote=REMOTE      The Git remote to push to (only when --push is specified).\n  -d, --dry                Do not commit changes to disk.\n  -f, --force              Force tag creation and push.\n      --validate           Instead of bumping the version, validate that all version references are consistent.\n                           If the version argument is specified, all version references must match it.\n      --no-branch-check    Do not validate the current Git branch matches the configured release branch.\n      --no-worktree-check  Do not check the worktree state.\n  -h, --help               Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet              Do not output any message.\n  -V, --version            Display this application version.\n      --ansi               Force ANSI output.\n      --no-ansi            Disable ANSI output.\n  -n, --no-interaction     Do not ask any interactive question.\n  -v|vv|vvv, --verbose     Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Create a new release of your Python package.\n\n  This command can perform the following operations in sequence (most of them need\n  to be enabled explicitly with flags):\n\n  1. Bump the version number in pyproject.toml and in other files\n  2. Add the changed files to Git, create a commit and a tag (--tag, -t)\n  3. Push the commit and tag to the remote repository (--push, -p)\n\n  In addition to the pyproject.toml, the command will automatically detect the file(s)\n  in your Python source code that contain a __version__ member and update it as well.\n  Additional files can be updated by configuring the [tool.slap.release.references]\n  option:\n\n    [tool.slap.release]\n    references = [\n      { file = \"../frontend/package.json\", pattern = \"  \\\"version\\\": \\\"{VERSION}\\\"\" }\n    ]\n\n  Furthermore, the --validate option can be used in CI to ensure that the version\n  numbers are consistent across the project. This is particularly useful when\n  automating publishing from CI builds.\n\n  Bumping the version number\n\n    Specifying an explicit version number or a version bump rule for the version\n    argument will update the version across all references that can be detected.\n    You can use --validate to show all files in which version numbers are found.\n\n    The supported rules are major, premajor, minor, preminor, patch, prepatch and\n    prerelease.\n\n    [Git]: The command will prevent you from bumping the version unless you are on\n    the branch configured under [tool.slap.release.branch] or \"develop\" by default.\n    If you want to skip that check, pass --no-branch-check.\n\n  Commit &amp; tag\n\n    [Git]: You can use the --tag, -t flag to automatically add the updated files,\n    create a new commit and tag the commit with the version number. The tag name\n    by default will just be the version number, but can be changed by setting the\n    [tool.slap.release.tag_format]. Similarly, the commit message used can be\n    configured with [tool.slap.release.commit_message].\n\n  Push to remote\n\n    [Git]: Using the --push, -p in combination with --tag, -t will push the new\n    commit and tag to the remote Git repository immediately. You can specify the\n    --remote, -r option to change the remote which will be pushed to (defaults\n    to \"origin\").\n</code></pre>"},{"location":"commands/release/#tool-comparison","title":"Tool comparison","text":"Feature <code>poetry bump</code> <code>slap release</code> Check for consistent version numbers across files in your repository \u274c \u2705 Update version number in <code>pyproject.toml</code> \u2705 \u2705 Update dependencies of another project within the same mono-repository (interdependencies) \u2705 Update <code>__version__</code> in source code \u274c \u2705 Update and rename Slap structure changelog files \u2705 Commit changes, create a tag and push to Git remote \u274c \u2705 Create GitHub releases \u274c \u274c (planned in #29) <p>Legend: \u2705 supported, \u274c not supported, (blank) conceptually irrelevant</p>"},{"location":"commands/release/#configuration","title":"Configuration","text":"<p>Option scope: <code>[tool.slap.release]</code> or <code>[release]</code></p> Option Type Default Description <code>branch</code> <code>str</code> <code>\"develop\"</code> The branch on which releases are created. Unless <code>--no-branch-check</code> is passed to <code>slap release</code>, the command will refuse to continue if the current branch name does not match this value. <code>commit-message</code> <code>str</code> <code>release {version}</code> The commit message to use when using the <code>--tag, -t</code> option. The string <code>{version}</code> will be replaced with the new version number. <code>tag-name</code> <code>str</code> <code>{version}</code> The tag name to use when using the <code>--tag, -t</code> option. The string <code>{version}</code> will be replaced with the new version number. <code>references</code> <code>list[VersionRefConfig]</code> <code>[]</code> A list of version references that should be considered in addition to the version references that are automatically detected by Slap when updating version numbers across the project with the <code>slap release</code> command. A <code>VersionRefConfig</code> contains the fields <code>file: str</code> and <code>pattern: str</code>. The <code>file</code> is considered relative to the project directory (which is the directory where the <code>slap.toml</code> or <code>pyproject.toml</code> configuration file resides). <code>ReleaseConfig</code>  ## Class ReleaseConfig  <pre><code>@dataclasses.dataclass\n\n@ExtraKeys(True)\nclass ReleaseConfig()\n</code></pre>  [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L36)    #### branch  The VCS branch on which releases are allowed. The release command will prevent you from creating a release while on a different branch (unless `--no-branch-check` is set).    #### commit\\_message  The template for the commit message when a release is created and the `--tag, -t` option is used.    #### tag\\_format  The template for the tag name when a release is created and the `--tag, -t` option is used.    #### references  A list of references to the version number that should be updated along with the version numbers that the release command knows about by default (like the `version` in `pyproject.toml` and the version number in the source code).    #### plugins  A list of `ReleasePlugins` to use. Defaults to contain the {@link pydoc:slap.ext.release.source_code_version.SourceCodeVersionReferencesPlugin} and {@link pydoc:slap.ext.release.changelog.ChangelogReleasePlugin}.     <code>VersionRefConfig</code>  ## Class VersionRefConfig  <pre><code>@dataclasses.dataclass\nclass VersionRefConfig()\n</code></pre>  [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L22)  Version reference.    #### file  The file in which the reference occurs.    #### pattern  A regex pattern that matches the version. Must not contain any captured groups except for one that represents the version number itself. The expression for that group can be writen as `{version}` instead (example: `version: \"{version}\"`)."},{"location":"commands/release/#usage-example","title":"Usage example","text":"<pre><code>$ slap release patch --tag --push\nbumping 2 version references:\n  pyproject.toml: 0.1.0 \u2192 0.1.1\n  src/my_package/__init__.py: 0.1.0 \u2192 0.1.1\n\nrelease staged changelog\n  .changelog/_unreleased.toml \u2192 .changelog/0.1.1.toml\n\ntagging 0.1.1\n\npushing develop, 0.1.1 to origin\n</code></pre>"},{"location":"commands/report/","title":"report","text":"<p>The <code>slap report</code> commands generate reports about your project.</p>"},{"location":"commands/report/#subcommands","title":"Subcommands","text":""},{"location":"commands/report/#slap-report-dependencies","title":"<code>slap report dependencies</code>","text":"<p>This command is venv aware.</p> <p>Generates a JSON report on the dependencies of your project based on the packages installed in your environment. Usually, the most interesting piece is the license information of every dependency, which is contained in the JSON report. The license name (and text if <code>--with-license-text</code> is specified) is read from the package distribution metadata.</p> <p>The command will only resolve only runtime dependencies by default. You can specify additional extras to include in the resolution using the <code>--extras</code> option.</p> Synopsis <code>report dependencies</code> <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  report dependencies [options]\n\nOptions:\n      --no-venv-check       Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv  Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV   Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n      --extras=EXTRAS       A comma-separated list of extra dependencies to include.\n      --with-license-text   Include license text in the output.\n  -h, --help                Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet               Do not output any message.\n  -V, --version             Display this application version.\n      --ansi                Force ANSI output.\n      --no-ansi             Disable ANSI output.\n  -n, --no-interaction      Do not ask any interactive question.\n  -v|vv|vvv, --verbose      Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n  command is executed, it will check if we're currently in a virtual environment. If not, it will activate\n  the environment that is considered \"active\" by the Slap `venv` command.\n</code></pre> Dependencies report for Slap <pre><code>    $ cd .. &amp;&amp; slap report dependencies  # exited with return code 1\n(venv-aware) a virtual environment is already activated (/home/runner/work/slap/slap/.venvs/runtime)\n\u001b[90mYour project is currently using `[tool.poetry.groups]`, but should be using `[tool.poetry.group]`\u001b[0m\n\u001b[90mThe `groups` variant is only supported by Slap and will break in newer versions of the Poetry backend.\u001b[0m\n\u001b[90mPoetry actually only supports the `[tool.poetry.group]` key.\u001b[0m\n\nResolving requirements graph: 0it [00:00, ?it/s]\nResolving requirements graph: 17it [00:00, 102.05it/s]\nResolving requirements graph: 17it [00:00, 100.96it/s]\n\nCould not parse version constraint: (&gt;=0.4.1\n</code></pre>"},{"location":"commands/run/","title":"<code>slap run</code>","text":"<p>This command is venv aware.</p> <p>Runs a command, using the commands configured under the <code>[tool.slap.run]</code> section as a source for aliases.</p> <p>If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the command is run.</p> Synopsis <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  run [options] [--] &lt;args&gt;...\n\nArguments:\n  args                      Command name and arguments.\n\nOptions:\n      --no-venv-check       Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv  Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV   Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n  -h, --help                Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet               Do not output any message.\n  -V, --version             Display this application version.\n      --ansi                Force ANSI output.\n      --no-ansi             Disable ANSI output.\n  -n, --no-interaction      Do not ask any interactive question.\n  -v|vv|vvv, --verbose      Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n  command is executed, it will check if we're currently in a virtual environment. If not, it will activate\n  the environment that is considered \"active\" by the Slap `venv` command.\n</code></pre>"},{"location":"commands/run/#configuration","title":"Configuration","text":"<p>Option scope: <code>[tool.slap.run]</code> or <code>[run]</code></p> Option Type Default Description <code>&lt;name&gt;</code> <code>str</code> n/a A command as a string to run with the system shell. <p>Example configuration</p> pyproject.tomlslap.toml <pre><code>[tool.slap.run]\n\"docs:build\" = \"cd docs &amp;&amp; novella --base-url slap/\"\n\"docs:dev\" = \"cd docs &amp;&amp; novella --serve\"\n</code></pre> <pre><code>[run]\n\"docs:build\" = \"cd docs &amp;&amp; novella --base-url slap/\"\n\"docs:dev\" = \"cd docs &amp;&amp; novella --serve\"\n</code></pre> <pre><code>$ slap run docs:dev\n...\n</code></pre>"},{"location":"commands/test/","title":"<code>slap test</code>","text":"<p>This command is venv aware.</p> <p>Runs some or all of the tests from the Slap configuration. This is different from <code>slap run</code> in that by default it runs multiple commands, prefixes the output them with the test name (similar to <code>docker-compose logs</code>), works across multiple projects in a mono-repository and prints a summary of the results at the end.</p> <p>If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the test commands are run.</p> Synopsis <pre><code>Description:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n\nUsage:\n  test [options] [--] [&lt;test&gt;...]\n\nArguments:\n  test                      One or more tests to run (runs all if none are specified)\n\nOptions:\n      --no-venv-check       Do not check if the target Python environment is a virtual environment.\n      --ignore-active-venv  Ignore the currently active VIRTUAL_ENV and act as if it isn't set.\n      --use-venv=USE-VENV   Use the specified Slap-managed virtual environment. This can be used to run a command in a seperate environment without activating or setting it as the current environment. Note that this option can not be used to run in a globally managed environment.\n  -s, --no-line-prefix      Do not prefix output from the test commands with the test name (default if a single argument for test is specified).\n  -l, --list                List all available tests\n  -x, --exclude=EXCLUDE     Do not run the specified test. Can be passed multiple times. (multiple values allowed)\n  -h, --help                Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet               Do not output any message.\n  -V, --version             Display this application version.\n      --ansi                Force ANSI output.\n      --no-ansi             Disable ANSI output.\n  -n, --no-interaction      Do not ask any interactive question.\n  -v|vv|vvv, --verbose      Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Base class for commands that should be aware of the active local virtual environment. Before the\n  command is executed, it will check if we're currently in a virtual environment. If not, it will activate\n  the environment that is considered \"active\" by the Slap `venv` command.\n</code></pre>"},{"location":"commands/test/#configuration","title":"Configuration","text":"<p>Option scope: <code>[tool.slap.run]</code> or <code>[run]</code></p> Option Type Default Description <code>&lt;name&gt;</code> <code>str</code> n/a A command as a string to run with the system shell. An example configuration pyproject.toml<pre><code>[tool.slap.test]\ncheck = \"slap check\"\nmypy = \"mypy src/\"\npytest = \"pytest test/\"\n</code></pre> Example from the databind project  Databind is a mono-repository of three Python projects, two of which have tests set up. Running `slap test` in the project root folder runs all tests of all projects.  <pre><code>$ slap test\ndatabind.core:mypy| Success: no issues found in 8 source files\ndatabind.core:pytest| ================== test session starts ==================\ndatabind.core:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0\ndatabind.core:pytest| rootdir: /home/niklas/git/databind/databind.core\ncollected 17 items\ndatabind.core:pytest|\ndatabind.core:pytest| test/test_context.py .                            [  5%]\ndatabind.core:pytest| test/test_schema.py ................              [100%]\ndatabind.core:pytest|\ndatabind.core:pytest| ================== 17 passed in 0.05s ===================\ndatabind.json:mypy| Success: no issues found in 5 source files\ndatabind.json:pytest| ================== test session starts ==================\ndatabind.json:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0\ndatabind.json:pytest| rootdir: /home/niklas/git/databind/databind.json\ncollected 32 items\ndatabind.json:pytest|\ndatabind.json:pytest| test/test_converters.py ......................... [ 78%]\ndatabind.json:pytest| .......                                           [100%]\ndatabind.json:pytest|\ndatabind.json:pytest| ================== 32 passed in 0.11s ===================\n\ntest summary:\n  \u2022 databind.core:mypy (exit code: 0)\n  \u2022 databind.core:pytest (exit code: 0)\n  \u2022 databind.json:mypy (exit code: 0)\n  \u2022 databind.json:pytest (exit code: 0)\n</code></pre>"},{"location":"commands/test/#test-selection","title":"Test selection","text":"<ul> <li>If no <code>test</code> positional argument is specified, all tests in the project or projects of the repository will be run. (<code>$ slap test</code>)</li> <li>To run the tests of only one project while in a mono-repository folder, pass the project name as the <code>test</code> argument. (<code>$ slap test databind.core</code>)</li> <li>To run tests of the same name across all projects, pass the test name prefixed with a colon as the <code>test</code> argument. (<code>$ slap test :mypy</code>)</li> <li>To run only one particular test from a given project, pass the project name and test name separated by a colon as the   <code>test</code> argument. (<code>$ slap test databind.core:mypy</code>)</li> </ul>"},{"location":"commands/venv/","title":"<code>slap venv</code>","text":"<p>The <code>slap venv</code> command is a utility for managing virtual environments created using the standard library <code>venv</code> module in the current directory or globally (in <code>~/.local/venvs</code>).</p> <p>Slap keeps track of an \"active\" environment that is used activated by default by commands such as <code>slap install</code>, <code>slap link</code>, <code>slap run</code> and <code>slap test</code> before they perform their regular duties. This allows you to not have to actually activate a virtual environment while still operating within it while using Slap commands (similar to <code>poetry run</code>, etc.).</p> Synopsis <code>venv</code> <pre><code>Description:\n  Create, activate and remove virtual environments.\n\nUsage:\n  venv [options] [--] [&lt;name&gt;]\n\nArguments:\n  name                       The environment name.\n\nOptions:\n  -g, --global               Manage virtual environments in the global scope instead of the local directory.\n  -a, --activate             Activate the environment given by the environment name. Note that using this option if used directly with the Slap CLI will cause an error because it needs to be shadowed by a function of your shell.\n  -c, --create               Create the environment with the given environment name. If no name is specified, the environment name will be the major.minor version of the current Python version.\n  -d, --delete               Delete the environment with the given environment name.\n  -s, --set                  Similar to -a,--activate, but it will not activate the environment in your active shell even if you have the Slap shim installed (see -i,--init-code).\n  -l, --list                 List the available environments.\n  -p, --path                 Print the path of the specified or the current venv. Exit with status code 1 and no output if the environment does not exist or there is no current environment.\n  -e, --exists               Return 0 if the specified environment exists, 1 otherwise.\n  -i, --init-code=INIT-CODE  Print the code snippet that can be placed in your shells init scripts to shadow this command in order to properly make use of the -a,--activate option. Currently supported shells are: bash, zsh\n      --python=PYTHON        The Python executable to use to create the virtual environment. If this is not specified, it defaults to python + the environment name if the environment name looks like a version number (contains numbers and dots). Otehrwise, it defaults to python3.\n  -h, --help                 Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet                Do not output any message.\n  -V, --version              Display this application version.\n      --ansi                 Force ANSI output.\n      --no-ansi              Disable ANSI output.\n  -n, --no-interaction       Do not ask any interactive question.\n  -v|vv|vvv, --verbose       Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n\nHelp:\n  Create, activate and remove virtual environments.\n\n  This command makes it easy to create and manage virtual environments, locally as well\n  as globally. Local environments are stored in the `.venvs/` directory in the current\n  directory. Global environments are stored in `~/.local/venvs`.\n\n  In order to be able to use the -a,--activate option directly from this command,\n  it must be shadowed by a function in your shell. Use the -i,--init-code command\n  to get a code snippet that you can place in your shell's init scripts.\n\n  Usage Example:\n\n      $ slap venv -i bash &gt;&gt; ~/.profile; source ~/.profile  # for bash\n      $ slap venv -i zsh &gt;&gt; ~/.zshrc; source ~/.zshrc       # for zsh\n      $ slap venv -cg craftr\n      creating global environment \"craftr\" (using python3)\n      $ slap venv -lg\n      1 environment in \"/home/niklas/.local/venvs\"\n      \u2022 craftr   3.10.2 (main, Jan 15 2022, 18:02:07) [GCC 9.3.0]\n      $ slap venv -ag craftr\n      (craftr) $ \n\n  Note that most Slap commands support using the active virtual environment it\n  to be active in your shell (such as `slap run`, `slap test`, `slap install`,\n  etc.).\n</code></pre> Synopsis <code>venv link</code> <pre><code>Description:\n  Link executables from a global virtual environment.\n\nUsage:\n  venv link [options] [--] &lt;name&gt; &lt;program&gt;\n\nArguments:\n  name                  The global environment name.\n  program               The name of the program to link.\n\nOptions:\n  -g, --global          Manage virtual environments in the global scope instead of the local directory.\n  -f, --force           Overwrite the link target if it already exists.\n  -h, --help            Display help for the given command. When no command is given display help for the help command.\n  -q, --quiet           Do not output any message.\n  -V, --version         Display this application version.\n      --ansi            Force ANSI output.\n      --no-ansi         Disable ANSI output.\n  -n, --no-interaction  Do not ask any interactive question.\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\n</code></pre>"},{"location":"commands/venv/#configuration","title":"Configuration","text":"<p>The <code>venv</code> command does not have any Slap configuration options. However, in order to use the <code>slap venv --activate</code> option properly, you need to configure your shell to shadow the <code>slap</code> command with a function such that it can source the activate script.</p> <p>To do this, run <code>$ slap venv -i &lt;shell&gt;</code> and add the output to your shell init scripts. Currently, the <code>-i</code> option only supports <code>bash</code> as an argument.</p> $ slap venv -i bash<pre><code>which slap &gt;/dev/null &amp;&amp; eval \"$(SLAP_SHADOW=true slap venv -i bash)\"\n</code></pre> <p>What will be evaluated in your init script then implements the shadow function:</p> $ SLAP_SHADOW=true slap venv -i bash<pre><code>function slap() {\nlocal ORIGINAL=$(which slap)\nif [[ $? != 0 ]]; then\n&gt;&amp;2 echo \"error: command 'slap' does not exist\"\nreturn 127\nfi\nif [[ \"$1\" == \"venv\" &amp;&amp; \"$2\" =~ -[gc]*a[gc]* ]]; then\neval \"$(SLAP_SHADOW=true \"$ORIGINAL\" \"$@\")\"\nelse\n\"$ORIGINAL\" \"$@\"\nfi\nreturn $?\n}\n</code></pre> <p>Now you can enjoy using <code>slap venv -a [-g] [&lt;env&gt;]</code> to activate a virtual environment.</p>"},{"location":"commands/venv/#activate-behaviour","title":"Activate behaviour","text":"<p>Using <code>-a,--activate</code> without arguments will pick the most recently activated environment in the current context, or if that is not available, the one and only virtual environment. If multiple environments exist in that case, it is an error.</p>"},{"location":"guides/github/","title":"Using Slap in GitHub repositories","text":"<p>Most of Slap's functionality is independent of the repository hosting service that you use. However, Slap comes with some built-in utities to make integration with GitHub easier.</p>"},{"location":"guides/github/#github-actions","title":"GitHub Actions","text":""},{"location":"guides/github/#install-slap","title":"Install Slap","text":"<p>The <code>NiklasRosenstein/slap@gha/install/v1</code> action installs Slap for you. It does this by setting up Python 3.10 and installing Slap via Pipx.</p> <p>Note</p> <p>Use this action before you run your own step of <code>actions/setup-python@v2</code> as after this action the current Python version will be 3.10.</p> <p>The <code>version</code> option defaults to <code>*</code>, which installs the latest version of Slap. It is recommended that you pick an exact version for your configuration to avoid surprises.</p> .github/workflows/python.yml<pre><code>jobs:\ntest:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: NiklasRosenstein/slap@gha/install/v1\nwith: { version: '*' }\n- uses: actions/setup-python@v2\nwith: { python-version: \"3.x\" }\n- run: slap install --no-venv-check\n- run: slap test\n</code></pre>"},{"location":"guides/github/#update-changelogs","title":"Update Changelogs","text":"<p>The <code>slap changelog diff pr update</code> command updates the PR references of changelogs added between two Git revisions. In addition, by passing <code>--use github-actions</code>, there is almost no need for any additional configuration inside of a GitHub action run for a Pull Request event. The <code>NiklasRosenstein/slap@gha/changelog/update/v2</code> action makes automatically updated changelogs a breeze:</p> .github/workflows/python.yml<pre><code>on: [ pull_request ]\njobs:\nchangelog-update:\nname: \"Insert the Pull Request URL into new changelog entries\"\nruns-on: ubuntu-latest\nif: github.event_name == 'pull_request'\nsteps:\n- uses: actions/checkout@v2\n- uses: NiklasRosenstein/slap@gha/changelog/update/v2\nwith: { version: '*' }\n</code></pre>"},{"location":"guides/github/#assert-changelogs","title":"Assert Changelogs","text":"<p>The <code>slap changelog diff assert-added</code> command is similar to the <code>slap changelog diff pr update</code> command in that it inspects the diff of changelogs between to Git versions, but it fails if no new changelog entry was added to the unreleased changelog.</p> <p>We recommend that you use the GitHub Action <code>NiklasRosenstein/slap@gha/changelog/assert-added/v2</code>.</p> .github/workflows/python.yml<pre><code>on: [ pull_request ]\njobs:\nassert-new-changelog-entries:\nname: \"Assert that new changelog entries have been added\"\nruns-on: ubuntu-latest\nif: github.base_ref != '' &amp;&amp; !contains(github.event.pull_request.labels.*.name, 'no changelog')\nsteps:\n- uses: actions/checkout@v2\n- uses: NiklasRosenstein/slap@gha/changelog/assert-added/v2\nwith: { version: '*' }\n</code></pre>"}]}