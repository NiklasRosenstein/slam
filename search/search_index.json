{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Slap documentation! Slap is a command-line tool to simplify command workflows in the development of Python projects independent of the PEP 517 build backend being used, capable of managing single- and multi-project repositories. Installation I recommend installing Slap using Pipx. (Requires Python 3.10 or higher) $ pipx install slap-cli Note : Currently Slap relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). If you use Slap in GitHub Actions, try one of the actions provided by Slap directly: NiklasRosenstein/slap@gha/install/v1 NiklasRosenstein/slap@gha/changelog/update/v1 Documentation You can find the documentation for Slap here: https://niklasrosenstein.github.io/slap/ Check out the Getting started guide. Feature Matrix Feature Poetry Documentation Manage structured changelog entries \u274c slap changelog Show project details \u274c slap info Build and publish to PyPI using Twine \u2705 (single project only) slap publish Create a new release (bump version numbersr) \u274c (sub-par support) slap release Run a command configured in pyproject.toml \u274c slap run Run tests configured in pyproject.toml \u274c slap test Manage Python virtualenv's \u2705 (but out-of-worktree) slap venv Generate a dependencies report \u274c slap report dependencies Feature / Build backend Flit Poetry Setuptools Documentation Add dependency \u2705 \u2705 \u274c slap add Sanity check project configuration \u2705 slap check Bootstrap project files \u2705 slap init Install projects using Pip \u2705 \u2705 \u2705 slap install Symlink projects (editable installs) \u2705 \u2705 1 \u2705 slap link Bump interdependencies in mono-repository \u2705 (not tested regularly) \u2705 \u2705 (partial) slap release Legend : \u2705 explicitly supported, \u274c explicitly not supported, (blank) not relevant or currently not supported 1 Poetry supports the configuration of multiple packages per project, but Slap currently does not support linking more than one package. This does not impact the ability to symlink all projects in a mono-repository, which functions as expected. Issues / Suggestions / Contributions Slap is currently very opinionated by the fact that I built it as my personal workflow tool, but I welcome suggestions and contributions, and I am hopeful it will be useful to a wider audience than myself. Please report any issues you encounter via GitHub Issues . Feel free to use the GitHub Discussions forum to ask questions or make suggestions on new features (e.g. if you would like a new build backend to be supported?). Lastly, feel free to submit pull requests to the GitHub Repository . FAQ Why \"Slap\"? Finding a good, catchy name that also types easily in the terminal and is not already widely used isn't easy, ok? What makes this different to the Poetry CLI? Some people might find this similar to tools like Poetry, and while there is some overlap in functionality, Slap is not a build backend and is more targeted towards library development. In fact, most of my projects use Poetry as the build backend but I never even once interact with the Poetry CLI throughout the lifetime of the project. The most notable differences to Poetry are Supports mono-repositories (i.e. multiple related Python projects in the same repository), to the extent that it bumps version numbers of project inter-dependencies and installs your projects in topological order Supports development installs independent of the build backend (yes; this means you can install Poetry packages in editable mode even though the Poetry backend right now does not support editable installs) Slap's version bump command ( slap release ) updates the version not just in your pyproject.toml but also the __version__ in your source code as well as in related projects (see mono-repositories above) and any additional references you can configure via Regex patterns Does not automagically create a virtual environment for you when instal your project(s); instead, it errors when you try to install into a non-virtual Python environment and gives you an easy-to-use tool to create and activate virtual environments (and allowing multiple environments per project as well as global environments) Uses Pip to install your project(s), unlike Poetry which comes with its own dependency resolver and package installer (which I personally have been having a lot of issues with in the past). Does not have a concept of lock files","title":"Home"},{"location":"#welcome-to-the-slap-documentation","text":"Slap is a command-line tool to simplify command workflows in the development of Python projects independent of the PEP 517 build backend being used, capable of managing single- and multi-project repositories.","title":"Welcome to the Slap documentation!"},{"location":"#installation","text":"I recommend installing Slap using Pipx. (Requires Python 3.10 or higher) $ pipx install slap-cli Note : Currently Slap relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). If you use Slap in GitHub Actions, try one of the actions provided by Slap directly: NiklasRosenstein/slap@gha/install/v1 NiklasRosenstein/slap@gha/changelog/update/v1","title":"Installation"},{"location":"#documentation","text":"You can find the documentation for Slap here: https://niklasrosenstein.github.io/slap/ Check out the Getting started guide.","title":"Documentation"},{"location":"#feature-matrix","text":"Feature Poetry Documentation Manage structured changelog entries \u274c slap changelog Show project details \u274c slap info Build and publish to PyPI using Twine \u2705 (single project only) slap publish Create a new release (bump version numbersr) \u274c (sub-par support) slap release Run a command configured in pyproject.toml \u274c slap run Run tests configured in pyproject.toml \u274c slap test Manage Python virtualenv's \u2705 (but out-of-worktree) slap venv Generate a dependencies report \u274c slap report dependencies Feature / Build backend Flit Poetry Setuptools Documentation Add dependency \u2705 \u2705 \u274c slap add Sanity check project configuration \u2705 slap check Bootstrap project files \u2705 slap init Install projects using Pip \u2705 \u2705 \u2705 slap install Symlink projects (editable installs) \u2705 \u2705 1 \u2705 slap link Bump interdependencies in mono-repository \u2705 (not tested regularly) \u2705 \u2705 (partial) slap release Legend : \u2705 explicitly supported, \u274c explicitly not supported, (blank) not relevant or currently not supported 1 Poetry supports the configuration of multiple packages per project, but Slap currently does not support linking more than one package. This does not impact the ability to symlink all projects in a mono-repository, which functions as expected.","title":"Feature Matrix"},{"location":"#issues-suggestions-contributions","text":"Slap is currently very opinionated by the fact that I built it as my personal workflow tool, but I welcome suggestions and contributions, and I am hopeful it will be useful to a wider audience than myself. Please report any issues you encounter via GitHub Issues . Feel free to use the GitHub Discussions forum to ask questions or make suggestions on new features (e.g. if you would like a new build backend to be supported?). Lastly, feel free to submit pull requests to the GitHub Repository .","title":"Issues / Suggestions / Contributions"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#why-slap","text":"Finding a good, catchy name that also types easily in the terminal and is not already widely used isn't easy, ok?","title":"Why \"Slap\"?"},{"location":"#what-makes-this-different-to-the-poetry-cli","text":"Some people might find this similar to tools like Poetry, and while there is some overlap in functionality, Slap is not a build backend and is more targeted towards library development. In fact, most of my projects use Poetry as the build backend but I never even once interact with the Poetry CLI throughout the lifetime of the project. The most notable differences to Poetry are Supports mono-repositories (i.e. multiple related Python projects in the same repository), to the extent that it bumps version numbers of project inter-dependencies and installs your projects in topological order Supports development installs independent of the build backend (yes; this means you can install Poetry packages in editable mode even though the Poetry backend right now does not support editable installs) Slap's version bump command ( slap release ) updates the version not just in your pyproject.toml but also the __version__ in your source code as well as in related projects (see mono-repositories above) and any additional references you can configure via Regex patterns Does not automagically create a virtual environment for you when instal your project(s); instead, it errors when you try to install into a non-virtual Python environment and gives you an easy-to-use tool to create and activate virtual environments (and allowing multiple environments per project as well as global environments) Uses Pip to install your project(s), unlike Poetry which comes with its own dependency resolver and package installer (which I personally have been having a lot of issues with in the past). Does not have a concept of lock files","title":"What makes this different to the Poetry CLI?"},{"location":"changelog/","text":"Changelog 1.6.3 (2022-04-18) Type Description PR Issues Author Fix Fix venv aware commands to add the absolute path to the `PATH` environment variable instead of a relative path @NiklasRosenstein 1.6.2 (2022-04-18) Type Description PR Issues Author Improvement Add `PythonEnvironment.version_tuple` @NiklasRosenstein Improvement The `slap venv` command now automatically picks an environment name if you do not specify one with the `-c,--create` flag @NiklasRosenstein Improvement Changed `slap install` to no longer install all extras defined in the project by default, now you need to explicitly specify them in `[tool.slap.install].dev-extras` @NiklasRosenstein 1.6.1 (2022-04-16) Type Description PR Issues Author Fix Fix `slap link` to produce absolute paths in the shebang for generated scripts by supplying an absolute path to the Python interpreter to the Flit installer @NiklasRosenstein 1.6.0 (2022-04-16) Type Description PR Issues Author Feature add `-p,--path` option to `slap venv` command, note that `-p` was repurposed from `--python` and the option no longer has a short form @NiklasRosenstein Improvement `slap test` and `slap run` commands now activate the active virtual environment if any before running the commands @NiklasRosenstein Feature Add `-s,--set` option to `slap venv` @NiklasRosenstein Improvement The `slap run` command can now run arbitrary commands, but falls back to the ones aliased on the configuration on a match. @NiklasRosenstein Improvement Add `VenvAwareCommand` and use it in `add`, `install`, `link`, `report`, `run` and `test` @NiklasRosenstein Improvement Add `location` to `DistributionMetadata`, which propagates into the output of `slap report dependencies` @NiklasRosenstein 1.5.4 (2022-04-14) Type Description PR Issues Author Fix Fix issue with \"cannot install into global environment\" even if a Slap venv is active @NiklasRosenstein 1.5.3 (2022-04-14) Type Description PR Issues Author Fix Fixed forwarding `--python` argument to `slap link` command when using `slap install --link` @NiklasRosenstein Improvement For all Slap commands that operate on a Python environment (`install`, `link`, `add`), they will now look for the environment to target in the following order: 1) the `-p,--python` option, 2) the `PYTHON` environment variable, 3) the last local activated environment with `slap venv`, 4) just use `python` 58 @NiklasRosenstein 1.5.2 (2022-04-13) Type Description PR Issues Author Fix fix in pep508 @NiklasRosenstein 1.5.1 (2022-04-13) Type Description PR Issues Author Fix `slap.python.pep508` no longer requires `dataclasses` @NiklasRosenstein 1.5.0 (2022-04-13) Type Description PR Issues Author Fix fix pep508 invokation when installing into Pytho 3.6 environments @NiklasRosenstein 1.4.5 (2022-04-04) Type Description PR Issues Author Fix Fix `slap venv link` linking to an absolute path (correct) instead of a relartive path (wrong) when linking from a local environment @NiklasRosenstein Improvement No longer error when running Slap in a Python project directory using Poetry where some dependencies are declared using the table format in TOML, but log that the type of dependency is currently unsupported @NiklasRosenstein Improvement Allow unrecognized keys in `ChangelogConfig` @NiklasRosenstein Improvement Add a separate API to retrieve the projects in a repository in topological order such that most Slap commands that do not care about the order do not have the overhead of inspecting the project dependencies and sorting the projects. NiklasRosenstein/slam#50 @NiklasRosenstein Feature Add `slap.dependency` module @NiklasRosenstein Feature Add `slap report dependencies` command @NiklasRosenstein Fix Fix detection of added changelog entries in GitHub Actions for forked repositories; but that does not fix #49 @NiklasRosenstein Fix Fix a potential issue in `slap add` when `tomlkit` returns an `OutOfOrderTableProxy` instead of a `Table` container in which case we did not mutate the actual TOML document @NiklasRosenstein Feature Add `--source` option to `slap add` command @NiklasRosenstein 1.4.4 (2022-04-04) Type Description PR Issues Author Improvement add `-g,--global` option to `slap venv link` command @NiklasRosenstein Improvement read Git `user.name` and `user.email` from local repository first and then globally @NiklasRosenstein 1.4.3 (2022-04-03) Type Description PR Issues Author Fix Add missing `tomlkit` dependency (needed by the `slap add` command) @NiklasRosenstein 1.4.2 (2022-03-31) Type Description PR Issues Author Fix adjust for breaking changes in databind 2.0.0 (no more databind.json.settings module) @NiklasRosenstein 1.4.1 (2022-03-31) Type Description PR Issues Author Improvement Enhance docs and output of `slap venv` command @NiklasRosenstein Improvement The `slap venv` command can now be used with `-a,--activate` and without a `name` argument to activate the previously activated environment or the only one that is available in the context (local vs. global). @NiklasRosenstein Improvement Improve `ChangelogReleasePlugin` to write \"releasing changelog\" line only once @NiklasRosenstein Improvement Improve changelog checks plugin to catch more types of errors to return in the check details @NiklasRosenstein Improvement improve output produces by `slap venv -a`, `slap publish` and `slap release` @NiklasRosenstein 1.4.0 (2022-03-29) Type Description PR Issues Author Feature Add `ProjectHandler.add_dependency()` and `Project.add_dependency() @NiklasRosenstein Feature Add `slap add` command @NiklasRosenstein 1.3.6 (2022-03-27) Type Description PR Issues Author Fix Fix `NameError` in non-monorepository scenario when using `slap install` @NiklasRosenstein 1.3.5 (2022-03-24) Type Description PR Issues Author Fix Fix `slap release` to consider the monorepository config as well @NiklasRosenstein 1.3.4 (2022-03-24) Type Description PR Issues Author Improvement `slam install` without `--no-dev` now installs _all_ extras for a project unless the new `[install.dev-extras]` option is set @NiklasRosenstein 1.3.3 (2022-03-24) Type Description PR Issues Author Fix Fix how `[install.extras]` is taken into account (used to always take all extras) @NiklasRosenstein 1.3.2 (2022-03-24) Type Description PR Issues Author Feature support `[install.extras]` option in the monorepository and project config @NiklasRosenstein 1.3.1 (2022-03-24) Type Description PR Issues Author Feature add `github` template to `slap init` @NiklasRosenstein Fix `slap run` now uses the reopsitory `slap.toml` configuration file to read the run configuration if no main project exists; `Application.main_project()` no longer tries to find the \"closest\" project because right now Slap does not actually try to find a \"better\" project root than the current working directory @NiklasRosenstein 1.3.0 (2022-03-23) Type Description PR Issues Author Improvement upgrade to using `databind` 2.x @NiklasRosenstein Breaking change Rename Slam to Slap @NiklasRosenstein Improvement Split default project handler into separate implementations for Poetry, Flit and Setuptools and properly support Setuptools now (reading `setup.cfg`) @NiklasRosenstein Feature add `-b,--build-directory` option to `slap publish` command @NiklasRosenstein Feature add `slap.check.check()` decorator and `slap.check.get_checks()` function to make implementing check plugins more convenient @NiklasRosenstein Improvement add `Project.version()` and `Project.get_version_refs()` @NiklasRosenstein Improvement move interdependencies version ref detection into `DefaultProjectHandler` @NiklasRosenstein Improvement add overload for `match_version_ref_pattern()` that can return a fallback value @NiklasRosenstein 1.2.4 (2022-03-22) Type Description PR Issues Author Improvement The default repository handler now only matches if it appears to make sense to use the Slam CLI inside it. @NiklasRosenstein Feature add `slam venv` and `slam venv link` commands @NiklasRosenstein Fix `slam init` now identifies the author to use in the template from Git's global config if the current directory is not already a Git repository @NiklasRosenstein 1.2.3 (2022-03-20) Type Description PR Issues Author Fix Fix `slam install` command accessing the wrong option name for `--no-venv-check` causing an error when `--link` was used @NiklasRosenstein 1.2.2 (2022-03-20) Type Description PR Issues Author Improvement `test` command no info-logs the command being run @NiklasRosenstein Feature add `slam test -l,--list` option @NiklasRosenstein Improvement `slam init -t poetry` now creates a test file @NiklasRosenstein Fix Fix `slam init` to create a `test/test_import.py` instead of `test/test.py` @NiklasRosenstein Fix Fix `slam install` command to forward to the `--no-venv-check` option to the `slam link` command @NiklasRosenstein Fix Fix `slam changelog convert` to use the proper default author @NiklasRosenstein 1.2.1 (2022-03-14) Type Description PR Issues Author Feature add `slam changelog ` argument, defaults to the same as `--name` @NiklasRosenstein Improvement `slam init` now understands dots as namespace packages @NiklasRosenstein Improvement `slam init` package name written into `pyproject.toml` keeps dots @NiklasRosenstein Feature add `slam run` command @NiklasRosenstein Improvement added `-vv` flag to Pytest command rendered in `pyproject.toml` by `slam init -t poetry` @NiklasRosenstein 1.2.0 (2022-03-03) Type Description PR Issues Author Refactor add `Repository` and `RepositoryHandlerPlugin` which gets to decide which projects are loaded, remove most of the related members from the `Application` class @NiklasRosenstein Improvement morph `VcsHost` into `RepositoryHost` class NiklasRosenstein Fix fix possible `AssertionError` in `Application._get_main_project()` that can occur if Slam is invoked in a directory that does not contain a `pyproject.toml` nor `slam.toml` file. @NiklasRosenstein Improvement `slam changelog format` in the Terminal now colorizes inline code (indicated by backticks) @NiklasRosenstein Improvement All application plugins are now loaded by default (no explicit list of plugins to load), but the `tool.slam.application.disable` config persists to disable the activation of a particular set of plugins @NiklasRosenstein Feature add `slam init` command @NiklasRosenstein 1.1.2 (2022-03-02) Type Description PR Issues Author Fix `git+https://...` requirements are now understood and no longer converted into a dependency caled just \"git\" @NiklasRosenstein 1.1.1 (2022-02-26) Type Description PR Issues Author Fix support old `break` change type and convert it to `breaking change` @NiklasRosenstein Feature add `slam publish --dry,-d` option @NiklasRosenstein 1.1.0 (2022-02-26) Type Description PR Issues Author Improvement add `Project.application` member @NiklasRosenstein Feature add release plugin to automatically bump interdependencies between projects in a monorepository (can be disabled by setting `tool.slam.release.interdependencies = false`) @NiklasRosenstein 1.0.10 (2022-02-25) Type Description PR Issues Author Fix `slam install` now skips projects that dont expose Python packages @NiklasRosenstein 1.0.9 (2022-02-25) Type Description PR Issues Author Fix fix consistent sorting of packages ordered topologically by interdependencies @NiklasRosenstein Feature recognize `tool.poetry.packages` option in `DefaultProjectHandler.get_packages()` @NiklasRosenstein 1.0.8 (2022-02-25) Type Description PR Issues Author Fix `slam changelog convert-pr` command now provides YAML error details if the file cannot be parsed and allows the `release_date` to not be set (to convert `_unreleased.yml`) @NiklasRosenstein Fix `Project.get_packages()` no longer delegates to the `ProjectHandler` if the project is not a Python project (does not have a `pyproject.toml`) to avoid weird namespace packages to be detected unintentionally @NiklasRosenstein 1.0.7 (2022-02-23) Type Description PR Issues Author Fix `slam test` now only runs subproject tests instead of all tests in a monorepo if the main project (the one from the cwd) is not the same as the root project @NiklasRosenstein Fix `slam changelog update-pr` always counted 0 entries to update and thus never committed the changes @NiklasRosenstein 1.0.6 (2022-02-23) Type Description PR Issues Author Improvement `slam changelog update-pr` no longer overwrites existing PR references in entries unless the new `--overwrite` option is passed @NiklasRosenstein 1.0.5 (2022-02-23) Type Description PR Issues Author Feature add `ChangelogManager.readonly` which prevents you from saving a changelog to disk @NiklasRosenstein Feature add `[tool.shut.changelog].enabled` option which can be used to turn off the ability to add changelogs to the current project via the CLI @NiklasRosenstein 1.0.4 (2022-02-23) Type Description PR Issues Author Improvement hide output from `git checkout -b` in `github-actions` plugin @NiklasRosenstein Fix fix shortform detection for GitHub pull request URLs @NiklasRosenstein 1.0.3 (2022-02-23) Type Description PR Issues Author Improvement use more concrete branch name for checkout in `github-actions` plugin to work around issues if the branch name is the same as a top level folder in the repository @NiklasRosenstein Fix fix `github-actions` tendency to swallow command output which could have been of use in case of an error @NiklasRosenstein 1.0.2 (2022-02-23) Type Description PR Issues Author Improvement parse semver in `[tool.poetry.extras]` @NiklasRosenstein Feature add `--extras` and `--only-extras` options to `slam install` @NiklasRosenstein 1.0.1 (2022-02-23) Type Description PR Issues Author Fix fix the URL generated for pull request IDs when passed to the `slam changelog add` command for Github hosted repositories @NiklasRosenstein 1.0.0a6 (2022-02-15) Type Description PR Issues Author Improvement `Command.help` now treats the first line differently to support docstrings where the first line is on the same line as the quotes @NiklasRosenstein Improvement `slam changelog update-pr` now supports updating the PR reference for changelogs of all projects @NiklasRosenstein 1.0.0a5 (2022-02-15) Type Description PR Issues Author Fix test runner without TTY now does the correct line prefixing @NiklasRosenstein 1.0.0a3 (2022-02-13) Type Description PR Issues Author Fix fix entrypoint for `slam` script @NiklasRosenstein 1.0.0a2 (2022-02-13) Type Description PR Issues Author Improvement reduce code duplicity in `shut.commands.link` and `shut.util.python_package` @NiklasRosenstein Fix fix `shut log command --author,-a` option being a flag @NiklasRosenstein Improvement allow `pyproject.toml` to not exist when using `shut release` command @NiklasRosenstein Improvement fix pattern replacing `{version}` string in release references @NiklasRosenstein Improvement Add `Application.load_subapp()` and `Application.subapps` @NiklasRosenstein Improvement `shut release` now has an `include` configuration key that can be used to include the version refs of sub projects, for example in a mono repository where a root `shut.toml` is used to manage the same version number across all components @NiklasRosenstein Improvement add support for `SLAM_DIR` environment variable @NiklasRosenstein 1.0.0a1 (2022-02-13) Type Description PR Issues Author Breaking change Fully reimplment Shut, rename it to Slam @NiklasRosenstein 0.21.1 (2021-11-21) Type Description PR Issues Author Fix using `VirtualFiles.get_modified_files()` no longer creates non-existent directories @NiklasRosenstein Fix catch malformed ref error when trying to determine main branch name and use `develop` as default (see #40) @NiklasRosenstein Fix `$package.render-requirements-txt` is now handled correctly @NiklasRosenstein 0.21.0 (2021-09-18) Type Description PR Issues Author Feature add `$.scripts` in `package.yml` and `shut pkg run` command @NiklasRosenstein 0.20.0 (2021-09-16) Type Description PR Issues Author Feature add `shut init` command group with initial `shut init mkdocs` command @NiklasRosenstein Feature add `documentation` job in GitHub Actions template @NiklasRosenstein Feature ignore GitHub Actions template when checking package config in GitHub Actions (this is mainly used when using an unreleased version of shut to generate the action template or when needing to do quick modifications to the action config without triggering the shut checks in CI). @NiklasRosenstein 0.19.0 (2021-09-15) Type Description PR Issues Author Improvement Changelog entry `fixes` is now optional @NiklasRosenstein Improvement switch to Mako as a template engine from Jinja2 @NiklasRosenstein Feature add `$.templates` to `AbstractProjectModel` and the `github-actions` template @NiklasRosenstein Improvement `shut pkg new` now adds the `github-template` to the generated `package.yml` @NiklasRosenstein Improvement remove template rendering capability of `pylint` test driver, instead add `pylintrc` template plugin @NiklasRosenstein 0.18.2 (2021-09-04) Type Description PR Issues Author Fix min `click` version must be `7.1` for `no_args_is_help` option, also allow `8.x` @NiklasRosenstein 0.18.1 (2021-08-27) Type Description PR Issues Author Fix fix added in `0.18.0` for #33 is actually incorrect, the `command` variable was needed when using the `_tempcopy()` feature. now it is fixed for good NiklasRosenstein/shut#33 @NiklasRosenstein 0.18.0 (2021-08-26) Type Description PR Issues Author Feature add `pylint` test driver @NiklasRosenstein Fix the fix from `0.17.4` actually made the install cache not work at all and just always install test requirements, now shut knows per driver selection whether dependencies have been installed before or not @NiklasRosenstein Feature test drivers are now loaded via the `shut.test_drivers` entrypoint, allowing plugins to be registered from external packages @NiklasRosenstein Feature internal: add `AbstractProjectModel.get_auxiliary_renderers()` @NiklasRosenstein Feature `pylint` now comes with `.pylintrc` templates (only `shut` for now) and can also render templates from HTTP(S) URLs @NiklasRosenstein Feature Shut now recognizes lowercase readme/license files NiklasRosenstein/shut#31 @NiklasRosenstein Fix render `command` variable into `setup.py` only if package `$.install.hooks` is used NiklasRosenstein/shut#33 @NiklasRosenstein 0.17.4 (2021-08-20) Type Description PR Issues Author Fix fix missing test-requirements installation with `shut mono|pkg test --isolate` if the comand was run previously @NiklasRosenstein 0.17.3 (2021-08-20) Type Description PR Issues Author Fix `shut mono|pkg test --isolate` no longer installs the main package in develop mode @NiklasRosenstein 0.17.2 (2021-08-14) Type Description PR Issues Author Fix `shut mono|pkg update --verify-tag \"\"` does not show an error when it should @NiklasRosenstein Feature `shut mono|pkg update --verify-tag` now accepts strings prefixed with `refs/tags/` and strips that prefix (useful for GitHub Actions to use the `$GITHUB_REF` variable) @NiklasRosenstein Fix `shut pkg update --dry` option not respected @NiklasRosenstein 0.17.1 (2021-08-13) Type Description PR Issues Author Improvement dd `shut mono|pkg test -q,--quiet` option to quietly install test requirements with Pip, changed default to not do silent installs @NiklasRosenstein 0.17.0 (2021-08-13) Type Description PR Issues Author Feature add `shut pkg test --install/--no-install` which will default to `--install` if the current Python installation (determined by the `PYTHON` variable or falling back to just the `python` command) is a virtual env @NiklasRosenstein Feature add support for a `mypy` test driver @NiklasRosenstein Feature api: add `Package.get_source_directory()` @NiklasRosenstein Feature add `$.test-drivers` field in package model and deprecate `$.test-driver` for it. @NiklasRosenstein Feature add `shut mono test --install/--no-install` option (parallel to the existing option for `shut pkg test`), without the flag test requirements are only installed if Shut did not install the same requirements into the same environment before @NiklasRosenstein Feature make sure `$.test-requirements` are installed when running `shut mono|pkg test` in addition to the test-driver requirements. Update some output formatting of `shut mono|pkg test` @NiklasRosenstein Fix lines in `MANIFEST.in` outside the shut-specific block are not kept on `shut pkg update` (fixed in `VirtualFiles.write_all()`) @NiklasRosenstein Fix package `$.author` data can now be de-serialized from a mapping again (as used to be possible before migrating to `databind.core^1.x` @NiklasRosenstein Fix fix printing of `Failed test details:` when there were no failures but at least one skipped test case @NiklasRosenstein Feature `pytest` driver now supports a `$.parallelism` option which automatically pulls in `pytest-xdist` as a test requirement @NiklasRosenstein Feature `shut mono|pkg bump --tag|--push|--dry` options now have short versions `-t|-p|-d` respectively @NiklasRosenstein 0.16.1 (2021-08-12) Type Description PR Issues Author Fix pass `filename` to databind deserializer when loading monorepo/package configuration files @NiklasRosenstein Fix Cannot run \"pip install\" without develop mode on package that inherits monorepo license NiklasRosenstein/shut#22 @NiklasRosenstein 0.16.0 (2021-08-10) Type Description PR Issues Author Fix fix missing import for `typing.Dict` in `pytest` driver module, which could in some Python versions result in a `NameError` @NiklasRosenstein Improvement add `extra_requires[test]` in generated `setup.py` @NiklasRosenstein Fix fix `setup.py` rendering for inherit license files NiklasRosenstein/shut#21 @NiklasRosenstein Improvement `_tempcopy()` function in `setup.py` now fails if the file cannot be copied from the source file @NiklasRosenstein 0.15.1 (2021-08-09) Type Description PR Issues Author Feature add BSD2, BSD3, BSD4 and Apache2 license templates @ndjeong 0.15.0 (2021-08-09) Type Description PR Issues Author Feature add `shut mono|pkg status --json --include-config` options @NiklasRosenstein 0.14.3 (2021-08-08) Type Description PR Issues Author Fix fix `VendoredRequirement._normpath()` which corrupted absolute paths on Windows (e.g. `C:/path/to` would be converted to `./C:\\path\\to` when it should just be `C:\\path\\to`). This caused `shut pkg install` on Windows to fail. @NiklasRosenstein Fix `No module named setuptools` error when using `shut pkg install` in venv on Windows NiklasRosenstein/shut#16 @NiklasRosenstein Fix fix additional CR in generated `LICENSE.txt` on Windows when installing Shut from source NiklasRosenstein/shut#17 @NiklasRosenstein Fix `py.typed` file is rendered into `MANIFEST.in` with backslashes @NiklasRosenstein 0.14.2 (2021-08-03) Type Description PR Issues Author Improvement update how install hooks are rendered into `setup.py` @NiklasRosenstein 0.14.1 (2021-07-23) Type Description PR Issues Author Fix `TypeError` when using --extra and --dev/--test @NiklasRosenstein 0.14.0 (2021-07-22) Type Description PR Issues Author Feature add `--dev/--no-dev` and `--test/--no-test` options to `shut mono install` and `shut pkg install` @NiklasRosenstein 0.13.3 (2021-06-20) Type Description PR Issues Author Fix exclude python requirements when rendering `requirements.txt` @NiklasRosenstein 0.13.2 (2021-06-20) Type Description PR Issues Author Fix fix format of requirements in requirements.txt @NiklasRosenstein 0.13.1 (2021-06-20) Type Description PR Issues Author Fix also install `PackageModel.test_requirements` on `shut pkg install` @NiklasRosenstein 0.13.0 (2021-06-20) Type Description PR Issues Author Feature add `PackageModel.dev_requirements` which will be installed with `shut pkg install` @NiklasRosenstein Feature add `PackageModel.render_requirements_txt` which will be rendered with `shut pkg update` @NiklasRosenstein 0.12.0 (2021-06-08) Type Description PR Issues Author Improvement allow running Shut via `python -m shut` @NiklasRosenstein Fix fix call to `run_install()` in `shut mono install` @NiklasRosenstein 0.11.4 (2021-02-01) Type Description PR Issues Author Fix `shut pkg install` now correctly installs transitive package interdependencies in the right order @NiklasRosenstein 0.11.3 (2021-01-29) Type Description PR Issues Author Fix fix error rendering `setup.py` if the license file did not exist @NiklasRosenstein Feature add `get-version` command to `shut mono` and `shut pkg` @NiklasRosenstein Fix `shut pkg requirements add` now adds the InstallConfiguration pip args @NiklasRosenstein 0.11.2 (2020-12-19) Type Description PR Issues Author Fix fix license_file relative path generation in setuptools renderer, now correctly inherits the license file from the monorepo @NiklasRosenstein 0.11.1 (2020-12-04) Type Description PR Issues Author Fix fix error in `setuptools` renderer if no license is configured in the package @NiklasRosenstein 0.11.0 (2020-12-03) Type Description PR Issues Author Feature add `$.package-data` field to `package.yml` @NiklasRosenstein Fix add missing package data that needs to be packaged with `shut` @NiklasRosenstein 0.10.3 (2020-11-27) Type Description PR Issues Author Fix referencing a LICENSE or README outside the package directory now does not fail on install if the source file does not exist, but it will print a warning @NiklasRosenstein 0.10.2 (2020-11-27) Type Description PR Issues Author Fix add `PackageModel.license_file` and fix license rendering into MANIFEST.in and setup.py @NiklasRosenstein 0.10.1 (2020-11-27) Type Description PR Issues Author Fix remove debug print in \"package-url\" check @NiklasRosenstein 0.10.0 (2020-11-27) Type Description PR Issues Author Feature packages now inherit the monorepos license if it is unset (using PackageModel.get_license()) @NiklasRosenstein Feature If a package inherits the monoreop license, the LICENSE file will not be replicated in the package directory but instead be copied from the monorepo (using `_tempcopy()` in `setup.py`) @NiklasRosenstein Feature `shut {mono,pkg} update` commands now produce a LICENSE.txt file if a license template exists for the specified license (currently only `MIT`) @NiklasRosenstein Feature packages now inherit the monorepo `author` and `url`, and `version` if `release.single_version == True` @NiklasRosenstein Feature add \"shut pkg format\" command @NiklasRosenstein Feature package `author` and `url` are now inherited from the monorepo @NiklasRosenstein 0.9.0 (2020-11-20) Type Description PR Issues Author Fix cli: Fix `shut mono bump` not updating requirements in package `setup.py` if packages have inter dependencies NiklasRosenstein/shut#7 @NiklasRosenstein Feature shut.model.package: Add `$.install.index-url` and `$.install.extra-index-urls` fields @NiklasRosenstein Feature cli: `shut pkg install` now supports `$.install.index-url` and `$.install.extra-index-urls`, added a `--pipx` option @NiklasRosenstein Feature checks: Add check for namespace files @NiklasRosenstein Fix fix order of dependencies in the same mono repository when using `shut pkg install` @NiklasRosenstein 0.8.0 (2020-09-09) Type Description PR Issues Author Feature cli: Add `shut ... test --keep-test-env` option @NiklasRosenstein Feature shut.test.base: Add `TestStatus.SKIPPED` enumeration value @NiklasRosenstein Fix shut.test.pytest: Support skipped tests instead of failing ungracefully @NiklasRosenstein Feature cli: Support skipped tests `shut ... test` output @NiklasRosenstein 0.7.3 (2020-09-09) Type Description PR Issues Author Fix cli: Fix `AttributeError` when running `shut mono bump --snapshot` @NiklasRosenstein 0.7.2 (2020-09-08) Type Description PR Issues Author Fix cli: Fix `shut pkg install` command @NiklasRosenstein 0.7.1 (2020-09-08) Type Description PR Issues Author Feature shore.models.monorepo: Add `Monorepo.get_inter_dependencies_graph()` @NiklasRosenstein Fix cli: `shut mono install` now uses topological order to retrieve package requirements @NiklasRosenstein 0.7.0 (2020-09-08) Type Description PR Issues Author Improvement cli: Removed `-a,--all` flag from `shut mono update`, the command now always behaves like that flag is set @NiklasRosenstein Feature cli: Add `shut mono update` flags `--verify` and `--verify-tag` @NiklasRosenstein Fix shut.renderers.setuptools: Fix rendering of `extras_require` @NiklasRosenstein Feature cli: Add `shut mono install` command @NiklasRosenstein 0.6.0 (2020-09-08) Type Description PR Issues Author Feature shut.changelog: Add `breaking_change` Changelog type @NiklasRosenstein Feature cli: `shut ... bump` command without version argument or bump mode option will determine the bump mode from the unreleased changelog @NiklasRosenstein Improvement shore.model: `dump()` method now uses `nr.fs.atomic_file` to ensure the original file contents are not modified if the dump operation fails @NiklasRosenstein Improvement shore.model.requirements: Add `BaseRequirement` and `VendoredRequirement` classes, require databind.core and databind.json ^0.4.0 for the `@datamodel(serialize_as)` feature @NiklasRosenstein Feature shut.model.package: `Package.requirements` and related properties are now of type `BaseRequirement`, allowing the use of `VendoredRequirement`s @NiklasRosenstein Improvement cli: `shut pkg build` and `shut pkg publish` will now error if the package uses vendored requirements @NiklasRosenstein Feature cli: `shut pkg requirements add` now supports adding vendored requirements using the `-v,--vendor` option @NiklasRosenstein Improvement shut.model.package: Use new `RequirementsList` class instead of `List[BaseRequirement]` @NiklasRosenstein Feature shut.model.requirements: `Requirement` now supports package extras @NiklasRosenstein Feature cli: Add `--verify` option to `shut pkg update` @NiklasRosenstein Feature shut.checkers.package: Add `up to date` check for packages @NiklasRosenstein Feature cli: `shut pkg install` now supports installing vendored requirements @NiklasRosenstein Fix shut.renderers.setuptools: Fix error when package author was not set @NiklasRosenstein Improvement shut.checkers: Change Checkers interface (remove `project` argument) @NiklasRosenstein Feature cli: `shut pkg bump` now prevents bumping if managed files are outdated @NiklasRosenstein Fix cli: `shut pkg bump` now prevents bumping if package version is managed by a monorepo single-version (as was previously already expected to happen) @NiklasRosenstein Improvement cli: `shut mono bump` now includes the packages in the mono repo if `$.release.single-version` is enabled @NiklasRosenstein Improvement shut.checkers.monorepo: remove `bad-package-directory` check again, having a package name differ from the directory name is a valid use case @NiklasRosenstein Feature cli: Add `shut mono publish` command which delegates to `shut pkg publish`. @NiklasRosenstein Improvement shut.publishers.warehouse: The `WarehouseProvider` now uses the new `PackageModel.get_publish_conf()` instead of `PackageModel.publish` directly, allowing packages to inherit the publish configuration of the mono repository @NiklasRosenstein 0.5.5 (2020-09-05) Type Description PR Issues Author Improvement shut.test.pytest: set altname for `PytestDriver.report_file` to `report-file` @NiklasRosenstein Improvement cli: `shut mono test` now prints a summary of the status for every tested package @NiklasRosenstein 0.5.4 (2020-09-05) Type Description PR Issues Author Improvement shut.test.pytest: `PytestDriver.args` option now defaults to `[\"-vv\"]` @NiklasRosenstein Feature cli: Add `shut mono test --only` option @NiklasRosenstein 0.5.3 (2020-09-05) Type Description PR Issues Author Feature cli: Support `VIRTUALENV` and `PIP` environment variables in `shut pkg test` and `shut mono test` @NiklasRosenstein 0.5.2 (2020-09-05) Type Description PR Issues Author Feature cli: add `--checks/--no-checks` toggle to `shut pkg` and `shut mono` commands @NiklasRosenstein Fix shut.test.pytest: Fix parsing of Pytest JSON record for test functions from a `unittest.TestCase` subclass @NiklasRosenstein 0.5.1 (2020-09-05) Type Description PR Issues Author Fix cli: fix running \"shut pkg install\" from inside \"shut pkg test --isolate\" call @NiklasRosenstein 0.5.0 (2020-09-05) Type Description PR Issues Author Improvement shut.model.package: Remove `PackageData` class, merge it's members into `PackageModel` (this does not change the interface of `PackageModel`), Removed `PackageModel.data` property @NiklasRosenstein Tests fix unit tests @NiklasRosenstein Improvement shore.checkers.package: `package-author` check is now an error level check @NiklasRosenstein Improvement cli: `shut mono bump` and `shut pkg bump` no longer run checks, the command group already does it @NiklasRosenstein Fix shut.renderers.setuptools: fix rendering of `python_requires` option in `setup.py` if package is universal (i.e. the `python` requirement uses an OR (|) which we cannot currently translate to setuptools correctly) @NiklasRosenstein Feature cli: add `shut pkg test` command which and `PackageModel.test_driver` configuration, the `shore.test` sub-package implements test drivers (currently just `pytest`) @NiklasRosenstein Feature cli: add `shut mono test` command @NiklasRosenstein 0.4.0 (2020-09-04) Type Description PR Issues Author Improvement cli: Updated temrinal output of `shut ... checks` @NiklasRosenstein Improvement shut.model.package: Add `PackageError` exception class @NiklasRosenstein Improvement shut.checkers.monorepo: Add `bad-package-directory` check to Monorepo checker @NiklasRosenstein Improvement cli: `shut pkg checks` now inherits checks from the Monorepo if the check result targets the package directly (e.g. the `bad-package-directory` check) @NiklasRosenstein Improvement shut.checkers.core: Add `CheckResult.subject` member (default: `None`) @NiklasRosenstein Improvement cli: `shut pkg` and `shut mono` commands will now print failed checks to stderr before executing the requested subcommand. @NiklasRosenstein Improvement shut.checkers.monorepo: include error message in `invalid-package` check result @NiklasRosenstein Improvement shut.checkers.generic: `unknown-config-options` check no longer shows if it passes @NiklasRosenstein Improvement shut.checkers.generic: rename `unknown-config` check to `unknown-config-options` @NiklasRosenstein Improvement cli: no longer set `PYTHONWARNINGS` environment variable @NiklasRosenstein Improvement shut.model.monorepo: add `Monorepo.get_inter_dependencies_for()` method @NiklasRosenstein Feature cli: add `shut pkg install` command @NiklasRosenstein 0.3.0 (2020-08-29) Type Description PR Issues Author Improvement update Changelog typing for databind @NiklasRosenstein Improvement update paths printed in `shut ... bump` when changelog is released @NiklasRosenstein 0.2.0 (2020-08-29) Type Description PR Issues Author Docs fix README example @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#163-2022-04-18","text":"Type Description PR Issues Author Fix Fix venv aware commands to add the absolute path to the `PATH` environment variable instead of a relative path @NiklasRosenstein","title":"1.6.3 (2022-04-18)"},{"location":"changelog/#162-2022-04-18","text":"Type Description PR Issues Author Improvement Add `PythonEnvironment.version_tuple` @NiklasRosenstein Improvement The `slap venv` command now automatically picks an environment name if you do not specify one with the `-c,--create` flag @NiklasRosenstein Improvement Changed `slap install` to no longer install all extras defined in the project by default, now you need to explicitly specify them in `[tool.slap.install].dev-extras` @NiklasRosenstein","title":"1.6.2 (2022-04-18)"},{"location":"changelog/#161-2022-04-16","text":"Type Description PR Issues Author Fix Fix `slap link` to produce absolute paths in the shebang for generated scripts by supplying an absolute path to the Python interpreter to the Flit installer @NiklasRosenstein","title":"1.6.1 (2022-04-16)"},{"location":"changelog/#160-2022-04-16","text":"Type Description PR Issues Author Feature add `-p,--path` option to `slap venv` command, note that `-p` was repurposed from `--python` and the option no longer has a short form @NiklasRosenstein Improvement `slap test` and `slap run` commands now activate the active virtual environment if any before running the commands @NiklasRosenstein Feature Add `-s,--set` option to `slap venv` @NiklasRosenstein Improvement The `slap run` command can now run arbitrary commands, but falls back to the ones aliased on the configuration on a match. @NiklasRosenstein Improvement Add `VenvAwareCommand` and use it in `add`, `install`, `link`, `report`, `run` and `test` @NiklasRosenstein Improvement Add `location` to `DistributionMetadata`, which propagates into the output of `slap report dependencies` @NiklasRosenstein","title":"1.6.0 (2022-04-16)"},{"location":"changelog/#154-2022-04-14","text":"Type Description PR Issues Author Fix Fix issue with \"cannot install into global environment\" even if a Slap venv is active @NiklasRosenstein","title":"1.5.4 (2022-04-14)"},{"location":"changelog/#153-2022-04-14","text":"Type Description PR Issues Author Fix Fixed forwarding `--python` argument to `slap link` command when using `slap install --link` @NiklasRosenstein Improvement For all Slap commands that operate on a Python environment (`install`, `link`, `add`), they will now look for the environment to target in the following order: 1) the `-p,--python` option, 2) the `PYTHON` environment variable, 3) the last local activated environment with `slap venv`, 4) just use `python` 58 @NiklasRosenstein","title":"1.5.3 (2022-04-14)"},{"location":"changelog/#152-2022-04-13","text":"Type Description PR Issues Author Fix fix in pep508 @NiklasRosenstein","title":"1.5.2 (2022-04-13)"},{"location":"changelog/#151-2022-04-13","text":"Type Description PR Issues Author Fix `slap.python.pep508` no longer requires `dataclasses` @NiklasRosenstein","title":"1.5.1 (2022-04-13)"},{"location":"changelog/#150-2022-04-13","text":"Type Description PR Issues Author Fix fix pep508 invokation when installing into Pytho 3.6 environments @NiklasRosenstein","title":"1.5.0 (2022-04-13)"},{"location":"changelog/#145-2022-04-04","text":"Type Description PR Issues Author Fix Fix `slap venv link` linking to an absolute path (correct) instead of a relartive path (wrong) when linking from a local environment @NiklasRosenstein Improvement No longer error when running Slap in a Python project directory using Poetry where some dependencies are declared using the table format in TOML, but log that the type of dependency is currently unsupported @NiklasRosenstein Improvement Allow unrecognized keys in `ChangelogConfig` @NiklasRosenstein Improvement Add a separate API to retrieve the projects in a repository in topological order such that most Slap commands that do not care about the order do not have the overhead of inspecting the project dependencies and sorting the projects. NiklasRosenstein/slam#50 @NiklasRosenstein Feature Add `slap.dependency` module @NiklasRosenstein Feature Add `slap report dependencies` command @NiklasRosenstein Fix Fix detection of added changelog entries in GitHub Actions for forked repositories; but that does not fix #49 @NiklasRosenstein Fix Fix a potential issue in `slap add` when `tomlkit` returns an `OutOfOrderTableProxy` instead of a `Table` container in which case we did not mutate the actual TOML document @NiklasRosenstein Feature Add `--source` option to `slap add` command @NiklasRosenstein","title":"1.4.5 (2022-04-04)"},{"location":"changelog/#144-2022-04-04","text":"Type Description PR Issues Author Improvement add `-g,--global` option to `slap venv link` command @NiklasRosenstein Improvement read Git `user.name` and `user.email` from local repository first and then globally @NiklasRosenstein","title":"1.4.4 (2022-04-04)"},{"location":"changelog/#143-2022-04-03","text":"Type Description PR Issues Author Fix Add missing `tomlkit` dependency (needed by the `slap add` command) @NiklasRosenstein","title":"1.4.3 (2022-04-03)"},{"location":"changelog/#142-2022-03-31","text":"Type Description PR Issues Author Fix adjust for breaking changes in databind 2.0.0 (no more databind.json.settings module) @NiklasRosenstein","title":"1.4.2 (2022-03-31)"},{"location":"changelog/#141-2022-03-31","text":"Type Description PR Issues Author Improvement Enhance docs and output of `slap venv` command @NiklasRosenstein Improvement The `slap venv` command can now be used with `-a,--activate` and without a `name` argument to activate the previously activated environment or the only one that is available in the context (local vs. global). @NiklasRosenstein Improvement Improve `ChangelogReleasePlugin` to write \"releasing changelog\" line only once @NiklasRosenstein Improvement Improve changelog checks plugin to catch more types of errors to return in the check details @NiklasRosenstein Improvement improve output produces by `slap venv -a`, `slap publish` and `slap release` @NiklasRosenstein","title":"1.4.1 (2022-03-31)"},{"location":"changelog/#140-2022-03-29","text":"Type Description PR Issues Author Feature Add `ProjectHandler.add_dependency()` and `Project.add_dependency() @NiklasRosenstein Feature Add `slap add` command @NiklasRosenstein","title":"1.4.0 (2022-03-29)"},{"location":"changelog/#136-2022-03-27","text":"Type Description PR Issues Author Fix Fix `NameError` in non-monorepository scenario when using `slap install` @NiklasRosenstein","title":"1.3.6 (2022-03-27)"},{"location":"changelog/#135-2022-03-24","text":"Type Description PR Issues Author Fix Fix `slap release` to consider the monorepository config as well @NiklasRosenstein","title":"1.3.5 (2022-03-24)"},{"location":"changelog/#134-2022-03-24","text":"Type Description PR Issues Author Improvement `slam install` without `--no-dev` now installs _all_ extras for a project unless the new `[install.dev-extras]` option is set @NiklasRosenstein","title":"1.3.4 (2022-03-24)"},{"location":"changelog/#133-2022-03-24","text":"Type Description PR Issues Author Fix Fix how `[install.extras]` is taken into account (used to always take all extras) @NiklasRosenstein","title":"1.3.3 (2022-03-24)"},{"location":"changelog/#132-2022-03-24","text":"Type Description PR Issues Author Feature support `[install.extras]` option in the monorepository and project config @NiklasRosenstein","title":"1.3.2 (2022-03-24)"},{"location":"changelog/#131-2022-03-24","text":"Type Description PR Issues Author Feature add `github` template to `slap init` @NiklasRosenstein Fix `slap run` now uses the reopsitory `slap.toml` configuration file to read the run configuration if no main project exists; `Application.main_project()` no longer tries to find the \"closest\" project because right now Slap does not actually try to find a \"better\" project root than the current working directory @NiklasRosenstein","title":"1.3.1 (2022-03-24)"},{"location":"changelog/#130-2022-03-23","text":"Type Description PR Issues Author Improvement upgrade to using `databind` 2.x @NiklasRosenstein Breaking change Rename Slam to Slap @NiklasRosenstein Improvement Split default project handler into separate implementations for Poetry, Flit and Setuptools and properly support Setuptools now (reading `setup.cfg`) @NiklasRosenstein Feature add `-b,--build-directory` option to `slap publish` command @NiklasRosenstein Feature add `slap.check.check()` decorator and `slap.check.get_checks()` function to make implementing check plugins more convenient @NiklasRosenstein Improvement add `Project.version()` and `Project.get_version_refs()` @NiklasRosenstein Improvement move interdependencies version ref detection into `DefaultProjectHandler` @NiklasRosenstein Improvement add overload for `match_version_ref_pattern()` that can return a fallback value @NiklasRosenstein","title":"1.3.0 (2022-03-23)"},{"location":"changelog/#124-2022-03-22","text":"Type Description PR Issues Author Improvement The default repository handler now only matches if it appears to make sense to use the Slam CLI inside it. @NiklasRosenstein Feature add `slam venv` and `slam venv link` commands @NiklasRosenstein Fix `slam init` now identifies the author to use in the template from Git's global config if the current directory is not already a Git repository @NiklasRosenstein","title":"1.2.4 (2022-03-22)"},{"location":"changelog/#123-2022-03-20","text":"Type Description PR Issues Author Fix Fix `slam install` command accessing the wrong option name for `--no-venv-check` causing an error when `--link` was used @NiklasRosenstein","title":"1.2.3 (2022-03-20)"},{"location":"changelog/#122-2022-03-20","text":"Type Description PR Issues Author Improvement `test` command no info-logs the command being run @NiklasRosenstein Feature add `slam test -l,--list` option @NiklasRosenstein Improvement `slam init -t poetry` now creates a test file @NiklasRosenstein Fix Fix `slam init` to create a `test/test_import.py` instead of `test/test.py` @NiklasRosenstein Fix Fix `slam install` command to forward to the `--no-venv-check` option to the `slam link` command @NiklasRosenstein Fix Fix `slam changelog convert` to use the proper default author @NiklasRosenstein","title":"1.2.2 (2022-03-20)"},{"location":"changelog/#121-2022-03-14","text":"Type Description PR Issues Author Feature add `slam changelog ` argument, defaults to the same as `--name` @NiklasRosenstein Improvement `slam init` now understands dots as namespace packages @NiklasRosenstein Improvement `slam init` package name written into `pyproject.toml` keeps dots @NiklasRosenstein Feature add `slam run` command @NiklasRosenstein Improvement added `-vv` flag to Pytest command rendered in `pyproject.toml` by `slam init -t poetry` @NiklasRosenstein","title":"1.2.1 (2022-03-14)"},{"location":"changelog/#120-2022-03-03","text":"Type Description PR Issues Author Refactor add `Repository` and `RepositoryHandlerPlugin` which gets to decide which projects are loaded, remove most of the related members from the `Application` class @NiklasRosenstein Improvement morph `VcsHost` into `RepositoryHost` class NiklasRosenstein Fix fix possible `AssertionError` in `Application._get_main_project()` that can occur if Slam is invoked in a directory that does not contain a `pyproject.toml` nor `slam.toml` file. @NiklasRosenstein Improvement `slam changelog format` in the Terminal now colorizes inline code (indicated by backticks) @NiklasRosenstein Improvement All application plugins are now loaded by default (no explicit list of plugins to load), but the `tool.slam.application.disable` config persists to disable the activation of a particular set of plugins @NiklasRosenstein Feature add `slam init` command @NiklasRosenstein","title":"1.2.0 (2022-03-03)"},{"location":"changelog/#112-2022-03-02","text":"Type Description PR Issues Author Fix `git+https://...` requirements are now understood and no longer converted into a dependency caled just \"git\" @NiklasRosenstein","title":"1.1.2 (2022-03-02)"},{"location":"changelog/#111-2022-02-26","text":"Type Description PR Issues Author Fix support old `break` change type and convert it to `breaking change` @NiklasRosenstein Feature add `slam publish --dry,-d` option @NiklasRosenstein","title":"1.1.1 (2022-02-26)"},{"location":"changelog/#110-2022-02-26","text":"Type Description PR Issues Author Improvement add `Project.application` member @NiklasRosenstein Feature add release plugin to automatically bump interdependencies between projects in a monorepository (can be disabled by setting `tool.slam.release.interdependencies = false`) @NiklasRosenstein","title":"1.1.0 (2022-02-26)"},{"location":"changelog/#1010-2022-02-25","text":"Type Description PR Issues Author Fix `slam install` now skips projects that dont expose Python packages @NiklasRosenstein","title":"1.0.10 (2022-02-25)"},{"location":"changelog/#109-2022-02-25","text":"Type Description PR Issues Author Fix fix consistent sorting of packages ordered topologically by interdependencies @NiklasRosenstein Feature recognize `tool.poetry.packages` option in `DefaultProjectHandler.get_packages()` @NiklasRosenstein","title":"1.0.9 (2022-02-25)"},{"location":"changelog/#108-2022-02-25","text":"Type Description PR Issues Author Fix `slam changelog convert-pr` command now provides YAML error details if the file cannot be parsed and allows the `release_date` to not be set (to convert `_unreleased.yml`) @NiklasRosenstein Fix `Project.get_packages()` no longer delegates to the `ProjectHandler` if the project is not a Python project (does not have a `pyproject.toml`) to avoid weird namespace packages to be detected unintentionally @NiklasRosenstein","title":"1.0.8 (2022-02-25)"},{"location":"changelog/#107-2022-02-23","text":"Type Description PR Issues Author Fix `slam test` now only runs subproject tests instead of all tests in a monorepo if the main project (the one from the cwd) is not the same as the root project @NiklasRosenstein Fix `slam changelog update-pr` always counted 0 entries to update and thus never committed the changes @NiklasRosenstein","title":"1.0.7 (2022-02-23)"},{"location":"changelog/#106-2022-02-23","text":"Type Description PR Issues Author Improvement `slam changelog update-pr` no longer overwrites existing PR references in entries unless the new `--overwrite` option is passed @NiklasRosenstein","title":"1.0.6 (2022-02-23)"},{"location":"changelog/#105-2022-02-23","text":"Type Description PR Issues Author Feature add `ChangelogManager.readonly` which prevents you from saving a changelog to disk @NiklasRosenstein Feature add `[tool.shut.changelog].enabled` option which can be used to turn off the ability to add changelogs to the current project via the CLI @NiklasRosenstein","title":"1.0.5 (2022-02-23)"},{"location":"changelog/#104-2022-02-23","text":"Type Description PR Issues Author Improvement hide output from `git checkout -b` in `github-actions` plugin @NiklasRosenstein Fix fix shortform detection for GitHub pull request URLs @NiklasRosenstein","title":"1.0.4 (2022-02-23)"},{"location":"changelog/#103-2022-02-23","text":"Type Description PR Issues Author Improvement use more concrete branch name for checkout in `github-actions` plugin to work around issues if the branch name is the same as a top level folder in the repository @NiklasRosenstein Fix fix `github-actions` tendency to swallow command output which could have been of use in case of an error @NiklasRosenstein","title":"1.0.3 (2022-02-23)"},{"location":"changelog/#102-2022-02-23","text":"Type Description PR Issues Author Improvement parse semver in `[tool.poetry.extras]` @NiklasRosenstein Feature add `--extras` and `--only-extras` options to `slam install` @NiklasRosenstein","title":"1.0.2 (2022-02-23)"},{"location":"changelog/#101-2022-02-23","text":"Type Description PR Issues Author Fix fix the URL generated for pull request IDs when passed to the `slam changelog add` command for Github hosted repositories @NiklasRosenstein","title":"1.0.1 (2022-02-23)"},{"location":"changelog/#100a6-2022-02-15","text":"Type Description PR Issues Author Improvement `Command.help` now treats the first line differently to support docstrings where the first line is on the same line as the quotes @NiklasRosenstein Improvement `slam changelog update-pr` now supports updating the PR reference for changelogs of all projects @NiklasRosenstein","title":"1.0.0a6 (2022-02-15)"},{"location":"changelog/#100a5-2022-02-15","text":"Type Description PR Issues Author Fix test runner without TTY now does the correct line prefixing @NiklasRosenstein","title":"1.0.0a5 (2022-02-15)"},{"location":"changelog/#100a3-2022-02-13","text":"Type Description PR Issues Author Fix fix entrypoint for `slam` script @NiklasRosenstein","title":"1.0.0a3 (2022-02-13)"},{"location":"changelog/#100a2-2022-02-13","text":"Type Description PR Issues Author Improvement reduce code duplicity in `shut.commands.link` and `shut.util.python_package` @NiklasRosenstein Fix fix `shut log command --author,-a` option being a flag @NiklasRosenstein Improvement allow `pyproject.toml` to not exist when using `shut release` command @NiklasRosenstein Improvement fix pattern replacing `{version}` string in release references @NiklasRosenstein Improvement Add `Application.load_subapp()` and `Application.subapps` @NiklasRosenstein Improvement `shut release` now has an `include` configuration key that can be used to include the version refs of sub projects, for example in a mono repository where a root `shut.toml` is used to manage the same version number across all components @NiklasRosenstein Improvement add support for `SLAM_DIR` environment variable @NiklasRosenstein","title":"1.0.0a2 (2022-02-13)"},{"location":"changelog/#100a1-2022-02-13","text":"Type Description PR Issues Author Breaking change Fully reimplment Shut, rename it to Slam @NiklasRosenstein","title":"1.0.0a1 (2022-02-13)"},{"location":"changelog/#0211-2021-11-21","text":"Type Description PR Issues Author Fix using `VirtualFiles.get_modified_files()` no longer creates non-existent directories @NiklasRosenstein Fix catch malformed ref error when trying to determine main branch name and use `develop` as default (see #40) @NiklasRosenstein Fix `$package.render-requirements-txt` is now handled correctly @NiklasRosenstein","title":"0.21.1 (2021-11-21)"},{"location":"changelog/#0210-2021-09-18","text":"Type Description PR Issues Author Feature add `$.scripts` in `package.yml` and `shut pkg run` command @NiklasRosenstein","title":"0.21.0 (2021-09-18)"},{"location":"changelog/#0200-2021-09-16","text":"Type Description PR Issues Author Feature add `shut init` command group with initial `shut init mkdocs` command @NiklasRosenstein Feature add `documentation` job in GitHub Actions template @NiklasRosenstein Feature ignore GitHub Actions template when checking package config in GitHub Actions (this is mainly used when using an unreleased version of shut to generate the action template or when needing to do quick modifications to the action config without triggering the shut checks in CI). @NiklasRosenstein","title":"0.20.0 (2021-09-16)"},{"location":"changelog/#0190-2021-09-15","text":"Type Description PR Issues Author Improvement Changelog entry `fixes` is now optional @NiklasRosenstein Improvement switch to Mako as a template engine from Jinja2 @NiklasRosenstein Feature add `$.templates` to `AbstractProjectModel` and the `github-actions` template @NiklasRosenstein Improvement `shut pkg new` now adds the `github-template` to the generated `package.yml` @NiklasRosenstein Improvement remove template rendering capability of `pylint` test driver, instead add `pylintrc` template plugin @NiklasRosenstein","title":"0.19.0 (2021-09-15)"},{"location":"changelog/#0182-2021-09-04","text":"Type Description PR Issues Author Fix min `click` version must be `7.1` for `no_args_is_help` option, also allow `8.x` @NiklasRosenstein","title":"0.18.2 (2021-09-04)"},{"location":"changelog/#0181-2021-08-27","text":"Type Description PR Issues Author Fix fix added in `0.18.0` for #33 is actually incorrect, the `command` variable was needed when using the `_tempcopy()` feature. now it is fixed for good NiklasRosenstein/shut#33 @NiklasRosenstein","title":"0.18.1 (2021-08-27)"},{"location":"changelog/#0180-2021-08-26","text":"Type Description PR Issues Author Feature add `pylint` test driver @NiklasRosenstein Fix the fix from `0.17.4` actually made the install cache not work at all and just always install test requirements, now shut knows per driver selection whether dependencies have been installed before or not @NiklasRosenstein Feature test drivers are now loaded via the `shut.test_drivers` entrypoint, allowing plugins to be registered from external packages @NiklasRosenstein Feature internal: add `AbstractProjectModel.get_auxiliary_renderers()` @NiklasRosenstein Feature `pylint` now comes with `.pylintrc` templates (only `shut` for now) and can also render templates from HTTP(S) URLs @NiklasRosenstein Feature Shut now recognizes lowercase readme/license files NiklasRosenstein/shut#31 @NiklasRosenstein Fix render `command` variable into `setup.py` only if package `$.install.hooks` is used NiklasRosenstein/shut#33 @NiklasRosenstein","title":"0.18.0 (2021-08-26)"},{"location":"changelog/#0174-2021-08-20","text":"Type Description PR Issues Author Fix fix missing test-requirements installation with `shut mono|pkg test --isolate` if the comand was run previously @NiklasRosenstein","title":"0.17.4 (2021-08-20)"},{"location":"changelog/#0173-2021-08-20","text":"Type Description PR Issues Author Fix `shut mono|pkg test --isolate` no longer installs the main package in develop mode @NiklasRosenstein","title":"0.17.3 (2021-08-20)"},{"location":"changelog/#0172-2021-08-14","text":"Type Description PR Issues Author Fix `shut mono|pkg update --verify-tag \"\"` does not show an error when it should @NiklasRosenstein Feature `shut mono|pkg update --verify-tag` now accepts strings prefixed with `refs/tags/` and strips that prefix (useful for GitHub Actions to use the `$GITHUB_REF` variable) @NiklasRosenstein Fix `shut pkg update --dry` option not respected @NiklasRosenstein","title":"0.17.2 (2021-08-14)"},{"location":"changelog/#0171-2021-08-13","text":"Type Description PR Issues Author Improvement dd `shut mono|pkg test -q,--quiet` option to quietly install test requirements with Pip, changed default to not do silent installs @NiklasRosenstein","title":"0.17.1 (2021-08-13)"},{"location":"changelog/#0170-2021-08-13","text":"Type Description PR Issues Author Feature add `shut pkg test --install/--no-install` which will default to `--install` if the current Python installation (determined by the `PYTHON` variable or falling back to just the `python` command) is a virtual env @NiklasRosenstein Feature add support for a `mypy` test driver @NiklasRosenstein Feature api: add `Package.get_source_directory()` @NiklasRosenstein Feature add `$.test-drivers` field in package model and deprecate `$.test-driver` for it. @NiklasRosenstein Feature add `shut mono test --install/--no-install` option (parallel to the existing option for `shut pkg test`), without the flag test requirements are only installed if Shut did not install the same requirements into the same environment before @NiklasRosenstein Feature make sure `$.test-requirements` are installed when running `shut mono|pkg test` in addition to the test-driver requirements. Update some output formatting of `shut mono|pkg test` @NiklasRosenstein Fix lines in `MANIFEST.in` outside the shut-specific block are not kept on `shut pkg update` (fixed in `VirtualFiles.write_all()`) @NiklasRosenstein Fix package `$.author` data can now be de-serialized from a mapping again (as used to be possible before migrating to `databind.core^1.x` @NiklasRosenstein Fix fix printing of `Failed test details:` when there were no failures but at least one skipped test case @NiklasRosenstein Feature `pytest` driver now supports a `$.parallelism` option which automatically pulls in `pytest-xdist` as a test requirement @NiklasRosenstein Feature `shut mono|pkg bump --tag|--push|--dry` options now have short versions `-t|-p|-d` respectively @NiklasRosenstein","title":"0.17.0 (2021-08-13)"},{"location":"changelog/#0161-2021-08-12","text":"Type Description PR Issues Author Fix pass `filename` to databind deserializer when loading monorepo/package configuration files @NiklasRosenstein Fix Cannot run \"pip install\" without develop mode on package that inherits monorepo license NiklasRosenstein/shut#22 @NiklasRosenstein","title":"0.16.1 (2021-08-12)"},{"location":"changelog/#0160-2021-08-10","text":"Type Description PR Issues Author Fix fix missing import for `typing.Dict` in `pytest` driver module, which could in some Python versions result in a `NameError` @NiklasRosenstein Improvement add `extra_requires[test]` in generated `setup.py` @NiklasRosenstein Fix fix `setup.py` rendering for inherit license files NiklasRosenstein/shut#21 @NiklasRosenstein Improvement `_tempcopy()` function in `setup.py` now fails if the file cannot be copied from the source file @NiklasRosenstein","title":"0.16.0 (2021-08-10)"},{"location":"changelog/#0151-2021-08-09","text":"Type Description PR Issues Author Feature add BSD2, BSD3, BSD4 and Apache2 license templates @ndjeong","title":"0.15.1 (2021-08-09)"},{"location":"changelog/#0150-2021-08-09","text":"Type Description PR Issues Author Feature add `shut mono|pkg status --json --include-config` options @NiklasRosenstein","title":"0.15.0 (2021-08-09)"},{"location":"changelog/#0143-2021-08-08","text":"Type Description PR Issues Author Fix fix `VendoredRequirement._normpath()` which corrupted absolute paths on Windows (e.g. `C:/path/to` would be converted to `./C:\\path\\to` when it should just be `C:\\path\\to`). This caused `shut pkg install` on Windows to fail. @NiklasRosenstein Fix `No module named setuptools` error when using `shut pkg install` in venv on Windows NiklasRosenstein/shut#16 @NiklasRosenstein Fix fix additional CR in generated `LICENSE.txt` on Windows when installing Shut from source NiklasRosenstein/shut#17 @NiklasRosenstein Fix `py.typed` file is rendered into `MANIFEST.in` with backslashes @NiklasRosenstein","title":"0.14.3 (2021-08-08)"},{"location":"changelog/#0142-2021-08-03","text":"Type Description PR Issues Author Improvement update how install hooks are rendered into `setup.py` @NiklasRosenstein","title":"0.14.2 (2021-08-03)"},{"location":"changelog/#0141-2021-07-23","text":"Type Description PR Issues Author Fix `TypeError` when using --extra and --dev/--test @NiklasRosenstein","title":"0.14.1 (2021-07-23)"},{"location":"changelog/#0140-2021-07-22","text":"Type Description PR Issues Author Feature add `--dev/--no-dev` and `--test/--no-test` options to `shut mono install` and `shut pkg install` @NiklasRosenstein","title":"0.14.0 (2021-07-22)"},{"location":"changelog/#0133-2021-06-20","text":"Type Description PR Issues Author Fix exclude python requirements when rendering `requirements.txt` @NiklasRosenstein","title":"0.13.3 (2021-06-20)"},{"location":"changelog/#0132-2021-06-20","text":"Type Description PR Issues Author Fix fix format of requirements in requirements.txt @NiklasRosenstein","title":"0.13.2 (2021-06-20)"},{"location":"changelog/#0131-2021-06-20","text":"Type Description PR Issues Author Fix also install `PackageModel.test_requirements` on `shut pkg install` @NiklasRosenstein","title":"0.13.1 (2021-06-20)"},{"location":"changelog/#0130-2021-06-20","text":"Type Description PR Issues Author Feature add `PackageModel.dev_requirements` which will be installed with `shut pkg install` @NiklasRosenstein Feature add `PackageModel.render_requirements_txt` which will be rendered with `shut pkg update` @NiklasRosenstein","title":"0.13.0 (2021-06-20)"},{"location":"changelog/#0120-2021-06-08","text":"Type Description PR Issues Author Improvement allow running Shut via `python -m shut` @NiklasRosenstein Fix fix call to `run_install()` in `shut mono install` @NiklasRosenstein","title":"0.12.0 (2021-06-08)"},{"location":"changelog/#0114-2021-02-01","text":"Type Description PR Issues Author Fix `shut pkg install` now correctly installs transitive package interdependencies in the right order @NiklasRosenstein","title":"0.11.4 (2021-02-01)"},{"location":"changelog/#0113-2021-01-29","text":"Type Description PR Issues Author Fix fix error rendering `setup.py` if the license file did not exist @NiklasRosenstein Feature add `get-version` command to `shut mono` and `shut pkg` @NiklasRosenstein Fix `shut pkg requirements add` now adds the InstallConfiguration pip args @NiklasRosenstein","title":"0.11.3 (2021-01-29)"},{"location":"changelog/#0112-2020-12-19","text":"Type Description PR Issues Author Fix fix license_file relative path generation in setuptools renderer, now correctly inherits the license file from the monorepo @NiklasRosenstein","title":"0.11.2 (2020-12-19)"},{"location":"changelog/#0111-2020-12-04","text":"Type Description PR Issues Author Fix fix error in `setuptools` renderer if no license is configured in the package @NiklasRosenstein","title":"0.11.1 (2020-12-04)"},{"location":"changelog/#0110-2020-12-03","text":"Type Description PR Issues Author Feature add `$.package-data` field to `package.yml` @NiklasRosenstein Fix add missing package data that needs to be packaged with `shut` @NiklasRosenstein","title":"0.11.0 (2020-12-03)"},{"location":"changelog/#0103-2020-11-27","text":"Type Description PR Issues Author Fix referencing a LICENSE or README outside the package directory now does not fail on install if the source file does not exist, but it will print a warning @NiklasRosenstein","title":"0.10.3 (2020-11-27)"},{"location":"changelog/#0102-2020-11-27","text":"Type Description PR Issues Author Fix add `PackageModel.license_file` and fix license rendering into MANIFEST.in and setup.py @NiklasRosenstein","title":"0.10.2 (2020-11-27)"},{"location":"changelog/#0101-2020-11-27","text":"Type Description PR Issues Author Fix remove debug print in \"package-url\" check @NiklasRosenstein","title":"0.10.1 (2020-11-27)"},{"location":"changelog/#0100-2020-11-27","text":"Type Description PR Issues Author Feature packages now inherit the monorepos license if it is unset (using PackageModel.get_license()) @NiklasRosenstein Feature If a package inherits the monoreop license, the LICENSE file will not be replicated in the package directory but instead be copied from the monorepo (using `_tempcopy()` in `setup.py`) @NiklasRosenstein Feature `shut {mono,pkg} update` commands now produce a LICENSE.txt file if a license template exists for the specified license (currently only `MIT`) @NiklasRosenstein Feature packages now inherit the monorepo `author` and `url`, and `version` if `release.single_version == True` @NiklasRosenstein Feature add \"shut pkg format\" command @NiklasRosenstein Feature package `author` and `url` are now inherited from the monorepo @NiklasRosenstein","title":"0.10.0 (2020-11-27)"},{"location":"changelog/#090-2020-11-20","text":"Type Description PR Issues Author Fix cli: Fix `shut mono bump` not updating requirements in package `setup.py` if packages have inter dependencies NiklasRosenstein/shut#7 @NiklasRosenstein Feature shut.model.package: Add `$.install.index-url` and `$.install.extra-index-urls` fields @NiklasRosenstein Feature cli: `shut pkg install` now supports `$.install.index-url` and `$.install.extra-index-urls`, added a `--pipx` option @NiklasRosenstein Feature checks: Add check for namespace files @NiklasRosenstein Fix fix order of dependencies in the same mono repository when using `shut pkg install` @NiklasRosenstein","title":"0.9.0 (2020-11-20)"},{"location":"changelog/#080-2020-09-09","text":"Type Description PR Issues Author Feature cli: Add `shut ... test --keep-test-env` option @NiklasRosenstein Feature shut.test.base: Add `TestStatus.SKIPPED` enumeration value @NiklasRosenstein Fix shut.test.pytest: Support skipped tests instead of failing ungracefully @NiklasRosenstein Feature cli: Support skipped tests `shut ... test` output @NiklasRosenstein","title":"0.8.0 (2020-09-09)"},{"location":"changelog/#073-2020-09-09","text":"Type Description PR Issues Author Fix cli: Fix `AttributeError` when running `shut mono bump --snapshot` @NiklasRosenstein","title":"0.7.3 (2020-09-09)"},{"location":"changelog/#072-2020-09-08","text":"Type Description PR Issues Author Fix cli: Fix `shut pkg install` command @NiklasRosenstein","title":"0.7.2 (2020-09-08)"},{"location":"changelog/#071-2020-09-08","text":"Type Description PR Issues Author Feature shore.models.monorepo: Add `Monorepo.get_inter_dependencies_graph()` @NiklasRosenstein Fix cli: `shut mono install` now uses topological order to retrieve package requirements @NiklasRosenstein","title":"0.7.1 (2020-09-08)"},{"location":"changelog/#070-2020-09-08","text":"Type Description PR Issues Author Improvement cli: Removed `-a,--all` flag from `shut mono update`, the command now always behaves like that flag is set @NiklasRosenstein Feature cli: Add `shut mono update` flags `--verify` and `--verify-tag` @NiklasRosenstein Fix shut.renderers.setuptools: Fix rendering of `extras_require` @NiklasRosenstein Feature cli: Add `shut mono install` command @NiklasRosenstein","title":"0.7.0 (2020-09-08)"},{"location":"changelog/#060-2020-09-08","text":"Type Description PR Issues Author Feature shut.changelog: Add `breaking_change` Changelog type @NiklasRosenstein Feature cli: `shut ... bump` command without version argument or bump mode option will determine the bump mode from the unreleased changelog @NiklasRosenstein Improvement shore.model: `dump()` method now uses `nr.fs.atomic_file` to ensure the original file contents are not modified if the dump operation fails @NiklasRosenstein Improvement shore.model.requirements: Add `BaseRequirement` and `VendoredRequirement` classes, require databind.core and databind.json ^0.4.0 for the `@datamodel(serialize_as)` feature @NiklasRosenstein Feature shut.model.package: `Package.requirements` and related properties are now of type `BaseRequirement`, allowing the use of `VendoredRequirement`s @NiklasRosenstein Improvement cli: `shut pkg build` and `shut pkg publish` will now error if the package uses vendored requirements @NiklasRosenstein Feature cli: `shut pkg requirements add` now supports adding vendored requirements using the `-v,--vendor` option @NiklasRosenstein Improvement shut.model.package: Use new `RequirementsList` class instead of `List[BaseRequirement]` @NiklasRosenstein Feature shut.model.requirements: `Requirement` now supports package extras @NiklasRosenstein Feature cli: Add `--verify` option to `shut pkg update` @NiklasRosenstein Feature shut.checkers.package: Add `up to date` check for packages @NiklasRosenstein Feature cli: `shut pkg install` now supports installing vendored requirements @NiklasRosenstein Fix shut.renderers.setuptools: Fix error when package author was not set @NiklasRosenstein Improvement shut.checkers: Change Checkers interface (remove `project` argument) @NiklasRosenstein Feature cli: `shut pkg bump` now prevents bumping if managed files are outdated @NiklasRosenstein Fix cli: `shut pkg bump` now prevents bumping if package version is managed by a monorepo single-version (as was previously already expected to happen) @NiklasRosenstein Improvement cli: `shut mono bump` now includes the packages in the mono repo if `$.release.single-version` is enabled @NiklasRosenstein Improvement shut.checkers.monorepo: remove `bad-package-directory` check again, having a package name differ from the directory name is a valid use case @NiklasRosenstein Feature cli: Add `shut mono publish` command which delegates to `shut pkg publish`. @NiklasRosenstein Improvement shut.publishers.warehouse: The `WarehouseProvider` now uses the new `PackageModel.get_publish_conf()` instead of `PackageModel.publish` directly, allowing packages to inherit the publish configuration of the mono repository @NiklasRosenstein","title":"0.6.0 (2020-09-08)"},{"location":"changelog/#055-2020-09-05","text":"Type Description PR Issues Author Improvement shut.test.pytest: set altname for `PytestDriver.report_file` to `report-file` @NiklasRosenstein Improvement cli: `shut mono test` now prints a summary of the status for every tested package @NiklasRosenstein","title":"0.5.5 (2020-09-05)"},{"location":"changelog/#054-2020-09-05","text":"Type Description PR Issues Author Improvement shut.test.pytest: `PytestDriver.args` option now defaults to `[\"-vv\"]` @NiklasRosenstein Feature cli: Add `shut mono test --only` option @NiklasRosenstein","title":"0.5.4 (2020-09-05)"},{"location":"changelog/#053-2020-09-05","text":"Type Description PR Issues Author Feature cli: Support `VIRTUALENV` and `PIP` environment variables in `shut pkg test` and `shut mono test` @NiklasRosenstein","title":"0.5.3 (2020-09-05)"},{"location":"changelog/#052-2020-09-05","text":"Type Description PR Issues Author Feature cli: add `--checks/--no-checks` toggle to `shut pkg` and `shut mono` commands @NiklasRosenstein Fix shut.test.pytest: Fix parsing of Pytest JSON record for test functions from a `unittest.TestCase` subclass @NiklasRosenstein","title":"0.5.2 (2020-09-05)"},{"location":"changelog/#051-2020-09-05","text":"Type Description PR Issues Author Fix cli: fix running \"shut pkg install\" from inside \"shut pkg test --isolate\" call @NiklasRosenstein","title":"0.5.1 (2020-09-05)"},{"location":"changelog/#050-2020-09-05","text":"Type Description PR Issues Author Improvement shut.model.package: Remove `PackageData` class, merge it's members into `PackageModel` (this does not change the interface of `PackageModel`), Removed `PackageModel.data` property @NiklasRosenstein Tests fix unit tests @NiklasRosenstein Improvement shore.checkers.package: `package-author` check is now an error level check @NiklasRosenstein Improvement cli: `shut mono bump` and `shut pkg bump` no longer run checks, the command group already does it @NiklasRosenstein Fix shut.renderers.setuptools: fix rendering of `python_requires` option in `setup.py` if package is universal (i.e. the `python` requirement uses an OR (|) which we cannot currently translate to setuptools correctly) @NiklasRosenstein Feature cli: add `shut pkg test` command which and `PackageModel.test_driver` configuration, the `shore.test` sub-package implements test drivers (currently just `pytest`) @NiklasRosenstein Feature cli: add `shut mono test` command @NiklasRosenstein","title":"0.5.0 (2020-09-05)"},{"location":"changelog/#040-2020-09-04","text":"Type Description PR Issues Author Improvement cli: Updated temrinal output of `shut ... checks` @NiklasRosenstein Improvement shut.model.package: Add `PackageError` exception class @NiklasRosenstein Improvement shut.checkers.monorepo: Add `bad-package-directory` check to Monorepo checker @NiklasRosenstein Improvement cli: `shut pkg checks` now inherits checks from the Monorepo if the check result targets the package directly (e.g. the `bad-package-directory` check) @NiklasRosenstein Improvement shut.checkers.core: Add `CheckResult.subject` member (default: `None`) @NiklasRosenstein Improvement cli: `shut pkg` and `shut mono` commands will now print failed checks to stderr before executing the requested subcommand. @NiklasRosenstein Improvement shut.checkers.monorepo: include error message in `invalid-package` check result @NiklasRosenstein Improvement shut.checkers.generic: `unknown-config-options` check no longer shows if it passes @NiklasRosenstein Improvement shut.checkers.generic: rename `unknown-config` check to `unknown-config-options` @NiklasRosenstein Improvement cli: no longer set `PYTHONWARNINGS` environment variable @NiklasRosenstein Improvement shut.model.monorepo: add `Monorepo.get_inter_dependencies_for()` method @NiklasRosenstein Feature cli: add `shut pkg install` command @NiklasRosenstein","title":"0.4.0 (2020-09-04)"},{"location":"changelog/#030-2020-08-29","text":"Type Description PR Issues Author Improvement update Changelog typing for databind @NiklasRosenstein Improvement update paths printed in `shut ... bump` when changelog is released @NiklasRosenstein","title":"0.3.0 (2020-08-29)"},{"location":"changelog/#020-2020-08-29","text":"Type Description PR Issues Author Docs fix README example @NiklasRosenstein","title":"0.2.0 (2020-08-29)"},{"location":"configuration/","text":"Configuration The Slap configuration is read either from a slap.toml file or from the [tool.slap] section in pyproject.toml . Note A slap.toml configuration file is usually only used at the project root in case of mono-repositories for multiple Python projects. The file is often used to disable mono-repository level changelogs ( slap changelog ) configure global tests or commands ( slap run , slap test ) global version references ( slap release ) In this section, we describe the global configuration options that affect Slap directly and are not specifically tied to any single Slap command. Option Type Default Description typed bool | None None Whether the Python code uses type hints. If not set, Slap acts as if this is not known. disable list[str] [] A list of Slap application plugins to disable. enable-only list[str] [] A list of Slap application plugins to enable. Plugin loading All Slap commands are implemented as Class ApplicationPlugin s. By default, Slap will load plugin that is registered under the slap.plugins.application entrypoint, however plugins can be disabled using the disable option or an explicit list of plugins to load and none other can be set with enable-only . Restricting the plugins to load will impact the set of commands available at your disposal through the Slap CLI.","title":"Configuration"},{"location":"configuration/#configuration","text":"The Slap configuration is read either from a slap.toml file or from the [tool.slap] section in pyproject.toml . Note A slap.toml configuration file is usually only used at the project root in case of mono-repositories for multiple Python projects. The file is often used to disable mono-repository level changelogs ( slap changelog ) configure global tests or commands ( slap run , slap test ) global version references ( slap release ) In this section, we describe the global configuration options that affect Slap directly and are not specifically tied to any single Slap command. Option Type Default Description typed bool | None None Whether the Python code uses type hints. If not set, Slap acts as if this is not known. disable list[str] [] A list of Slap application plugins to disable. enable-only list[str] [] A list of Slap application plugins to enable.","title":"Configuration"},{"location":"configuration/#plugin-loading","text":"All Slap commands are implemented as Class ApplicationPlugin s. By default, Slap will load plugin that is registered under the slap.plugins.application entrypoint, however plugins can be disabled using the disable option or an explicit list of plugins to load and none other can be set with enable-only . Restricting the plugins to load will impact the set of commands available at your disposal through the Slap CLI.","title":"Plugin loading"},{"location":"getting-started/","text":"Getting started 1. Installation I recommend installing Slap using Pipx. (Requires Python 3.10 or higher) $ pipx install slap-cli Note : Currently Slap relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). If you use Slap in GitHub Actions, try one of the actions provided by Slap directly: NiklasRosenstein/slap@gha/install/v1 NiklasRosenstein/slap@gha/changelog/update/v1 2. Bootstrapping a new project Slap has an init command that bootstraps project files for you. You can preview what the generated files look like by checking out the init command's documentation . Using this command to start a project from scratch is entirely optional and you may use poetry new or flit init instead, or just write everything from scratch. Currently, it provides only a template for projects using Poetry as the build-backend and the template is rather opinionated (i.e. it tells Slap that the project uses typing and the default test commands use Mypy and Pytest). $ mkdir my_package; cd my_package $ slap init --name my_package write /home/niklas/git/my_package/pyproject.toml write /home/niklas/git/my_package/LICENSE write /home/niklas/git/my_package/readme.md write /home/niklas/git/my_package/.gitignore write /home/niklas/git/my_package/src/my_package/__init__.py write /home/niklas/git/my_package/test/test_import.py write /home/niklas/git/my_package/src/my_package/py.typed Note You can include dots ( . ) in the --name argument value to bootstrap for a PEP 420 implicit namespace package, such as $ slap init --name databind.core . 3. Creating a virtual environment Slap's venv command is a small but convenient tool to create, activate and delete Python virtual environments with the same-named standard library module. In order to use it's activate feature, you need to set up a shell function that shadow's the slap command. For details on how to do this, follow the instructions in the venv command's documentation . $ slap venv -ac 3.10 creating local environment \"3.10\" (using python3.10) activating local environment \"3.10\" (3.10) $ Note Combining the -a,--activate and -c,--create options will create and subsequently activate the environment. Without a -p,--python argument, the Python version is derived from the environment name as \"python\" + name . 4. Install your package into the environment Whether you only just bootstrapped your project files or you cloned an existing Python project, before you can use or test it locally, you need to install it into the virtual environment created in the previous step. The install command will use Pip to install your package and all of its dependencies. You are not required to use Slap's venv command for this step, you can be in any kind of Python virtual environment. Note Using the --link option will symlink your package into the Python environment instead of installing it with Pip, allowing you to make edits to your source code without needing to re-install it after every change. If all your dependencies are already installed, you can also use the slap link command to only do the linking step (this is also convenient if only your project's entry points have changed). (3.10) $ slap install --link ... pip install output here ... symlinking my_package If you are not currently in a virtual environment, Slap will refuse to install unless you pass the --no-venv-check option. This is to protect you from accidentally installing into a global Python installation. (3.10) $ deactivate $ slap install error: refusing to install because you are not in a virtual environment enter a virtual environment or use --no-venv-check Note The slap install command will by default install all run dependencies, as well as development dependencies and any extra dependencies. You can change this behaviour with any of the --only-extras , --extras and --no-dev options. You can also install only dependencies and not your actual project by passing the --no-root option. Check out the install command's documentation for more information. 5. Inspect what Slap knows about your project At times, the info command comes in handy to get a better understanding how Slap sees your project. slap info for Slap's project $ slap info Repository \"/home/runner/work/slap/slap\" vcs: Git(\"/home/runner/work/slap/slap\") host: GithubRepositoryHost(repo='NiklasRosenstein/slap') projects: ['slap-cli'] Project \".\" (id: slap-cli) version: 1.6.3 dist-name: slap-cli packages: slap (src) readme: readme.md handler: PoetryProjectHandler dependencies: run: - 'beautifulsoup4 >=4.10.0,<5.0.0' - 'cleo >=1.0.0a4' - 'databind >=2.0.0,<3.0.0' - 'flit >=3.6.0,<4.0.0' - 'nr.util >=0.8.4,<1.0.0' - 'poetry-core >=1.1.0a6,<2.0.0' - 'ptyprocess >=0.7.0,<0.8.0' - 'pygments >=2.11.2,<3.0.0' - 'PyYAML >=4.0' - 'requests >=2.27.1,<3.0.0' - 'setuptools >=39.1.0' - 'tomli >=2.0.0,<3.0.0' - 'tomlkit >=0.10.1,<0.11.0' - 'tqdm >=4.64.0,<5.0.0' - 'twine >=3.7.0,<4.0.0' dev: - 'black >=22.3.0,<23.0.0' - 'isort >=5.10.1,<6.0.0' - 'mypy >=0.931,<0.932' - 'pytest >=7.1.1,<8.0.0' - 'types-beautifulsoup4 >=4.10.0,<5.0.0' - 'types-pygments >=2.9.16,<3.0.0' - 'types-PyYAML >=6.0.3,<7.0.0' - 'types-requests >=2.27.7,<3.0.0' extra.docs: - mkdocs - mkdocs-material - 'novella ==0.2.3' - 'pydoc-markdown ==4.6.0' 6. Sanity check your project configuration The slap check command provides some feedback on the sanity of your project configuration. The below example is the check output for Slap's own project. $ slap check changelog:validate OK \u2014 All 95 changelogs are valid. general:packages OK \u2014 Detected /home/runner/work/slap/slap/src/slap general:typed OK \u2014 py.typed exists as expected poetry:classifiers OK \u2014 All classifiers are valid. poetry:license OK \u2014 License \"MIT\" is a valid SPDX identifier. poetry:readme OK \u2014 Poetry readme is configured correctly (path: readme.md) poetry:urls RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\" release:source-code-version OK \u2014 Found __version__ in slap release:consistent-versions OK \u2014 All version references are equal Summary: 8 OK, 1 RECOMMENDATION, exit code: 0 Note \ud83d\udc4b Please feel free to create a GitHub Issue if you any suggestions on new types of checks to add or to improve any of the existing checks. 7. Run tests The test command runs the commands configured in your pyproject.toml configuration under the [tool.slap.test] section. It is common to include slap check as one of the tests, as well as static type checking and unit tests. If you bootstrapped your project with Slap, you will already have some test commands set up. Otherwise, consider adding test commands like the below example to your project configuration. Example pyproject.toml [tool.slap.test] check = \"slap check\" mypy = \"mypy src/\" pytest = \"pytest test/\" slap test for Slap's project $ slap test black| All done! \u2728 \ud83c\udf70 \u2728 black| 51 files would be left unchanged. check| changelog:validate OK \u2014 All 95 changelogs are valid. check| general:packages OK \u2014 Detected /home/runner/work/slap/slap/src/slap check| general:typed OK \u2014 py.typed exists as expected check| poetry:classifiers OK \u2014 All classifiers are valid. check| poetry:license OK \u2014 License \"MIT\" is a valid SPDX identifier. check| poetry:readme OK \u2014 Poetry readme is configured correctly (path: readme.md) check| poetry:urls RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\" check| release:source-code-version OK \u2014 Found __version__ in slap check| release:consistent-versions OK \u2014 All version references are equal check| check| Summary: 8 OK, 1 RECOMMENDATION, exit code: 0 mypy| Success: no issues found in 48 source files pytest| ============================= test session starts ============================== pytest| platform linux -- Python 3.10.4, pytest-7.1.1, pluggy-1.0.0 -- /home/runner/work/slap/slap/.venvs/runtime/bin/python pytest| cachedir: .pytest_cache pytest| rootdir: /home/runner/work/slap/slap pytest| collecting ... collected 15 items pytest| pytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__good_input PASSED [ 6%] pytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__bad_input PASSED [ 13%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_pypi_dependency PASSED [ 20%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_git_dependency PASSED [ 26%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_url_dependency PASSED [ 33%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_path_dependency PASSED [ 40%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_config__various_configurations PASSED [ 46%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_empty_string PASSED [ 53%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_wildcard PASSED [ 60%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_pep_508_spec PASSED [ 66%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_semver_spec PASSED [ 73%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__throws_on_invalid_pep_508_spec SKIPPED (Detecting invalid PEP 508 selectors is currently not supported) [ 80%] pytest| tests/slap/python/test_dependency.py::test__PypiDependency__parse PASSED [ 86%] pytest| tests/slap/python/test_environment.py::test__PythonEnvironment__with_current_python_instance PASSED [ 93%] pytest| tests/slap/python/test_pep508.py::test__Pep508Environment__sample_markers PASSED [100%] pytest| pytest| ======================== 14 passed, 1 skipped in 0.45s ========================= test summary: \u2022 black (exit code: 0) \u2022 check (exit code: 0) \u2022 isort (exit code: 0) \u2022 mypy (exit code: 0) \u2022 pytest (exit code: 0) 8. Run commands Inspired by npm run and yarn run , slap run is likewise a simple tool to run aliased commands in your project configuration. For example, Slap uses the following aliases that can be run with slap run docs:dev and slap run docs:build , respectively. [tool.slap.run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\" 9. Add a changelog entry Slap provides a format for storing changelogs in a structure way. You can add entries to the changelog using the slap changelog add command. A changelog entry contains at a minimum contains a type, description and one or more authors. An entry may also be associated with one or more issues and/or a Pull Request (stored as URLs). Note If your repository is hosted on GitHub, you can use issue and PR numbers and they will be automatically converted to full URLs. If you don't supply an -a,--author option, your Git email will be used. In case of a GitHub repository, that email address will be converted to a Git username instead. Example $ slap changelog add -t improvement -cd 'Add this cool new feature' --issue 52 id = \"9fad16b6-9da7-49a1-9c4d-63dbf6c8eae9\" type = \"improvement\" description = \"Add this cool new feature\" author = \"@NiklasRosenstein\" issues = [ \"https://github.com/NiklasRosenstein/slap/issues/52\", ] [develop 1a131e2] improvement: Add this cool new feature 1 file changed, 8 insertions(+) create mode 100644 .changelog/_unreleased.toml Tip The slap changelog update-pr command can be used to add the pr URL to all changelog entries added between two Git revisions. If used from a CI job, you can automate the addition of the pr field when a PR is opened instead of manually having to add the URL after the PR was created. If your repository is hosted on GitHub, all you need to do is set up the NiklasRosenstein/slap@gha/changelog/update/v1 action. 10. Create a release Slap's release command updates version numbers in you code base and can also commit the changes, tag them and push them to the Git remote. It can also be used to validate that all version references in your project are the same. Supported version locations Slap supports a few places where the version number of your project is hardcoded by default. You can always let Slap know about any other places by configuring additional version references (see the release's commands Configuration documentation ). The version in your pyproject.toml (for Flit or Poetry) or setup.cfg (for Setuptools) The __version__ in your Python source code Dependencies on other packages in the same mono-repository (aka. inter-dependencies) The release command will also automatically update the currently staged changelog entries in .changelog/_unreleased.toml by inserting the current date as the release date and renaming the file to .changelog/{version}.toml . Example To create a new release, pass the version number or a rule name instead. $ slap release --tag --push patch bumping 2 version references to 1.6.4 pyproject.toml: 1.6.3 \u2192 1.6.4 # 'version = \"1.6.3\"' src/slap/__init__.py: 1.6.3 \u2192 1.6.4 # '__version__ = \"1.6.3\"' tagging 1.6.4 pushing develop, 1.6.4 to origin Tip You can also use the --validate flag to validate and show all known version number references: $ slap release --validate versions are ok pyproject.toml: 1.6.3 # 'version = \"1.6.3\"' src/slap/__init__.py: 1.6.3 # '__version__ = \"1.6.3\"' 11. Publish to PyPI The publish command builds distributions using your configured build backend and publishes them to a Python package index using Twine . For mono repositories, the command will build all projects before publishing them. $ slap publish Build slap-cli slap-cli-1.4.0.tar.gz slap_cli-1.4.0-py3-none-any.whl Publishing Note It is recommended that you perform this step only after you created a new release and all your CI checks have passed. Even better, you can configure your CI to publish the package for your once all checks have passed. You can pass the credentials to the -u,--username and -p,--password options just as with the Twine CLI.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#1-installation","text":"I recommend installing Slap using Pipx. (Requires Python 3.10 or higher) $ pipx install slap-cli Note : Currently Slap relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). If you use Slap in GitHub Actions, try one of the actions provided by Slap directly: NiklasRosenstein/slap@gha/install/v1 NiklasRosenstein/slap@gha/changelog/update/v1","title":"1. Installation"},{"location":"getting-started/#2-bootstrapping-a-new-project","text":"Slap has an init command that bootstraps project files for you. You can preview what the generated files look like by checking out the init command's documentation . Using this command to start a project from scratch is entirely optional and you may use poetry new or flit init instead, or just write everything from scratch. Currently, it provides only a template for projects using Poetry as the build-backend and the template is rather opinionated (i.e. it tells Slap that the project uses typing and the default test commands use Mypy and Pytest). $ mkdir my_package; cd my_package $ slap init --name my_package write /home/niklas/git/my_package/pyproject.toml write /home/niklas/git/my_package/LICENSE write /home/niklas/git/my_package/readme.md write /home/niklas/git/my_package/.gitignore write /home/niklas/git/my_package/src/my_package/__init__.py write /home/niklas/git/my_package/test/test_import.py write /home/niklas/git/my_package/src/my_package/py.typed Note You can include dots ( . ) in the --name argument value to bootstrap for a PEP 420 implicit namespace package, such as $ slap init --name databind.core .","title":"2. Bootstrapping a new project"},{"location":"getting-started/#3-creating-a-virtual-environment","text":"Slap's venv command is a small but convenient tool to create, activate and delete Python virtual environments with the same-named standard library module. In order to use it's activate feature, you need to set up a shell function that shadow's the slap command. For details on how to do this, follow the instructions in the venv command's documentation . $ slap venv -ac 3.10 creating local environment \"3.10\" (using python3.10) activating local environment \"3.10\" (3.10) $ Note Combining the -a,--activate and -c,--create options will create and subsequently activate the environment. Without a -p,--python argument, the Python version is derived from the environment name as \"python\" + name .","title":"3. Creating a virtual environment"},{"location":"getting-started/#4-install-your-package-into-the-environment","text":"Whether you only just bootstrapped your project files or you cloned an existing Python project, before you can use or test it locally, you need to install it into the virtual environment created in the previous step. The install command will use Pip to install your package and all of its dependencies. You are not required to use Slap's venv command for this step, you can be in any kind of Python virtual environment. Note Using the --link option will symlink your package into the Python environment instead of installing it with Pip, allowing you to make edits to your source code without needing to re-install it after every change. If all your dependencies are already installed, you can also use the slap link command to only do the linking step (this is also convenient if only your project's entry points have changed). (3.10) $ slap install --link ... pip install output here ... symlinking my_package If you are not currently in a virtual environment, Slap will refuse to install unless you pass the --no-venv-check option. This is to protect you from accidentally installing into a global Python installation. (3.10) $ deactivate $ slap install error: refusing to install because you are not in a virtual environment enter a virtual environment or use --no-venv-check Note The slap install command will by default install all run dependencies, as well as development dependencies and any extra dependencies. You can change this behaviour with any of the --only-extras , --extras and --no-dev options. You can also install only dependencies and not your actual project by passing the --no-root option. Check out the install command's documentation for more information.","title":"4. Install your package into the environment"},{"location":"getting-started/#5-inspect-what-slap-knows-about-your-project","text":"At times, the info command comes in handy to get a better understanding how Slap sees your project. slap info for Slap's project $ slap info Repository \"/home/runner/work/slap/slap\" vcs: Git(\"/home/runner/work/slap/slap\") host: GithubRepositoryHost(repo='NiklasRosenstein/slap') projects: ['slap-cli'] Project \".\" (id: slap-cli) version: 1.6.3 dist-name: slap-cli packages: slap (src) readme: readme.md handler: PoetryProjectHandler dependencies: run: - 'beautifulsoup4 >=4.10.0,<5.0.0' - 'cleo >=1.0.0a4' - 'databind >=2.0.0,<3.0.0' - 'flit >=3.6.0,<4.0.0' - 'nr.util >=0.8.4,<1.0.0' - 'poetry-core >=1.1.0a6,<2.0.0' - 'ptyprocess >=0.7.0,<0.8.0' - 'pygments >=2.11.2,<3.0.0' - 'PyYAML >=4.0' - 'requests >=2.27.1,<3.0.0' - 'setuptools >=39.1.0' - 'tomli >=2.0.0,<3.0.0' - 'tomlkit >=0.10.1,<0.11.0' - 'tqdm >=4.64.0,<5.0.0' - 'twine >=3.7.0,<4.0.0' dev: - 'black >=22.3.0,<23.0.0' - 'isort >=5.10.1,<6.0.0' - 'mypy >=0.931,<0.932' - 'pytest >=7.1.1,<8.0.0' - 'types-beautifulsoup4 >=4.10.0,<5.0.0' - 'types-pygments >=2.9.16,<3.0.0' - 'types-PyYAML >=6.0.3,<7.0.0' - 'types-requests >=2.27.7,<3.0.0' extra.docs: - mkdocs - mkdocs-material - 'novella ==0.2.3' - 'pydoc-markdown ==4.6.0'","title":"5. Inspect what Slap knows about your project"},{"location":"getting-started/#6-sanity-check-your-project-configuration","text":"The slap check command provides some feedback on the sanity of your project configuration. The below example is the check output for Slap's own project. $ slap check changelog:validate OK \u2014 All 95 changelogs are valid. general:packages OK \u2014 Detected /home/runner/work/slap/slap/src/slap general:typed OK \u2014 py.typed exists as expected poetry:classifiers OK \u2014 All classifiers are valid. poetry:license OK \u2014 License \"MIT\" is a valid SPDX identifier. poetry:readme OK \u2014 Poetry readme is configured correctly (path: readme.md) poetry:urls RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\" release:source-code-version OK \u2014 Found __version__ in slap release:consistent-versions OK \u2014 All version references are equal Summary: 8 OK, 1 RECOMMENDATION, exit code: 0 Note \ud83d\udc4b Please feel free to create a GitHub Issue if you any suggestions on new types of checks to add or to improve any of the existing checks.","title":"6. Sanity check your project configuration"},{"location":"getting-started/#7-run-tests","text":"The test command runs the commands configured in your pyproject.toml configuration under the [tool.slap.test] section. It is common to include slap check as one of the tests, as well as static type checking and unit tests. If you bootstrapped your project with Slap, you will already have some test commands set up. Otherwise, consider adding test commands like the below example to your project configuration. Example pyproject.toml [tool.slap.test] check = \"slap check\" mypy = \"mypy src/\" pytest = \"pytest test/\" slap test for Slap's project $ slap test black| All done! \u2728 \ud83c\udf70 \u2728 black| 51 files would be left unchanged. check| changelog:validate OK \u2014 All 95 changelogs are valid. check| general:packages OK \u2014 Detected /home/runner/work/slap/slap/src/slap check| general:typed OK \u2014 py.typed exists as expected check| poetry:classifiers OK \u2014 All classifiers are valid. check| poetry:license OK \u2014 License \"MIT\" is a valid SPDX identifier. check| poetry:readme OK \u2014 Poetry readme is configured correctly (path: readme.md) check| poetry:urls RECOMMENDATION \u2014 Please configure the following URLs: \"Bug Tracker\" check| release:source-code-version OK \u2014 Found __version__ in slap check| release:consistent-versions OK \u2014 All version references are equal check| check| Summary: 8 OK, 1 RECOMMENDATION, exit code: 0 mypy| Success: no issues found in 48 source files pytest| ============================= test session starts ============================== pytest| platform linux -- Python 3.10.4, pytest-7.1.1, pluggy-1.0.0 -- /home/runner/work/slap/slap/.venvs/runtime/bin/python pytest| cachedir: .pytest_cache pytest| rootdir: /home/runner/work/slap/slap pytest| collecting ... collected 15 items pytest| pytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__good_input PASSED [ 6%] pytest| tests/slap/python/test_dependency.py::test__split_package_name_with_extras__bad_input PASSED [ 13%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_pypi_dependency PASSED [ 20%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_git_dependency PASSED [ 26%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_url_dependency PASSED [ 33%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_string__can_parse_path_dependency PASSED [ 40%] pytest| tests/slap/python/test_dependency.py::test__parse_dependency_config__various_configurations PASSED [ 46%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_empty_string PASSED [ 53%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_wildcard PASSED [ 60%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_pep_508_spec PASSED [ 66%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__can_take_semver_spec PASSED [ 73%] pytest| tests/slap/python/test_dependency.py::test__VersionSpec__throws_on_invalid_pep_508_spec SKIPPED (Detecting invalid PEP 508 selectors is currently not supported) [ 80%] pytest| tests/slap/python/test_dependency.py::test__PypiDependency__parse PASSED [ 86%] pytest| tests/slap/python/test_environment.py::test__PythonEnvironment__with_current_python_instance PASSED [ 93%] pytest| tests/slap/python/test_pep508.py::test__Pep508Environment__sample_markers PASSED [100%] pytest| pytest| ======================== 14 passed, 1 skipped in 0.45s ========================= test summary: \u2022 black (exit code: 0) \u2022 check (exit code: 0) \u2022 isort (exit code: 0) \u2022 mypy (exit code: 0) \u2022 pytest (exit code: 0)","title":"7. Run tests"},{"location":"getting-started/#8-run-commands","text":"Inspired by npm run and yarn run , slap run is likewise a simple tool to run aliased commands in your project configuration. For example, Slap uses the following aliases that can be run with slap run docs:dev and slap run docs:build , respectively. [tool.slap.run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\"","title":"8. Run commands"},{"location":"getting-started/#9-add-a-changelog-entry","text":"Slap provides a format for storing changelogs in a structure way. You can add entries to the changelog using the slap changelog add command. A changelog entry contains at a minimum contains a type, description and one or more authors. An entry may also be associated with one or more issues and/or a Pull Request (stored as URLs). Note If your repository is hosted on GitHub, you can use issue and PR numbers and they will be automatically converted to full URLs. If you don't supply an -a,--author option, your Git email will be used. In case of a GitHub repository, that email address will be converted to a Git username instead. Example $ slap changelog add -t improvement -cd 'Add this cool new feature' --issue 52 id = \"9fad16b6-9da7-49a1-9c4d-63dbf6c8eae9\" type = \"improvement\" description = \"Add this cool new feature\" author = \"@NiklasRosenstein\" issues = [ \"https://github.com/NiklasRosenstein/slap/issues/52\", ] [develop 1a131e2] improvement: Add this cool new feature 1 file changed, 8 insertions(+) create mode 100644 .changelog/_unreleased.toml Tip The slap changelog update-pr command can be used to add the pr URL to all changelog entries added between two Git revisions. If used from a CI job, you can automate the addition of the pr field when a PR is opened instead of manually having to add the URL after the PR was created. If your repository is hosted on GitHub, all you need to do is set up the NiklasRosenstein/slap@gha/changelog/update/v1 action.","title":"9. Add a changelog entry"},{"location":"getting-started/#10-create-a-release","text":"Slap's release command updates version numbers in you code base and can also commit the changes, tag them and push them to the Git remote. It can also be used to validate that all version references in your project are the same. Supported version locations Slap supports a few places where the version number of your project is hardcoded by default. You can always let Slap know about any other places by configuring additional version references (see the release's commands Configuration documentation ). The version in your pyproject.toml (for Flit or Poetry) or setup.cfg (for Setuptools) The __version__ in your Python source code Dependencies on other packages in the same mono-repository (aka. inter-dependencies) The release command will also automatically update the currently staged changelog entries in .changelog/_unreleased.toml by inserting the current date as the release date and renaming the file to .changelog/{version}.toml . Example To create a new release, pass the version number or a rule name instead. $ slap release --tag --push patch bumping 2 version references to 1.6.4 pyproject.toml: 1.6.3 \u2192 1.6.4 # 'version = \"1.6.3\"' src/slap/__init__.py: 1.6.3 \u2192 1.6.4 # '__version__ = \"1.6.3\"' tagging 1.6.4 pushing develop, 1.6.4 to origin Tip You can also use the --validate flag to validate and show all known version number references: $ slap release --validate versions are ok pyproject.toml: 1.6.3 # 'version = \"1.6.3\"' src/slap/__init__.py: 1.6.3 # '__version__ = \"1.6.3\"'","title":"10. Create a release"},{"location":"getting-started/#11-publish-to-pypi","text":"The publish command builds distributions using your configured build backend and publishes them to a Python package index using Twine . For mono repositories, the command will build all projects before publishing them. $ slap publish Build slap-cli slap-cli-1.4.0.tar.gz slap_cli-1.4.0-py3-none-any.whl Publishing Note It is recommended that you perform this step only after you created a new release and all your CI checks have passed. Even better, you can configure your CI to publish the package for your once all checks have passed. You can pass the credentials to the -u,--username and -p,--password options just as with the Twine CLI.","title":"11. Publish to PyPI"},{"location":"glossary/","text":"Glossary Project At it's core, any directory can be a \"project\", but most projects would have a pyproject.toml or slap.toml configuration file. Most commonly, it will have a pyproject.toml file that contains the Slap configuration under the [tool.slap] namespace. Many concepts in Slap are attached directly to a project. For example if the project has a pyproject.toml , it is considered a Python project, and Python projects can have packages that can be installed, built or published to PyPI or another repository. A project with a slap.toml configuration file (or with no configuration file) is usually used as the parent project for two or more sub-projects. This configuration represents a mono-repository where multiple projects are stored and versioned together. Slap understands most details about a project through a Class ProjectHandlerPlugin . It comes with a default implementation that supports Poetry and Flit Python projects. Repository A repository is a directory that contains one or more projects. For singular projects, the repository directory is the same as the project directory. For a mono-repository configuration, any directory that contains multiple projects is considered the repository directory (it usually contains a slap.toml configuration file). Note that the repository directory is also considered a project directory, but if it isn't also a Python project (i.e. if it has a pyproject.toml instead of a slap.toml ) it will be ignored for most Slap commands. Single project Mono repository my_pacakge/ -> Repository / Project \"my_package\" pyproject.toml readme.md src/ tests/ / -> Repository / Project \"$\" my_first_package/ -> Project \"my_first_package\" pyproject.toml readme.md src/ tests/ my_second_package/ -> Project \"my_second_package\" pyproject.toml readme.md src/ tests/ slap.toml Slap understands most details about a repository through a Class RepositoryHandlerPlugin . It comes with a default implementation that supports Git repositories and GitHub.","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#project","text":"At it's core, any directory can be a \"project\", but most projects would have a pyproject.toml or slap.toml configuration file. Most commonly, it will have a pyproject.toml file that contains the Slap configuration under the [tool.slap] namespace. Many concepts in Slap are attached directly to a project. For example if the project has a pyproject.toml , it is considered a Python project, and Python projects can have packages that can be installed, built or published to PyPI or another repository. A project with a slap.toml configuration file (or with no configuration file) is usually used as the parent project for two or more sub-projects. This configuration represents a mono-repository where multiple projects are stored and versioned together. Slap understands most details about a project through a Class ProjectHandlerPlugin . It comes with a default implementation that supports Poetry and Flit Python projects.","title":"Project"},{"location":"glossary/#repository","text":"A repository is a directory that contains one or more projects. For singular projects, the repository directory is the same as the project directory. For a mono-repository configuration, any directory that contains multiple projects is considered the repository directory (it usually contains a slap.toml configuration file). Note that the repository directory is also considered a project directory, but if it isn't also a Python project (i.e. if it has a pyproject.toml instead of a slap.toml ) it will be ignored for most Slap commands. Single project Mono repository my_pacakge/ -> Repository / Project \"my_package\" pyproject.toml readme.md src/ tests/ / -> Repository / Project \"$\" my_first_package/ -> Project \"my_first_package\" pyproject.toml readme.md src/ tests/ my_second_package/ -> Project \"my_second_package\" pyproject.toml readme.md src/ tests/ slap.toml Slap understands most details about a repository through a Class RepositoryHandlerPlugin . It comes with a default implementation that supports Git repositories and GitHub.","title":"Repository"},{"location":"api/documentation/","text":"API Documentation Class Application class Application () [view_source] The application object is the main hub for command-line interactions. It is responsible for managing the project that is the main subject of the command-line invokation (or multiple of such), provide the cleo command-line application that ApplicationPlugins can register commands to, etc. config The application configuration loaded once via get_application_configuration() . cleo The cleo application to which new commands can be registered via ApplicationPlugins . repository @property def repository () -> Repository [view_source] Return the Slap repository that is the subject of the current application. There may be command plugins that do not require the repository to function, so this property creates the repository lazily. configurations def configurations () -> list [ Configuration ] [view_source] Return a list of all configuration objects, i.e. all projects and eventually the {@link pydoc:slap.repository.Repository}, unless one project is from the same directory as the repository. load_plugins def load_plugins () -> None [view_source] Loads all application plugins (see ApplicationPlugin ) and activates them. By default, all plugins available in the slap.application.ApplicationPlugin entry point group are loaded. This behaviour can be modified by setting either the [tool.slap.plugins.disable] or [tool.slap.plugins.enable] configuration option (without the tool.slap prefix in case of a slap.toml configuration file). The default plugins delivered immediately with Slap are enabled by default unless disabled explicitly with the disable option. run def run () -> None [view_source] Loads and activates application plugins and then invokes the CLI. Class ApplicationPlugin class ApplicationPlugin ( t . Generic [ T ], abc . ABC ) [view_source] A plugin that is activated on application load, usually used to register additional CLI commands. load_configuration @abc . abstractmethod def load_configuration ( app : Application ) -> T [view_source] Load the configuration of the plugin. Usually, plugins will want to read the configuration from the Slap configuration, which is either loaded from pyproject.toml or slap.toml . Use Application.raw_config to access the Slap configuration. activate @abc . abstractmethod def activate ( app : Application , config : T ) -> None [view_source] Activate the plugin. Register a Command to Application.cleo or another type of plugin to the Application.plugins registry. Class RepositoryHandlerPlugin class RepositoryHandlerPlugin ( abc . ABC ) [view_source] A plugin to provide data and operations on a repository level. matches_repository @abc . abstractmethod def matches_repository ( repository : Repository ) -> bool [view_source] Return True if the handler is able to provide data for the given project. get_vcs @abc . abstractmethod def get_vcs ( repository : Repository ) -> Vcs | None [view_source] Return the version control system that the repository is managed with. get_repository_host @abc . abstractmethod def get_repository_host ( repository : Repository ) -> RepositoryHost | None [view_source] Return the interface for interacting with the VCS hosting service. get_projects @abc . abstractmethod def get_projects ( repository : Repository ) -> list [ Project ] [view_source] Return the projects of this repository. Class ProjectHandlerPlugin class ProjectHandlerPlugin ( abc . ABC ) [view_source] A plugin that implements the core functionality of a project. Project handlers are intermediate layers between the Slap tooling and the actual project configuration, allowing different types of configurations to be adapted and used with Slap. matches_project @abc . abstractmethod def matches_project ( project : Project ) -> bool [view_source] Return True if the handler is able to provide data for the given project. get_dist_name @abc . abstractmethod def get_dist_name ( project : Project ) -> str | None [view_source] Return the distribution name for the project. get_readme @abc . abstractmethod def get_readme ( project : Project ) -> str | None [view_source] Return the readme file configured for the project. get_packages @abc . abstractmethod def get_packages ( project : Project ) -> list [ Package ] | None [view_source] Return a list of packages for the project. Return None to indicate that the project is expected to not contain any packages. get_dependencies @abc . abstractmethod def get_dependencies ( project : Project ) -> Dependencies [view_source] Return the dependencies of the project. get_version def get_version ( project : Project ) -> str | None [view_source] Return the main project version string. get_version_refs def get_version_refs ( project : Project ) -> list [ VersionRef ] [view_source] Allows the project handler to return additional version refs. Usually returns the version reference in pyproject.toml . add_dependency def add_dependency ( project : Project , dependency : Dependency , where : str ) -> None [view_source] Add a dependency to the project configuration. Arguments : project - The project to update. selector - The dependency to add. where - The location of where to add the dependency. This is either 'run' , 'dev' , or otherwise refers to the name of an extra requirement. Raises NotImplementedError: If the operation is not supported by the project handler. Class CheckPlugin class CheckPlugin ( abc . ABC ) [view_source] This plugin type can be implemented to add custom checks to the slap check command. Note that checks will be grouped and their names prefixed with the plugin name, so that name does not need to be included in the name of the returned checks. Class ReleasePlugin class ReleasePlugin ( abc . ABC ) [view_source] This plugin type provides additional references to the project's version number allowing slap release to update these references to a new version number. get_version_refs def get_version_refs ( project : Project ) -> list [ VersionRef ] [view_source] Return a list of occurrences of the project version. create_release def create_release ( repository : Repository , target_version : str , dry : bool ) -> t . Sequence [ Path ] [view_source] Gives the plugin a chance to perform an arbitrary action after all version references have been bumped, being informed of the target version. If dry is True , the plugin should only act as if it was performing its usual actions but not commit the changes to disk. It should return the list of files that it modifies or would have modified. Class VersionIncrementingRulePlugin class VersionIncrementingRulePlugin ( abc . ABC ) [view_source] This plugin type can be implemented to provide rules accepted by the slap release <rule> command to \"bump\" an existing version number to another. The builtin rules implemented in slap.ext.version_incrementing_rules . Class ChangelogUpdateAutomationPlugin class ChangelogUpdateAutomationPlugin ( abc . ABC ) [view_source] This plugin type can be used with the slap changelog update-pr -use <plugin_name> option. It provides all the details derivable from the environment (e.g. environment variables available from CI builds) that can be used to detect which changelog entries have been added in a pull request, the pull request URL and the means to publish the changes back to the original repository.","title":"API Documentation"},{"location":"api/documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"api/documentation/#class-application","text":"class Application () [view_source] The application object is the main hub for command-line interactions. It is responsible for managing the project that is the main subject of the command-line invokation (or multiple of such), provide the cleo command-line application that ApplicationPlugins can register commands to, etc.","title":"Class Application"},{"location":"api/documentation/#config","text":"The application configuration loaded once via get_application_configuration() .","title":"config"},{"location":"api/documentation/#cleo","text":"The cleo application to which new commands can be registered via ApplicationPlugins .","title":"cleo"},{"location":"api/documentation/#repository","text":"@property def repository () -> Repository [view_source] Return the Slap repository that is the subject of the current application. There may be command plugins that do not require the repository to function, so this property creates the repository lazily.","title":"repository"},{"location":"api/documentation/#configurations","text":"def configurations () -> list [ Configuration ] [view_source] Return a list of all configuration objects, i.e. all projects and eventually the {@link pydoc:slap.repository.Repository}, unless one project is from the same directory as the repository.","title":"configurations"},{"location":"api/documentation/#load_plugins","text":"def load_plugins () -> None [view_source] Loads all application plugins (see ApplicationPlugin ) and activates them. By default, all plugins available in the slap.application.ApplicationPlugin entry point group are loaded. This behaviour can be modified by setting either the [tool.slap.plugins.disable] or [tool.slap.plugins.enable] configuration option (without the tool.slap prefix in case of a slap.toml configuration file). The default plugins delivered immediately with Slap are enabled by default unless disabled explicitly with the disable option.","title":"load_plugins"},{"location":"api/documentation/#run","text":"def run () -> None [view_source] Loads and activates application plugins and then invokes the CLI.","title":"run"},{"location":"api/documentation/#class-applicationplugin","text":"class ApplicationPlugin ( t . Generic [ T ], abc . ABC ) [view_source] A plugin that is activated on application load, usually used to register additional CLI commands.","title":"Class ApplicationPlugin"},{"location":"api/documentation/#load_configuration","text":"@abc . abstractmethod def load_configuration ( app : Application ) -> T [view_source] Load the configuration of the plugin. Usually, plugins will want to read the configuration from the Slap configuration, which is either loaded from pyproject.toml or slap.toml . Use Application.raw_config to access the Slap configuration.","title":"load_configuration"},{"location":"api/documentation/#activate","text":"@abc . abstractmethod def activate ( app : Application , config : T ) -> None [view_source] Activate the plugin. Register a Command to Application.cleo or another type of plugin to the Application.plugins registry.","title":"activate"},{"location":"api/documentation/#class-repositoryhandlerplugin","text":"class RepositoryHandlerPlugin ( abc . ABC ) [view_source] A plugin to provide data and operations on a repository level.","title":"Class RepositoryHandlerPlugin"},{"location":"api/documentation/#matches_repository","text":"@abc . abstractmethod def matches_repository ( repository : Repository ) -> bool [view_source] Return True if the handler is able to provide data for the given project.","title":"matches_repository"},{"location":"api/documentation/#get_vcs","text":"@abc . abstractmethod def get_vcs ( repository : Repository ) -> Vcs | None [view_source] Return the version control system that the repository is managed with.","title":"get_vcs"},{"location":"api/documentation/#get_repository_host","text":"@abc . abstractmethod def get_repository_host ( repository : Repository ) -> RepositoryHost | None [view_source] Return the interface for interacting with the VCS hosting service.","title":"get_repository_host"},{"location":"api/documentation/#get_projects","text":"@abc . abstractmethod def get_projects ( repository : Repository ) -> list [ Project ] [view_source] Return the projects of this repository.","title":"get_projects"},{"location":"api/documentation/#class-projecthandlerplugin","text":"class ProjectHandlerPlugin ( abc . ABC ) [view_source] A plugin that implements the core functionality of a project. Project handlers are intermediate layers between the Slap tooling and the actual project configuration, allowing different types of configurations to be adapted and used with Slap.","title":"Class ProjectHandlerPlugin"},{"location":"api/documentation/#matches_project","text":"@abc . abstractmethod def matches_project ( project : Project ) -> bool [view_source] Return True if the handler is able to provide data for the given project.","title":"matches_project"},{"location":"api/documentation/#get_dist_name","text":"@abc . abstractmethod def get_dist_name ( project : Project ) -> str | None [view_source] Return the distribution name for the project.","title":"get_dist_name"},{"location":"api/documentation/#get_readme","text":"@abc . abstractmethod def get_readme ( project : Project ) -> str | None [view_source] Return the readme file configured for the project.","title":"get_readme"},{"location":"api/documentation/#get_packages","text":"@abc . abstractmethod def get_packages ( project : Project ) -> list [ Package ] | None [view_source] Return a list of packages for the project. Return None to indicate that the project is expected to not contain any packages.","title":"get_packages"},{"location":"api/documentation/#get_dependencies","text":"@abc . abstractmethod def get_dependencies ( project : Project ) -> Dependencies [view_source] Return the dependencies of the project.","title":"get_dependencies"},{"location":"api/documentation/#get_version","text":"def get_version ( project : Project ) -> str | None [view_source] Return the main project version string.","title":"get_version"},{"location":"api/documentation/#get_version_refs","text":"def get_version_refs ( project : Project ) -> list [ VersionRef ] [view_source] Allows the project handler to return additional version refs. Usually returns the version reference in pyproject.toml .","title":"get_version_refs"},{"location":"api/documentation/#add_dependency","text":"def add_dependency ( project : Project , dependency : Dependency , where : str ) -> None [view_source] Add a dependency to the project configuration. Arguments : project - The project to update. selector - The dependency to add. where - The location of where to add the dependency. This is either 'run' , 'dev' , or otherwise refers to the name of an extra requirement. Raises NotImplementedError: If the operation is not supported by the project handler.","title":"add_dependency"},{"location":"api/documentation/#class-checkplugin","text":"class CheckPlugin ( abc . ABC ) [view_source] This plugin type can be implemented to add custom checks to the slap check command. Note that checks will be grouped and their names prefixed with the plugin name, so that name does not need to be included in the name of the returned checks.","title":"Class CheckPlugin"},{"location":"api/documentation/#class-releaseplugin","text":"class ReleasePlugin ( abc . ABC ) [view_source] This plugin type provides additional references to the project's version number allowing slap release to update these references to a new version number.","title":"Class ReleasePlugin"},{"location":"api/documentation/#get_version_refs_1","text":"def get_version_refs ( project : Project ) -> list [ VersionRef ] [view_source] Return a list of occurrences of the project version.","title":"get_version_refs"},{"location":"api/documentation/#create_release","text":"def create_release ( repository : Repository , target_version : str , dry : bool ) -> t . Sequence [ Path ] [view_source] Gives the plugin a chance to perform an arbitrary action after all version references have been bumped, being informed of the target version. If dry is True , the plugin should only act as if it was performing its usual actions but not commit the changes to disk. It should return the list of files that it modifies or would have modified.","title":"create_release"},{"location":"api/documentation/#class-versionincrementingruleplugin","text":"class VersionIncrementingRulePlugin ( abc . ABC ) [view_source] This plugin type can be implemented to provide rules accepted by the slap release <rule> command to \"bump\" an existing version number to another. The builtin rules implemented in slap.ext.version_incrementing_rules .","title":"Class VersionIncrementingRulePlugin"},{"location":"api/documentation/#class-changelogupdateautomationplugin","text":"class ChangelogUpdateAutomationPlugin ( abc . ABC ) [view_source] This plugin type can be used with the slap changelog update-pr -use <plugin_name> option. It provides all the details derivable from the environment (e.g. environment variables available from CI builds) that can be used to detect which changelog entries have been added in a pull request, the pull request URL and the means to publish the changes back to the original repository.","title":"Class ChangelogUpdateAutomationPlugin"},{"location":"api/plugins/","text":"Plugins A lot of Slap's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Slap further. Types of plugins Class ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. Class CheckPlugin \u2013 The type of plugin used by slap check . Class ReleasePlugin \u2013 The type of plugin used by slap release to detect version references.","title":"Plugins"},{"location":"api/plugins/#plugins","text":"A lot of Slap's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Slap further.","title":"Plugins"},{"location":"api/plugins/#types-of-plugins","text":"Class ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. Class CheckPlugin \u2013 The type of plugin used by slap check . Class ReleasePlugin \u2013 The type of plugin used by slap release to detect version references.","title":"Types of plugins"},{"location":"commands/add/","text":"slap add This command is venv aware. This command adds one or more Python packages to the dependencies defined in pyproject.toml . If the packages are not already installed, they will be installed into the current Python environment using Pip. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: add [options] [--] <packages>... Arguments: packages One or more packages to install with Pip and add to the project configuration. Options: -d, --dev Add as development dependencies. -e, --extra=EXTRA Add as extra dependencies for the specified extra name. --no-install Do not actually install the dependencies with Pip. Note that if the dependency is not already installed and no version selector is specified with the package name, it will fall back to a match-all version range (`*`). --source=SOURCE Specify the source from which the package should be installed. --upgrade Upgrade dependencies that are already installed and declared in the project. If the dependency is already declared, the --source option can be skipped as it will be inherited from the declaration. --no-venv-check Do not check if the target Python environment is a virtual environment. -p, --python=PYTHON The Python executable to install to. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command. Usage example The below example installs httpx using Pip and adds the dependency to pyproject.toml . If your project is using Poetry as the build backend, it will add httpx = \"^0.22.0\" wheras if it is using Flit, the command will add instead 'httpx (>=0.22.0,<0.23.0)' . $ slap add httpx Installing httpx Adding httpx ^0.22.0 Note Slap uses pkg_resources.get_distribution() to retrieve the version of the package that got installed, or was already installed, and assumes that the package is available in the target Python environment. Support matrix Build system Supported Flit \u2705 Poetry \u2705 Setuptools \u274c (dependencies defined in setup.cfg )","title":"slap add"},{"location":"commands/add/#slap-add","text":"This command is venv aware. This command adds one or more Python packages to the dependencies defined in pyproject.toml . If the packages are not already installed, they will be installed into the current Python environment using Pip. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: add [options] [--] <packages>... Arguments: packages One or more packages to install with Pip and add to the project configuration. Options: -d, --dev Add as development dependencies. -e, --extra=EXTRA Add as extra dependencies for the specified extra name. --no-install Do not actually install the dependencies with Pip. Note that if the dependency is not already installed and no version selector is specified with the package name, it will fall back to a match-all version range (`*`). --source=SOURCE Specify the source from which the package should be installed. --upgrade Upgrade dependencies that are already installed and declared in the project. If the dependency is already declared, the --source option can be skipped as it will be inherited from the declaration. --no-venv-check Do not check if the target Python environment is a virtual environment. -p, --python=PYTHON The Python executable to install to. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command.","title":"slap add"},{"location":"commands/add/#usage-example","text":"The below example installs httpx using Pip and adds the dependency to pyproject.toml . If your project is using Poetry as the build backend, it will add httpx = \"^0.22.0\" wheras if it is using Flit, the command will add instead 'httpx (>=0.22.0,<0.23.0)' . $ slap add httpx Installing httpx Adding httpx ^0.22.0 Note Slap uses pkg_resources.get_distribution() to retrieve the version of the package that got installed, or was already installed, and assumes that the package is available in the target Python environment.","title":"Usage example"},{"location":"commands/add/#support-matrix","text":"Build system Supported Flit \u2705 Poetry \u2705 Setuptools \u274c (dependencies defined in setup.cfg )","title":"Support matrix"},{"location":"commands/changelog/","text":"slap changelog This command provides four sub-commands that allow you to interact with Slap's structured changelog format: add , convert , format and update-pr . Configuration Option scope: [tool.slap.changelog] or [changelog] Option Type Default Description enabled bool True Whether the changelog feature is enabled for the directory in which the option is configured. This is useful to disable on the root of a mono-repository that contains multiple Python projects if one wants to prevent accidentally add changelog entries to the root directory. directory str .changelog/ The directory in which the changelogs are stored. valid-types list[str] [\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types. ChangelogConfig documentation ## Class ChangelogConfig @ExtraKeys ( True ) @dataclasses . dataclass class ChangelogConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/changelog.py#L41) #### enabled Whether the changelog feature is enabled. This acts locally for the current project and not globally. Particularly useful for monorepos that have multiple subprojects each with their changelog directories to prevent accidentally creating changelogs in the root directory. When not set, it will be considered `True` if the current project is a Python project. #### directory The directory in which changelogs are stored. #### valid\\_types The list of valid types that can be used in changelog entries. The default types are `DEFAULT_CHANGELOG_TYPES`. Subcommands slap changelog add Add an entry to the unreleased changelog. Given the -c,--commit option, it will also create a Git commit with the same message as the entry description, prefixed by the changelog type. If used in a sub-directory of a project, the commit message is prefixed by the sub-directory. Example $ slap changelog add - t fix - d 'Fix the documentation' -- issue 231 -- issue 234 # Added changelog entry to .changelog/_unreleased.toml id = \"e0ee08af-ff2e-4aee-b795-e6c37e4c16de\" type = \"fix\" description = \"Fix the documentation\" author = \"@NiklasRosenstein\" issues = [ \"https://github.com/username/repo/issues/231\" , \"https://github.com/username/repo/issues/234\" , ] Default changelog types DEFAULT_VALID_TYPES = [ 'breaking change' , 'deprecation' , 'docs' , 'feature' , 'fix' , 'hygiene' , 'improvement' , 'refactor' , 'tests' ] Synopsis Description: Add an entry to the unreleased changelog via the CLI. Usage: changelog add [options] Options: -t, --type=TYPE The type of the changelog. Unless configured differently, one of breaking change, deprecation, docs, feature, fix, hygiene, improvement, refactor, tests -d, --description=DESCRIPTION A Markdown formatted description of the changelog entry. -a, --author=AUTHOR Your username or email address. By default, this will be your configured Git name and email address. --pr=PR The pull request that the change is introduced to the main branch with. This is not usually known at the time the changelog entry is created, so this option is not often used. If the remote repository is well supported by Slap, a pull request number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified. -i, --issue=ISSUE An issue related to this changelog. If the remote repository is well supported by Slap, an issue number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified. (multiple values allowed) -c, --commit Commit the currently staged changes in the VCS as well as the updated changelog file to disk. The commit message is a concatenation of the --type, -t and --description, -d, as well as the directory relative to the VCS toplevel if the changelog is created not in the toplevel directory of the repository. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Add an entry to the unreleased changelog via the CLI. A changelog is a TOML file, usually in the .changelog/ directory, named with the version number it refers to and containing changelog entries. Changes that are currently not released in a version are stored in a file called _unreleased.toml. Changelog entries contain at least one author, a type (e.g. whether the entry describes a feature, enhancement, bug fix, etc.) and optionally a subject (e.g. whether the change is related to docs or a particular component of the code), a Markdown description, possibly a link to a pull request with which the change was introduced and links to issues that the changelog addresses. Example: # .changelog/0.1.1.toml [changelog] release-date = \"2022-01-17\" [[changelog.entries]] id = \"a7bc01f\" type = \"improvement\" description = \"Improvement to `my_package.util`\" author = \"username\" pr = \"https://github.com/username/my_package/pulls/13\" Changelog entries can be managed easily using the slap log command. $ slap log add -t feature -d 'Improvement to `my_package.util`\" The pr field is usually set manually after the PR is created or updated automatically by a CI action using the slap log update-pr-field command. slap changelog convert This command converts changelogs from the previous YAML-based format used by Shut (a predecessor to Slap) to the TOML format. Synopsis Description: Convert Slap's old YAML based changelogs to new style TOML changelogs. Usage: changelog convert [options] Options: -a, --author=AUTHOR The author to fall back to. If not specified, the current VCS queried for the author name instead and their email will be used (depending on the normalization of the repository remote, this will be converted to a username, for example in the case of GitHub). -d, --directory=DIRECTORY The directory from which to load the old changelogs. Defaults to the same directory that the new changelogs will be written to. --dry Do not make changes on disk. -x, --fail-fast If this flag is enabled, exit as soon as an error is encountered with any file. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Convert Slap's old YAML based changelogs to new style TOML changelogs. Sometimes the changelog entries in the old style would be suffixed with the author's username in the format of @Name or (@Name), so this command will attempt to extract that information to figure out the author of the change. slap changelog format Pretty print a changelog for the terminal or formatted as Markdown. Use the -a,--all option to format all changelogs. This command is particularly useful to embed the changelog contents into generated documentation. For example, if you use Novella , you can use the below bit in your documentation: @shell cd .. && slap changelog format --as-markdown --all This is actually used in this very documentation: Check out the Changelog page. Synopsis Description: Format the changelog in the terminal or in Markdown format. Usage: changelog format [options] [--] [<version>] Arguments: version The changelog version to format. Options: -m, --markdown Render the changelog in Markdown format. -a, --all Render all changelogs in reverse chronological order. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. slap changelog update-pr Updates the pr field of entries in the unreleased changelog. This is useful to run from continuous integration jobs to avoid having to manually inject the pull request URL into changelog entries. If you are using GitHub, try using the NiklasRosenstein/slap@gha/changelog/update/v1 action. Synopsis Description: Update the pr field of changelog entries in a commit range. Usage: changelog update-pr [options] [--] [<base_revision> [<pr>]] Arguments: base_revision The revision ID to look back to to make out which changelog entries have been added since. pr The reference to the PR that should be inserted into all entries added between the specified revision and the current version of the unreleased changelog. Options: -d, --dry Do not actually make changes on disk. --overwrite Update PR references even if an entry's reference is already set but different. -c, --commit Commit the changes, if any. -p, --push Push the changes, if any. --name=NAME Override the user.name Git option (only with --commit, -c) --email=EMAIL Override the user.email Git option (only with --commit, -c). --use=USE Use the specified plugin to publish the updated changelogs. Use this in supported CI environments instead of manually configuring the command-line settings. -l, --list List the available plugins you can pass to the --use option. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Update the pr field of changelog entries in a commit range. Updates all changelog entries that were added in a given commit range. This is useful to run in CI for a pull request to avoid having to manually update the changelog entry after the PR has been created.","title":"slap changelog"},{"location":"commands/changelog/#slap-changelog","text":"This command provides four sub-commands that allow you to interact with Slap's structured changelog format: add , convert , format and update-pr .","title":"slap changelog"},{"location":"commands/changelog/#configuration","text":"Option scope: [tool.slap.changelog] or [changelog] Option Type Default Description enabled bool True Whether the changelog feature is enabled for the directory in which the option is configured. This is useful to disable on the root of a mono-repository that contains multiple Python projects if one wants to prevent accidentally add changelog entries to the root directory. directory str .changelog/ The directory in which the changelogs are stored. valid-types list[str] [\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types. ChangelogConfig documentation ## Class ChangelogConfig @ExtraKeys ( True ) @dataclasses . dataclass class ChangelogConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/changelog.py#L41) #### enabled Whether the changelog feature is enabled. This acts locally for the current project and not globally. Particularly useful for monorepos that have multiple subprojects each with their changelog directories to prevent accidentally creating changelogs in the root directory. When not set, it will be considered `True` if the current project is a Python project. #### directory The directory in which changelogs are stored. #### valid\\_types The list of valid types that can be used in changelog entries. The default types are `DEFAULT_CHANGELOG_TYPES`.","title":"Configuration"},{"location":"commands/changelog/#subcommands","text":"","title":"Subcommands"},{"location":"commands/changelog/#slap-changelog-add","text":"Add an entry to the unreleased changelog. Given the -c,--commit option, it will also create a Git commit with the same message as the entry description, prefixed by the changelog type. If used in a sub-directory of a project, the commit message is prefixed by the sub-directory. Example $ slap changelog add - t fix - d 'Fix the documentation' -- issue 231 -- issue 234 # Added changelog entry to .changelog/_unreleased.toml id = \"e0ee08af-ff2e-4aee-b795-e6c37e4c16de\" type = \"fix\" description = \"Fix the documentation\" author = \"@NiklasRosenstein\" issues = [ \"https://github.com/username/repo/issues/231\" , \"https://github.com/username/repo/issues/234\" , ] Default changelog types DEFAULT_VALID_TYPES = [ 'breaking change' , 'deprecation' , 'docs' , 'feature' , 'fix' , 'hygiene' , 'improvement' , 'refactor' , 'tests' ] Synopsis Description: Add an entry to the unreleased changelog via the CLI. Usage: changelog add [options] Options: -t, --type=TYPE The type of the changelog. Unless configured differently, one of breaking change, deprecation, docs, feature, fix, hygiene, improvement, refactor, tests -d, --description=DESCRIPTION A Markdown formatted description of the changelog entry. -a, --author=AUTHOR Your username or email address. By default, this will be your configured Git name and email address. --pr=PR The pull request that the change is introduced to the main branch with. This is not usually known at the time the changelog entry is created, so this option is not often used. If the remote repository is well supported by Slap, a pull request number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified. -i, --issue=ISSUE An issue related to this changelog. If the remote repository is well supported by Slap, an issue number may be specified and converted to a full URL by Slap, otherwise a full URL must be specified. (multiple values allowed) -c, --commit Commit the currently staged changes in the VCS as well as the updated changelog file to disk. The commit message is a concatenation of the --type, -t and --description, -d, as well as the directory relative to the VCS toplevel if the changelog is created not in the toplevel directory of the repository. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Add an entry to the unreleased changelog via the CLI. A changelog is a TOML file, usually in the .changelog/ directory, named with the version number it refers to and containing changelog entries. Changes that are currently not released in a version are stored in a file called _unreleased.toml. Changelog entries contain at least one author, a type (e.g. whether the entry describes a feature, enhancement, bug fix, etc.) and optionally a subject (e.g. whether the change is related to docs or a particular component of the code), a Markdown description, possibly a link to a pull request with which the change was introduced and links to issues that the changelog addresses. Example: # .changelog/0.1.1.toml [changelog] release-date = \"2022-01-17\" [[changelog.entries]] id = \"a7bc01f\" type = \"improvement\" description = \"Improvement to `my_package.util`\" author = \"username\" pr = \"https://github.com/username/my_package/pulls/13\" Changelog entries can be managed easily using the slap log command. $ slap log add -t feature -d 'Improvement to `my_package.util`\" The pr field is usually set manually after the PR is created or updated automatically by a CI action using the slap log update-pr-field command.","title":"slap changelog add"},{"location":"commands/changelog/#slap-changelog-convert","text":"This command converts changelogs from the previous YAML-based format used by Shut (a predecessor to Slap) to the TOML format. Synopsis Description: Convert Slap's old YAML based changelogs to new style TOML changelogs. Usage: changelog convert [options] Options: -a, --author=AUTHOR The author to fall back to. If not specified, the current VCS queried for the author name instead and their email will be used (depending on the normalization of the repository remote, this will be converted to a username, for example in the case of GitHub). -d, --directory=DIRECTORY The directory from which to load the old changelogs. Defaults to the same directory that the new changelogs will be written to. --dry Do not make changes on disk. -x, --fail-fast If this flag is enabled, exit as soon as an error is encountered with any file. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Convert Slap's old YAML based changelogs to new style TOML changelogs. Sometimes the changelog entries in the old style would be suffixed with the author's username in the format of @Name or (@Name), so this command will attempt to extract that information to figure out the author of the change.","title":"slap changelog convert"},{"location":"commands/changelog/#slap-changelog-format","text":"Pretty print a changelog for the terminal or formatted as Markdown. Use the -a,--all option to format all changelogs. This command is particularly useful to embed the changelog contents into generated documentation. For example, if you use Novella , you can use the below bit in your documentation: @shell cd .. && slap changelog format --as-markdown --all This is actually used in this very documentation: Check out the Changelog page. Synopsis Description: Format the changelog in the terminal or in Markdown format. Usage: changelog format [options] [--] [<version>] Arguments: version The changelog version to format. Options: -m, --markdown Render the changelog in Markdown format. -a, --all Render all changelogs in reverse chronological order. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.","title":"slap changelog format"},{"location":"commands/changelog/#slap-changelog-update-pr","text":"Updates the pr field of entries in the unreleased changelog. This is useful to run from continuous integration jobs to avoid having to manually inject the pull request URL into changelog entries. If you are using GitHub, try using the NiklasRosenstein/slap@gha/changelog/update/v1 action. Synopsis Description: Update the pr field of changelog entries in a commit range. Usage: changelog update-pr [options] [--] [<base_revision> [<pr>]] Arguments: base_revision The revision ID to look back to to make out which changelog entries have been added since. pr The reference to the PR that should be inserted into all entries added between the specified revision and the current version of the unreleased changelog. Options: -d, --dry Do not actually make changes on disk. --overwrite Update PR references even if an entry's reference is already set but different. -c, --commit Commit the changes, if any. -p, --push Push the changes, if any. --name=NAME Override the user.name Git option (only with --commit, -c) --email=EMAIL Override the user.email Git option (only with --commit, -c). --use=USE Use the specified plugin to publish the updated changelogs. Use this in supported CI environments instead of manually configuring the command-line settings. -l, --list List the available plugins you can pass to the --use option. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Update the pr field of changelog entries in a commit range. Updates all changelog entries that were added in a given commit range. This is useful to run in CI for a pull request to avoid having to manually update the changelog entry after the PR has been created.","title":"slap changelog update-pr"},{"location":"commands/check/","text":"slap check Check your project configuration for errors, warnings or recommendations. Configuration Option scope: [tool.slap.check] or [check] Option Type Default Description plugins list[str] [\"changelog\", \"general\", \"poetry\", \"release\"] A list of check plugins to use. Note that the Poetry plugin only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group. Built-in check plugins Class ChangelogValidationCheckPlugin @dataclasses . dataclass class ChangelogValidationCheckPlugin ( CheckPlugin ) [view_source] This check plugin validates the structured changelog files, if any. Plugin ID: changelog Class GeneralChecksPlugin class GeneralChecksPlugin ( CheckPlugin ) [view_source] This plugin provides general checks applicable to all types of projects managed with Slap. Plugin ID: general . Class PoetryChecksPlugin class PoetryChecksPlugin ( CheckPlugin ) [view_source] Check plugin to validate the Poetry configuration and compare it with Slap's expectations. Plugin ID: poetry get_readme_check @check ( \"readme\" ) def get_readme_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if Poetry will be able to pick up the right readme file. get_urls_check @check ( \"urls\" ) def get_urls_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if URLs are configured in the Poetry configuration and recommends to configure the Homepage , Repository , Documentation and Bug Tracker URLs under [tool.poetry.urls] . get_classifiers_check @check ( \"classifiers\" ) def get_classifiers_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if all Python package classifiers are valid and recommends to configure them if none are set. get_license_check @check ( \"license\" ) def get_license_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if package license is a valid SPDX license identifier and recommends to configure a license if none is set. Class ReleaseChecksPlugin class ReleaseChecksPlugin ( CheckPlugin ) [view_source] Performs some checks relevant for the slap release command. check_packages_have_source_code_version @check ( \"source-code-version\" ) def check_packages_have_source_code_version ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if all Python packages in the project have a version defined in the source code. check_version_number_consistency @check ( \"consistent-versions\" ) def check_version_number_consistency ( app : Application ) -> tuple [ CheckResult , str ] [view_source] Checks if the version numbers in the project source code, project configuration and any other instances that are detected by release plugins or in the [tool.slap.release].references option are consistent.","title":"slap check"},{"location":"commands/check/#slap-check","text":"Check your project configuration for errors, warnings or recommendations.","title":"slap check"},{"location":"commands/check/#configuration","text":"Option scope: [tool.slap.check] or [check] Option Type Default Description plugins list[str] [\"changelog\", \"general\", \"poetry\", \"release\"] A list of check plugins to use. Note that the Poetry plugin only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group.","title":"Configuration"},{"location":"commands/check/#built-in-check-plugins","text":"","title":"Built-in check plugins"},{"location":"commands/check/#class-changelogvalidationcheckplugin","text":"@dataclasses . dataclass class ChangelogValidationCheckPlugin ( CheckPlugin ) [view_source] This check plugin validates the structured changelog files, if any. Plugin ID: changelog","title":"Class ChangelogValidationCheckPlugin"},{"location":"commands/check/#class-generalchecksplugin","text":"class GeneralChecksPlugin ( CheckPlugin ) [view_source] This plugin provides general checks applicable to all types of projects managed with Slap. Plugin ID: general .","title":"Class GeneralChecksPlugin"},{"location":"commands/check/#class-poetrychecksplugin","text":"class PoetryChecksPlugin ( CheckPlugin ) [view_source] Check plugin to validate the Poetry configuration and compare it with Slap's expectations. Plugin ID: poetry","title":"Class PoetryChecksPlugin"},{"location":"commands/check/#get_readme_check","text":"@check ( \"readme\" ) def get_readme_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if Poetry will be able to pick up the right readme file.","title":"get_readme_check"},{"location":"commands/check/#get_urls_check","text":"@check ( \"urls\" ) def get_urls_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if URLs are configured in the Poetry configuration and recommends to configure the Homepage , Repository , Documentation and Bug Tracker URLs under [tool.poetry.urls] .","title":"get_urls_check"},{"location":"commands/check/#get_classifiers_check","text":"@check ( \"classifiers\" ) def get_classifiers_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if all Python package classifiers are valid and recommends to configure them if none are set.","title":"get_classifiers_check"},{"location":"commands/check/#get_license_check","text":"@check ( \"license\" ) def get_license_check ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if package license is a valid SPDX license identifier and recommends to configure a license if none is set.","title":"get_license_check"},{"location":"commands/check/#class-releasechecksplugin","text":"class ReleaseChecksPlugin ( CheckPlugin ) [view_source] Performs some checks relevant for the slap release command.","title":"Class ReleaseChecksPlugin"},{"location":"commands/check/#check_packages_have_source_code_version","text":"@check ( \"source-code-version\" ) def check_packages_have_source_code_version ( project : Project ) -> tuple [ CheckResult , str ] [view_source] Checks if all Python packages in the project have a version defined in the source code.","title":"check_packages_have_source_code_version"},{"location":"commands/check/#check_version_number_consistency","text":"@check ( \"consistent-versions\" ) def check_version_number_consistency ( app : Application ) -> tuple [ CheckResult , str ] [view_source] Checks if the version numbers in the project source code, project configuration and any other instances that are detected by release plugins or in the [tool.slap.release].references option are consistent.","title":"check_version_number_consistency"},{"location":"commands/info/","text":"slap info Shows details about your repository and project(s) as Slap understands them. Synopsis Description: Show info about the Slap application workspace and the loaded projects. Usage: info [options] Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Example from the Slap repository itself: $ slap info Repository \"/home/runner/work/slap/slap\" vcs: Git(\"/home/runner/work/slap/slap\") host: GithubRepositoryHost(repo='NiklasRosenstein/slap') projects: ['slap-cli'] Project \".\" (id: slap-cli) version: 1.6.3 dist-name: slap-cli packages: slap (src) readme: readme.md handler: PoetryProjectHandler dependencies: run: - 'beautifulsoup4 >=4.10.0,<5.0.0' - 'cleo >=1.0.0a4' - 'databind >=2.0.0,<3.0.0' - 'flit >=3.6.0,<4.0.0' - 'nr.util >=0.8.4,<1.0.0' - 'poetry-core >=1.1.0a6,<2.0.0' - 'ptyprocess >=0.7.0,<0.8.0' - 'pygments >=2.11.2,<3.0.0' - 'PyYAML >=4.0' - 'requests >=2.27.1,<3.0.0' - 'setuptools >=39.1.0' - 'tomli >=2.0.0,<3.0.0' - 'tomlkit >=0.10.1,<0.11.0' - 'tqdm >=4.64.0,<5.0.0' - 'twine >=3.7.0,<4.0.0' dev: - 'black >=22.3.0,<23.0.0' - 'isort >=5.10.1,<6.0.0' - 'mypy >=0.931,<0.932' - 'pytest >=7.1.1,<8.0.0' - 'types-beautifulsoup4 >=4.10.0,<5.0.0' - 'types-pygments >=2.9.16,<3.0.0' - 'types-PyYAML >=6.0.3,<7.0.0' - 'types-requests >=2.27.7,<3.0.0' extra.docs: - mkdocs - mkdocs-material - 'novella ==0.2.3' - 'pydoc-markdown ==4.6.0'","title":"slap info"},{"location":"commands/info/#slap-info","text":"Shows details about your repository and project(s) as Slap understands them. Synopsis Description: Show info about the Slap application workspace and the loaded projects. Usage: info [options] Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Example from the Slap repository itself: $ slap info Repository \"/home/runner/work/slap/slap\" vcs: Git(\"/home/runner/work/slap/slap\") host: GithubRepositoryHost(repo='NiklasRosenstein/slap') projects: ['slap-cli'] Project \".\" (id: slap-cli) version: 1.6.3 dist-name: slap-cli packages: slap (src) readme: readme.md handler: PoetryProjectHandler dependencies: run: - 'beautifulsoup4 >=4.10.0,<5.0.0' - 'cleo >=1.0.0a4' - 'databind >=2.0.0,<3.0.0' - 'flit >=3.6.0,<4.0.0' - 'nr.util >=0.8.4,<1.0.0' - 'poetry-core >=1.1.0a6,<2.0.0' - 'ptyprocess >=0.7.0,<0.8.0' - 'pygments >=2.11.2,<3.0.0' - 'PyYAML >=4.0' - 'requests >=2.27.1,<3.0.0' - 'setuptools >=39.1.0' - 'tomli >=2.0.0,<3.0.0' - 'tomlkit >=0.10.1,<0.11.0' - 'tqdm >=4.64.0,<5.0.0' - 'twine >=3.7.0,<4.0.0' dev: - 'black >=22.3.0,<23.0.0' - 'isort >=5.10.1,<6.0.0' - 'mypy >=0.931,<0.932' - 'pytest >=7.1.1,<8.0.0' - 'types-beautifulsoup4 >=4.10.0,<5.0.0' - 'types-pygments >=2.9.16,<3.0.0' - 'types-PyYAML >=6.0.3,<7.0.0' - 'types-requests >=2.27.7,<3.0.0' extra.docs: - mkdocs - mkdocs-material - 'novella ==0.2.3' - 'pydoc-markdown ==4.6.0'","title":"slap info"},{"location":"commands/init/","text":"slap init This command bootstrap Python project files. Synopsis Description: Bootstrap some files for a Python project. Usage: init [options] [--] [<directory>] Arguments: directory The directory in which to create the generated files. If not specified, a new directory with the name specified via the --name option is created. Options: --name=NAME The name of the Python package. --license=LICENSE The package license. [default: \"MIT\"] -t, --template=TEMPLATE The template to use. [default: \"poetry\"] -f, --overwrite Overwrite files. -d, --dry Dont actually write files. --as-markdown Render the content as Markdown (uses by the Slap docs) -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Bootstrap some files for a Python project. Currently available templates: 1. poetry Templates Poetry $ slap init -t poetry --name my.pkg write /home/runner/work/slap/slap/docs/pyproject.toml write /home/runner/work/slap/slap/docs/LICENSE write /home/runner/work/slap/slap/docs/readme.md write /home/runner/work/slap/slap/docs/.gitignore write /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py write /home/runner/work/slap/slap/docs/test/test_import.py write /home/runner/work/slap/slap/docs/src/my/pkg/py.typed /home/runner/work/slap/slap/docs/pyproject.toml [build-system] requires = [ \"poetry-core\" ] build-backend = \"poetry.core.masonry.api\" [tool.poetry] name = \"my.pkg\" version = \"0.1.0\" description = \"\" authors = [ \"Unknown <me@unknown.org>\" ] license = \"MIT\" readme = \"readme.md\" packages = [{ include = \"my/pkg\" , from = \"src\" }] classifiers = [] keywords = [] [tool.poetry.urls] # \"Bug Tracker\" = \"\" # Documentation = \"\" # Homepage = \"\" # Repository = \"\" [tool.poetry.dependencies] python = \"^3.7\" [tool.poetry.dev-dependencies] mypy = \"*\" pytest = \"*\" [tool.slap] typed = true [tool.slap.test] check = \"slap check\" mypy = \"MYPYPATH=src mypy src/ --namespace-packages --explicit-package-bases\" pytest = \"pytest test/ -vv\" [tool.mypy] pretty = true namespace_packages = true warn_redundant_casts = true warn_unused_ignores = true warn_no_return = true warn_unreachable = true show_error_context = true show_error_codes = true /home/runner/work/slap/slap/docs/LICENSE The MIT License Copyright (c) 2022 Unknown Permission is hereby granted, free of charge, to any person obtaining a copy this software and associated documentation files (the \"Software\"), to deal in Software without restriction, including without limitation the rights to use, modify, merge, publish, distribute, sublicense, and/or sell copies of the and to permit persons to whom the Software is furnished to do so, subject to following conditions: The above copyright notice and this permission notice shall be included in all or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR USE OR OTHER DEALINGS IN THE SOFTWARE. /home/runner/work/slap/slap/docs/readme.md # my.pkg /home/runner/work/slap/slap/docs/.gitignore /.vscode /dist /build .venv/ *.egg-info/ __pycache__/ poetry.lock /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py __version__ = '0.1.0' /home/runner/work/slap/slap/docs/test/test_import.py def test_import (): exec ( 'from my.pkg import *' ) /home/runner/work/slap/slap/docs/src/my/pkg/py.typed Github $ slap init -t github write /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml name: Python application on: push: { branches: [ develop ], tags: [ \"*\" ] } pull_request: { branches: [ develop ] } jobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [ \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.x\" ] steps: - uses: actions/checkout@v2 - uses: NiklasRosenstein/slap@gha/install/v1 - uses: actions/setup-python@v2 with: { python-version: \"${{ matrix.python-version }}\" } - run: slap install -vv --no-venv-check - run: slap test update-changelog: runs-on: ubuntu-latest if: github.event_name == 'pull_request' steps: - uses: actions/checkout@v2 - uses: NiklasRosenstein/slap@gha/changelog/update/v1","title":"slap init"},{"location":"commands/init/#slap-init","text":"This command bootstrap Python project files. Synopsis Description: Bootstrap some files for a Python project. Usage: init [options] [--] [<directory>] Arguments: directory The directory in which to create the generated files. If not specified, a new directory with the name specified via the --name option is created. Options: --name=NAME The name of the Python package. --license=LICENSE The package license. [default: \"MIT\"] -t, --template=TEMPLATE The template to use. [default: \"poetry\"] -f, --overwrite Overwrite files. -d, --dry Dont actually write files. --as-markdown Render the content as Markdown (uses by the Slap docs) -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Bootstrap some files for a Python project. Currently available templates: 1. poetry","title":"slap init"},{"location":"commands/init/#templates","text":"","title":"Templates"},{"location":"commands/init/#poetry","text":"$ slap init -t poetry --name my.pkg write /home/runner/work/slap/slap/docs/pyproject.toml write /home/runner/work/slap/slap/docs/LICENSE write /home/runner/work/slap/slap/docs/readme.md write /home/runner/work/slap/slap/docs/.gitignore write /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py write /home/runner/work/slap/slap/docs/test/test_import.py write /home/runner/work/slap/slap/docs/src/my/pkg/py.typed /home/runner/work/slap/slap/docs/pyproject.toml [build-system] requires = [ \"poetry-core\" ] build-backend = \"poetry.core.masonry.api\" [tool.poetry] name = \"my.pkg\" version = \"0.1.0\" description = \"\" authors = [ \"Unknown <me@unknown.org>\" ] license = \"MIT\" readme = \"readme.md\" packages = [{ include = \"my/pkg\" , from = \"src\" }] classifiers = [] keywords = [] [tool.poetry.urls] # \"Bug Tracker\" = \"\" # Documentation = \"\" # Homepage = \"\" # Repository = \"\" [tool.poetry.dependencies] python = \"^3.7\" [tool.poetry.dev-dependencies] mypy = \"*\" pytest = \"*\" [tool.slap] typed = true [tool.slap.test] check = \"slap check\" mypy = \"MYPYPATH=src mypy src/ --namespace-packages --explicit-package-bases\" pytest = \"pytest test/ -vv\" [tool.mypy] pretty = true namespace_packages = true warn_redundant_casts = true warn_unused_ignores = true warn_no_return = true warn_unreachable = true show_error_context = true show_error_codes = true /home/runner/work/slap/slap/docs/LICENSE The MIT License Copyright (c) 2022 Unknown Permission is hereby granted, free of charge, to any person obtaining a copy this software and associated documentation files (the \"Software\"), to deal in Software without restriction, including without limitation the rights to use, modify, merge, publish, distribute, sublicense, and/or sell copies of the and to permit persons to whom the Software is furnished to do so, subject to following conditions: The above copyright notice and this permission notice shall be included in all or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR USE OR OTHER DEALINGS IN THE SOFTWARE. /home/runner/work/slap/slap/docs/readme.md # my.pkg /home/runner/work/slap/slap/docs/.gitignore /.vscode /dist /build .venv/ *.egg-info/ __pycache__/ poetry.lock /home/runner/work/slap/slap/docs/src/my/pkg/__init__.py __version__ = '0.1.0' /home/runner/work/slap/slap/docs/test/test_import.py def test_import (): exec ( 'from my.pkg import *' ) /home/runner/work/slap/slap/docs/src/my/pkg/py.typed","title":"Poetry"},{"location":"commands/init/#github","text":"$ slap init -t github write /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml /home/runner/work/slap/slap/docs/.github/workflows/python-package.yml name: Python application on: push: { branches: [ develop ], tags: [ \"*\" ] } pull_request: { branches: [ develop ] } jobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [ \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.x\" ] steps: - uses: actions/checkout@v2 - uses: NiklasRosenstein/slap@gha/install/v1 - uses: actions/setup-python@v2 with: { python-version: \"${{ matrix.python-version }}\" } - run: slap install -vv --no-venv-check - run: slap test update-changelog: runs-on: ubuntu-latest if: github.event_name == 'pull_request' steps: - uses: actions/checkout@v2 - uses: NiklasRosenstein/slap@gha/changelog/update/v1","title":"Github"},{"location":"commands/install/","text":"slap install This command is venv aware. Install the current project or all projects in a mono-repository into the current Python environment, including development dependencies and extras. After cloning a new repository, this is often the first command you run after creating a virtual environment (for that, see slap venv ). Common options to add are --link if you want to develop on the project(s) and --no-venv-check if you want don't want Slap to protect you from accidentally installing the project(s) into a non-virtual Python environment. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: install [options] Options: --only=ONLY Path to the subproject to install only. May still cause other projects to be installed if required by the selected project via inter dependencies, but only their run dependencies will be installed. --link Symlink the root project using slap link instead of installing it directly. --no-dev Do not install development dependencies. --no-root Do not install the package itself, but only its dependencies. --extras=EXTRAS A comma-separated list of extras to install. Note that \"dev\" is a valid extras. --only-extras=ONLY-EXTRAS Install only the specified extras. Note that \"dev\" is a valid extras. --upgrade=UPGRADE Upgrade already installed packages. --no-venv-check Do not check if the target Python environment is a virtual environment. -p, --python=PYTHON The Python executable to install to. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command.","title":"slap install"},{"location":"commands/install/#slap-install","text":"This command is venv aware. Install the current project or all projects in a mono-repository into the current Python environment, including development dependencies and extras. After cloning a new repository, this is often the first command you run after creating a virtual environment (for that, see slap venv ). Common options to add are --link if you want to develop on the project(s) and --no-venv-check if you want don't want Slap to protect you from accidentally installing the project(s) into a non-virtual Python environment. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: install [options] Options: --only=ONLY Path to the subproject to install only. May still cause other projects to be installed if required by the selected project via inter dependencies, but only their run dependencies will be installed. --link Symlink the root project using slap link instead of installing it directly. --no-dev Do not install development dependencies. --no-root Do not install the package itself, but only its dependencies. --extras=EXTRAS A comma-separated list of extras to install. Note that \"dev\" is a valid extras. --only-extras=ONLY-EXTRAS Install only the specified extras. Note that \"dev\" is a valid extras. --upgrade=UPGRADE Upgrade already installed packages. --no-venv-check Do not check if the target Python environment is a virtual environment. -p, --python=PYTHON The Python executable to install to. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command.","title":"slap install"},{"location":"commands/link/","text":"slap link This command is venv aware. Symlink your project or all projects in a mono-repository into the current Python environment. This works for Poetry projects as well. Warning Independent from the Python build system you are using, Slap reuses Flit 's symlinking feature to perform this action. This actually symbolically links your source code into the Python site-packages. Be aware that this can cause your code to be overwritten for example by Pip if you end up overwriting the symlinked installation of your package by installing another version of it into the same environment. Note Currently, slap install does not support linking Python projects that contain more than one package. It does support symlinking monorepositories that contain multiple Python projects (each with one package). Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: link [options] Options: -p, --python=PYTHON The Python executable to install to. --dump-pyproject Dump the updated pyproject.toml and do not actually do the linking. --no-venv-check Do not check if the target Python environment is a virtual environment. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Symlink your Python package with the help of Flit. This command uses Flit [0] to symlink the Python package you are currently working on into your Python environment's site-packages. This is particulary useful if your project is using a PEP 517 [1] compatible build system that does not support editable installs. When you run this command, the pyproject.toml will be temporarily rewritten such that Flit can understand it. The following ways to describe a Python project are currently supported be the rewriter: 1. Poetry [2] Supported configurations: - version - plugins (aka. \"entrypoints\") - scripts 2. Flit [0] Since the link command relies on Flit, no subset of configuration neeeds to be explicitly supported. Example usage: $ slap link Discovered modules in /projects/my_package/src: my_package Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> .venv/lib/python3.10/site-packages/my_package Important notes: This command will symlink your package into your Python environment; this is much unlike a Pip editable install which instead points to your code via a .pth file. If you install something into your environment that requires an older version of the package you symlinked, Pip may write into those symlinked files and effectively change your codebase, which could lead to potential loss of changes. [0]: https://flit.readthedocs.io/en/latest/ [1]: https://www.python.org/dev/peps/pep-0517/ [2]: https://python-poetry.org/","title":"slap link"},{"location":"commands/link/#slap-link","text":"This command is venv aware. Symlink your project or all projects in a mono-repository into the current Python environment. This works for Poetry projects as well. Warning Independent from the Python build system you are using, Slap reuses Flit 's symlinking feature to perform this action. This actually symbolically links your source code into the Python site-packages. Be aware that this can cause your code to be overwritten for example by Pip if you end up overwriting the symlinked installation of your package by installing another version of it into the same environment. Note Currently, slap install does not support linking Python projects that contain more than one package. It does support symlinking monorepositories that contain multiple Python projects (each with one package). Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: link [options] Options: -p, --python=PYTHON The Python executable to install to. --dump-pyproject Dump the updated pyproject.toml and do not actually do the linking. --no-venv-check Do not check if the target Python environment is a virtual environment. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Symlink your Python package with the help of Flit. This command uses Flit [0] to symlink the Python package you are currently working on into your Python environment's site-packages. This is particulary useful if your project is using a PEP 517 [1] compatible build system that does not support editable installs. When you run this command, the pyproject.toml will be temporarily rewritten such that Flit can understand it. The following ways to describe a Python project are currently supported be the rewriter: 1. Poetry [2] Supported configurations: - version - plugins (aka. \"entrypoints\") - scripts 2. Flit [0] Since the link command relies on Flit, no subset of configuration neeeds to be explicitly supported. Example usage: $ slap link Discovered modules in /projects/my_package/src: my_package Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> .venv/lib/python3.10/site-packages/my_package Important notes: This command will symlink your package into your Python environment; this is much unlike a Pip editable install which instead points to your code via a .pth file. If you install something into your environment that requires an older version of the package you symlinked, Pip may write into those symlinked files and effectively change your codebase, which could lead to potential loss of changes. [0]: https://flit.readthedocs.io/en/latest/ [1]: https://www.python.org/dev/peps/pep-0517/ [2]: https://python-poetry.org/","title":"slap link"},{"location":"commands/publish/","text":"slap publish This command builds an sdist and wheel distribution for your project or every project in your mono-repository and publishes it using Twine (the command has pretty much all the same options). Often you will use this command immediately after running slap release or from a CI job when new tag/release was created. If you just want to build your package(s) and not actually publish them, add the -d,--dry option. To be able to inspect the resulting distribution files and not loose them to the temporary directory, pass an explicit build directory using -b,--build-directory . Synopsis Description: A wrapper to publish the Python project to a repository such as PyPI. Usage: publish [options] Options: -r, --repository=REPOSITORY [default: \"pypi\"] --repository-url=REPOSITORY-URL -s, --sign --sign-with=SIGN-WITH -i, --identity=IDENTITY -u, --username=USERNAME -p, --password=PASSWORD --non-interactive -c, --comment=COMMENT --config-file=CONFIG-FILE [default: \"~/.pypirc\"] --skip-existing --cert=CERT --client-cert=CLIENT-CERT --disable-progress-bar -d, --dry -b, --build-directory=BUILD-DIRECTORY -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: A wrapper to publish the Python project to a repository such as PyPI. Uses the PEP 517 build system defined in the pyproject.toml to build packages and then uploads them with Twine. Note that it currently expects the build backend to be installed already. The command-line options are almost identical to the twine upload command. Note: You can combine the `-d` and `-b` options to effectively perform a build, storing the artifacts into the specified directory but not publishing them.","title":"slap publish"},{"location":"commands/publish/#slap-publish","text":"This command builds an sdist and wheel distribution for your project or every project in your mono-repository and publishes it using Twine (the command has pretty much all the same options). Often you will use this command immediately after running slap release or from a CI job when new tag/release was created. If you just want to build your package(s) and not actually publish them, add the -d,--dry option. To be able to inspect the resulting distribution files and not loose them to the temporary directory, pass an explicit build directory using -b,--build-directory . Synopsis Description: A wrapper to publish the Python project to a repository such as PyPI. Usage: publish [options] Options: -r, --repository=REPOSITORY [default: \"pypi\"] --repository-url=REPOSITORY-URL -s, --sign --sign-with=SIGN-WITH -i, --identity=IDENTITY -u, --username=USERNAME -p, --password=PASSWORD --non-interactive -c, --comment=COMMENT --config-file=CONFIG-FILE [default: \"~/.pypirc\"] --skip-existing --cert=CERT --client-cert=CLIENT-CERT --disable-progress-bar -d, --dry -b, --build-directory=BUILD-DIRECTORY -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: A wrapper to publish the Python project to a repository such as PyPI. Uses the PEP 517 build system defined in the pyproject.toml to build packages and then uploads them with Twine. Note that it currently expects the build backend to be installed already. The command-line options are almost identical to the twine upload command. Note: You can combine the `-d` and `-b` options to effectively perform a build, storing the artifacts into the specified directory but not publishing them.","title":"slap publish"},{"location":"commands/release/","text":"slap release This command updates the version numbers in your project(s). Synopsis Description: Create a new release of your Python package. Usage: release [options] [--] [<version>] Arguments: version The target version number or rule to apply to the current version. Options: -t, --tag Create a Git tag after the version numbers were updated. -p, --push Push the changes to the Git remote repository. -r, --remote=REMOTE The Git remote to push to (only when --push is specified). -d, --dry Do not commit changes to disk. -f, --force Force tag creation and push. --validate Instead of bumping the version, validate that all version references are consistent. If the version argument is specified, all version references must match it. --no-branch-check Do not validate the current Git branch matches the configured release branch. --no-worktree-check Do not check the worktree state. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Create a new release of your Python package. This command can perform the following operations in sequence (most of them need to be enabled explicitly with flags): 1. Bump the version number in pyproject.toml and in other files 2. Add the changed files to Git, create a commit and a tag (--tag, -t) 3. Push the commit and tag to the remote repository (--push, -p) In addition to the pyproject.toml, the command will automatically detect the file(s) in your Python source code that contain a __version__ member and update it as well. Additional files can be updated by configuring the [tool.slap.release.references] option: [tool.slap.release] references = [ { file = \"../frontend/package.json\", pattern = \" \\\"version\\\": \\\"{VERSION}\\\"\" } ] Furthermore, the --validate option can be used in CI to ensure that the version numbers are consistent across the project. This is particularly useful when automating publishing from CI builds. Bumping the version number Specifying an explicit version number or a version bump rule for the version argument will update the version across all references that can be detected. You can use --validate to show all files in which version numbers are found. The supported rules are major, premajor, minor, preminor, patch, prepatch and prerelease. [Git]: The command will prevent you from bumping the version unless you are on the branch configured under [tool.slap.release.branch] or \"develop\" by default. If you want to skip that check, pass --no-branch-check. Commit & tag [Git]: You can use the --tag, -t flag to automatically add the updated files, create a new commit and tag the commit with the version number. The tag name by default will just be the version number, but can be changed by setting the [tool.slap.release.tag_format]. Similarly, the commit message used can be configured with [tool.slap.release.commit_message]. Push to remote [Git]: Using the --push, -p in combination with --tag, -t will push the new commit and tag to the remote Git repository immediately. You can specify the --remote, -r option to change the remote which will be pushed to (defaults to \"origin\"). Tool comparison Feature poetry bump slap release Check for consistent version numbers across files in your repository \u274c \u2705 Update version number in pyproject.toml \u2705 \u2705 Update dependencies of another project within the same mono-repository (interdependencies) \u2705 Update __version__ in source code \u274c \u2705 Update and rename Slap structure changelog files \u2705 Commit changes, create a tag and push to Git remote \u274c \u2705 Create GitHub releases \u274c \u274c (planned in #29 ) Legend : \u2705 supported, \u274c not supported, (blank) conceptually irrelevant Configuration Option scope: [tool.slap.release] or [release] Option Type Default Description branch str \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to slap release , the command will refuse to continue if the current branch name does not match this value. commit-message str release {version} The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number. tag-name str {version} The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number. references list[VersionRefConfig] [] A list of version references that should be considered in addition to the version references that are automatically detected by Slap when updating version numbers across the project with the slap release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the slap.toml or pyproject.toml configuration file resides). ReleaseConfig ## Class ReleaseConfig @dataclasses . dataclass @ExtraKeys ( True ) class ReleaseConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L37) #### branch The VCS branch on which releases are allowed. The release command will prevent you from creating a release while on a different branch (unless `--no-branch-check` is set). #### commit\\_message The template for the commit message when a release is created and the `--tag, -t` option is used. #### tag\\_format The template for the tag name when a release is created and the `--tag, -t` option is used. #### references A list of references to the version number that should be updated along with the version numbers that the release command knows about by default (like the `version` in `pyproject.toml` and the version number in the source code). #### plugins A list of `ReleasePlugins` to use. Defaults to contain the {@link pydoc:slap.ext.release.source_code_version.SourceCodeVersionReferencesPlugin} and {@link pydoc:slap.ext.release.changelog.ChangelogReleasePlugin}. VersionRefConfig ## Class VersionRefConfig @dataclasses . dataclass class VersionRefConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L23) Version reference. #### file The file in which the reference occurs. #### pattern A regex pattern that matches the version. Must not contain any captured groups except for one that represents the version number itself. The expression for that group can be writen as `{version}` instead (example: `version: \"{version}\"`). Usage example $ slap release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.1.toml tagging 0.1.1 pushing develop, 0.1.1 to origin","title":"slap release"},{"location":"commands/release/#slap-release","text":"This command updates the version numbers in your project(s). Synopsis Description: Create a new release of your Python package. Usage: release [options] [--] [<version>] Arguments: version The target version number or rule to apply to the current version. Options: -t, --tag Create a Git tag after the version numbers were updated. -p, --push Push the changes to the Git remote repository. -r, --remote=REMOTE The Git remote to push to (only when --push is specified). -d, --dry Do not commit changes to disk. -f, --force Force tag creation and push. --validate Instead of bumping the version, validate that all version references are consistent. If the version argument is specified, all version references must match it. --no-branch-check Do not validate the current Git branch matches the configured release branch. --no-worktree-check Do not check the worktree state. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Create a new release of your Python package. This command can perform the following operations in sequence (most of them need to be enabled explicitly with flags): 1. Bump the version number in pyproject.toml and in other files 2. Add the changed files to Git, create a commit and a tag (--tag, -t) 3. Push the commit and tag to the remote repository (--push, -p) In addition to the pyproject.toml, the command will automatically detect the file(s) in your Python source code that contain a __version__ member and update it as well. Additional files can be updated by configuring the [tool.slap.release.references] option: [tool.slap.release] references = [ { file = \"../frontend/package.json\", pattern = \" \\\"version\\\": \\\"{VERSION}\\\"\" } ] Furthermore, the --validate option can be used in CI to ensure that the version numbers are consistent across the project. This is particularly useful when automating publishing from CI builds. Bumping the version number Specifying an explicit version number or a version bump rule for the version argument will update the version across all references that can be detected. You can use --validate to show all files in which version numbers are found. The supported rules are major, premajor, minor, preminor, patch, prepatch and prerelease. [Git]: The command will prevent you from bumping the version unless you are on the branch configured under [tool.slap.release.branch] or \"develop\" by default. If you want to skip that check, pass --no-branch-check. Commit & tag [Git]: You can use the --tag, -t flag to automatically add the updated files, create a new commit and tag the commit with the version number. The tag name by default will just be the version number, but can be changed by setting the [tool.slap.release.tag_format]. Similarly, the commit message used can be configured with [tool.slap.release.commit_message]. Push to remote [Git]: Using the --push, -p in combination with --tag, -t will push the new commit and tag to the remote Git repository immediately. You can specify the --remote, -r option to change the remote which will be pushed to (defaults to \"origin\").","title":"slap release"},{"location":"commands/release/#tool-comparison","text":"Feature poetry bump slap release Check for consistent version numbers across files in your repository \u274c \u2705 Update version number in pyproject.toml \u2705 \u2705 Update dependencies of another project within the same mono-repository (interdependencies) \u2705 Update __version__ in source code \u274c \u2705 Update and rename Slap structure changelog files \u2705 Commit changes, create a tag and push to Git remote \u274c \u2705 Create GitHub releases \u274c \u274c (planned in #29 ) Legend : \u2705 supported, \u274c not supported, (blank) conceptually irrelevant","title":"Tool comparison"},{"location":"commands/release/#configuration","text":"Option scope: [tool.slap.release] or [release] Option Type Default Description branch str \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to slap release , the command will refuse to continue if the current branch name does not match this value. commit-message str release {version} The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number. tag-name str {version} The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number. references list[VersionRefConfig] [] A list of version references that should be considered in addition to the version references that are automatically detected by Slap when updating version numbers across the project with the slap release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the slap.toml or pyproject.toml configuration file resides). ReleaseConfig ## Class ReleaseConfig @dataclasses . dataclass @ExtraKeys ( True ) class ReleaseConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L37) #### branch The VCS branch on which releases are allowed. The release command will prevent you from creating a release while on a different branch (unless `--no-branch-check` is set). #### commit\\_message The template for the commit message when a release is created and the `--tag, -t` option is used. #### tag\\_format The template for the tag name when a release is created and the `--tag, -t` option is used. #### references A list of references to the version number that should be updated along with the version numbers that the release command knows about by default (like the `version` in `pyproject.toml` and the version number in the source code). #### plugins A list of `ReleasePlugins` to use. Defaults to contain the {@link pydoc:slap.ext.release.source_code_version.SourceCodeVersionReferencesPlugin} and {@link pydoc:slap.ext.release.changelog.ChangelogReleasePlugin}. VersionRefConfig ## Class VersionRefConfig @dataclasses . dataclass class VersionRefConfig () [[view_source]](https://github.com/NiklasRosenstein/slap/blob/develop/docs/../src/slap/ext/application/release.py#L23) Version reference. #### file The file in which the reference occurs. #### pattern A regex pattern that matches the version. Must not contain any captured groups except for one that represents the version number itself. The expression for that group can be writen as `{version}` instead (example: `version: \"{version}\"`).","title":"Configuration"},{"location":"commands/release/#usage-example","text":"$ slap release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.1.toml tagging 0.1.1 pushing develop, 0.1.1 to origin","title":"Usage example"},{"location":"commands/report/","text":"report The slap report commands generate reports about your project. Subcommands slap report dependencies This command is venv aware. Generates a JSON report on the dependencies of your project based on the packages installed in your environment. Usually, the most interesting piece is the license information of every dependency, which is contained in the JSON report. The license name (and text if --with-license-text is specified) is read from the package distribution metadata. The command will only resolve only runtime dependencies by default. You can specify additional extras to include in the resolution using the --extras option. Synopsis report dependencies Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: report dependencies [options] Options: --extras=EXTRAS A comma-separated list of extra dependencies to include. --with-license-text Include license text in the output. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command. Dependencies report for Slap { \"dependencies\" : { \"Deprecated\" : [ \"wrapt\" ], \"SecretStorage\" : [ \"cryptography\" , \"jeepney\" ], \"beautifulsoup4\" : [ \"soupsieve\" ], \"bleach\" : [ \"six\" , \"webencodings\" ], \"cffi\" : [ \"pycparser\" ], \"cleo\" : [ \"crashtest\" , \"pylev\" ], \"cryptography\" : [ \"cffi\" ], \"databind\" : [ \"databind.core\" , \"databind.json\" ], \"databind.core\" : [ \"Deprecated\" , \"nr.util\" , \"typeapi\" , \"typing-extensions\" ], \"databind.json\" : [ \"databind.core\" , \"nr.util\" , \"typing-extensions\" ], \"deprecated\" : [ \"wrapt\" ], \"flit\" : [ \"docutils\" , \"flit_core\" , \"requests\" , \"tomli\" , \"tomli-w\" ], \"importlib-metadata\" : [ \"typing-extensions\" , \"zipp\" ], \"keyring\" : [ \"SecretStorage\" , \"importlib-metadata\" , \"jeepney\" ], \"nr.util\" : [ \"deprecated\" , \"typing-extensions\" ], \"poetry-core\" : [ \"importlib-metadata\" ], \"readme-renderer\" : [ \"Pygments\" , \"bleach\" , \"docutils\" ], \"requests\" : [ \"certifi\" , \"charset-normalizer\" , \"idna\" , \"urllib3\" ], \"requests-toolbelt\" : [ \"requests\" ], \"tqdm\" : [ \"importlib-resources\" ], \"twine\" : [ \"colorama\" , \"importlib-metadata\" , \"keyring\" , \"pkginfo\" , \"readme-renderer\" , \"requests\" , \"requests-toolbelt\" , \"rfc3986\" , \"tqdm\" , \"urllib3\" ], \"typeapi\" : [ \"typing-extensions\" ], \"typing-extensions\" : [ \"typing\" ] }, \"metadata\" : { \"Deprecated\" : { \"extras\" : [ \"dev\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"wrapt (<2,>=1.10)\" , \"tox ; extra == 'dev'\" , \"bump2version (<1) ; extra == 'dev'\" , \"sphinx (<2) ; extra == 'dev'\" , \"importlib-metadata (<3) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"importlib-resources (<4) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"configparser (<5) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"sphinxcontrib-websupport (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"zipp (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"PyTest (<5) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov (<2.6) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"1.2.13\" }, \"PyYAML\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Any\" , \"requirements\" : [], \"requires_python\" : \">=3.6\" , \"version\" : \"6.0\" }, \"Pygments\" : { \"extras\" : [], \"license_name\" : \"BSD License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"2.11.2\" }, \"SecretStorage\" : { \"extras\" : [], \"license_name\" : \"BSD 3-Clause License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Linux\" , \"requirements\" : [ \"cryptography (>=2.0)\" , \"jeepney (>=0.6)\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.3.1\" }, \"beautifulsoup4\" : { \"extras\" : [ \"html5lib\" , \"lxml\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"soupsieve (>1.2)\" , \"html5lib; extra == 'html5lib'\" , \"lxml; extra == 'lxml'\" ], \"requires_python\" : \">=3.6.0\" , \"version\" : \"4.11.1\" }, \"bleach\" : { \"extras\" : [ \"css\" , \"dev\" ], \"license_name\" : \"Apache Software License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"six (>=1.9.0)\" , \"webencodings\" , \"tinycss2 (>=1.1.0<1.2) ; extra == 'css'\" , \"pip-tools (==6.5.1) ; extra == 'dev'\" , \"pytest (==7.1.1) ; extra == 'dev'\" , \"flake8 (==4.0.1) ; extra == 'dev'\" , \"tox (==3.24.5) ; extra == 'dev'\" , \"sphinx (==4.3.2) ; extra == 'dev'\" , \"twine (==4.0.0) ; extra == 'dev'\" , \"wheel (==0.37.1) ; extra == 'dev'\" , \"hashin (==0.17.0) ; extra == 'dev'\" , \"black (==22.3.0) ; (implementation_name == \\\"cpython\\\") and extra == 'dev'\" , \"mypy (==0.942) ; (implementation_name == \\\"cpython\\\") and extra == 'dev'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"5.0.0\" }, \"certifi\" : { \"extras\" : [], \"license_name\" : \"MPL-2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"2021.10.8\" }, \"cffi\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"pycparser\" ], \"requires_python\" : null , \"version\" : \"1.15.0\" }, \"charset-normalizer\" : { \"extras\" : [ \"unicode_backport\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"unicodedata2 ; extra == 'unicode_backport'\" ], \"requires_python\" : \">=3.5.0\" , \"version\" : \"2.0.12\" }, \"cleo\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"crashtest (>=0.3.1,<0.4.0)\" , \"pylev (>=1.3.0,<2.0.0)\" ], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"1.0.0a4\" }, \"colorama\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\" , \"version\" : \"0.4.4\" }, \"crashtest\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"0.3.1\" }, \"cryptography\" : { \"extras\" : [ \"docs\" , \"test\" , \"sdist\" , \"pep8test\" , \"docstest\" , \"ssh\" ], \"license_name\" : \"BSD or Apache License, Version 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"cffi (>=1.12)\" , \"sphinx (!=1.8.0,!=3.1.0,!=3.1.1,>=1.6.5) ; extra == 'docs'\" , \"sphinx-rtd-theme ; extra == 'docs'\" , \"pyenchant (>=1.6.11) ; extra == 'docstest'\" , \"twine (>=1.12.0) ; extra == 'docstest'\" , \"sphinxcontrib-spelling (>=4.0.1) ; extra == 'docstest'\" , \"black ; extra == 'pep8test'\" , \"flake8 ; extra == 'pep8test'\" , \"flake8-import-order ; extra == 'pep8test'\" , \"pep8-naming ; extra == 'pep8test'\" , \"setuptools-rust (>=0.11.4) ; extra == 'sdist'\" , \"bcrypt (>=3.1.5) ; extra == 'ssh'\" , \"pytest (>=6.2.0) ; extra == 'test'\" , \"pytest-cov ; extra == 'test'\" , \"pytest-subtests ; extra == 'test'\" , \"pytest-xdist ; extra == 'test'\" , \"pretend ; extra == 'test'\" , \"iso8601 ; extra == 'test'\" , \"pytz ; extra == 'test'\" , \"hypothesis (!=3.79.2,>=1.11.4) ; extra == 'test'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"36.0.2\" }, \"databind\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"databind.core (>=2.0.0,<3.0.0)\" , \"databind.json (>=2.0.0,<3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"databind.core\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"Deprecated (>=1.2.12,<2.0.0)\" , \"nr.util (>=0.8.8,<1.0.0)\" , \"typeapi (>=0.1.5,<0.2.0)\" , \"typing-extensions (>=3.10.0,<4.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"databind.json\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"databind.core (>=2.0.0-alpha.4,<3.0.0)\" , \"nr.util (>=0.8.6,<1.0.0)\" , \"typing-extensions (>=3.10.0,<4.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"deprecated\" : { \"extras\" : [ \"dev\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"wrapt (<2,>=1.10)\" , \"tox ; extra == 'dev'\" , \"bump2version (<1) ; extra == 'dev'\" , \"sphinx (<2) ; extra == 'dev'\" , \"importlib-metadata (<3) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"importlib-resources (<4) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"configparser (<5) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"sphinxcontrib-websupport (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"zipp (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"PyTest (<5) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov (<2.6) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"1.2.13\" }, \"docutils\" : { \"extras\" : [], \"license_name\" : \"public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt)\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"OS-independent\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\" , \"version\" : \"0.18.1\" }, \"flit\" : { \"extras\" : [ \"doc\" , \"test\" ], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"flit_core >=3.7.1\" , \"requests\" , \"docutils\" , \"tomli\" , \"tomli-w\" , \"sphinx ; extra == \\\"doc\\\"\" , \"sphinxcontrib_github_alt ; extra == \\\"doc\\\"\" , \"pygments-github-lexers ; extra == \\\"doc\\\"\" , \"testpath ; extra == \\\"test\\\"\" , \"responses ; extra == \\\"test\\\"\" , \"pytest>=2.7.3 ; extra == \\\"test\\\"\" , \"pytest-cov ; extra == \\\"test\\\"\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.7.1\" }, \"flit_core\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6\" , \"version\" : \"3.7.1\" }, \"idna\" : { \"extras\" : [], \"license_name\" : \"BSD-3-Clause\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"3.3\" }, \"importlib-metadata\" : { \"extras\" : [ \"docs\" , \"perf\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"zipp (>=0.5)\" , \"typing-extensions (>=3.6.4) ; python_version < \\\"3.8\\\"\" , \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=9) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"ipython ; extra == 'perf'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"packaging ; extra == 'testing'\" , \"pyfakefs ; extra == 'testing'\" , \"flufl.flake8 ; extra == 'testing'\" , \"pytest-perf (>=0.9.2) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy (>=0.9.1) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"importlib-resources (>=1.3) ; (python_version < \\\"3.9\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"4.11.3\" }, \"jeepney\" : { \"extras\" : [ \"trio\" , \"test\" ], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"pytest ; extra == \\\"test\\\"\" , \"pytest-trio ; extra == \\\"test\\\"\" , \"pytest-asyncio >=0.17 ; extra == \\\"test\\\"\" , \"testpath ; extra == \\\"test\\\"\" , \"trio ; extra == \\\"test\\\"\" , \"async-timeout ; extra == \\\"test\\\"\" , \"trio ; extra == \\\"trio\\\"\" , \"async_generator ; extra == \\\"trio\\\" and ( python_version == '3.6')\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"0.8.0\" }, \"keyring\" : { \"extras\" : [ \"docs\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"importlib-metadata (>=3.6)\" , \"SecretStorage (>=3.2) ; sys_platform == \\\"linux\\\"\" , \"jeepney (>=0.4.2) ; sys_platform == \\\"linux\\\"\" , \"pywin32-ctypes (!=0.1.0,!=0.1.1) ; sys_platform == \\\"win32\\\"\" , \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=8.2) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"jaraco.tidelift (>=1.4) ; extra == 'docs'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"23.5.0\" }, \"nr.util\" : { \"extras\" : [ \"config\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"deprecated (>=1.2.0,<2.0.0)\" , \"typing-extensions (>=3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"0.8.8\" }, \"pkginfo\" : { \"extras\" : [ \"testing\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Unix\" , \"requirements\" : [ \"coverage ; extra == 'testing'\" , \"nose ; extra == 'testing'\" ], \"requires_python\" : null , \"version\" : \"1.8.2\" }, \"poetry-core\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"importlib-metadata (>=1.7.0); python_version < \\\"3.8\\\"\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"1.1.0a7\" }, \"ptyprocess\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"0.7.0\" }, \"pycparser\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Cross Platform\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"2.21\" }, \"pygments\" : { \"extras\" : [], \"license_name\" : \"BSD License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"2.11.2\" }, \"pylev\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"1.4.0\" }, \"readme-renderer\" : { \"extras\" : [ \"md\" ], \"license_name\" : \"Apache License, Version 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"bleach (>=2.1.0)\" , \"docutils (>=0.13.1)\" , \"Pygments (>=2.5.1)\" , \"cmarkgfm (>=0.8.0) ; extra == 'md'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"34.0\" }, \"requests\" : { \"extras\" : [ \"security\" , \"use_chardet_on_py3\" , \"socks\" ], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"urllib3 (<1.27,>=1.21.1)\" , \"certifi (>=2017.4.17)\" , \"chardet (<5,>=3.0.2) ; python_version < \\\"3\\\"\" , \"idna (<3,>=2.5) ; python_version < \\\"3\\\"\" , \"charset-normalizer (~=2.0.0) ; python_version >= \\\"3\\\"\" , \"idna (<4,>=2.5) ; python_version >= \\\"3\\\"\" , \"PySocks (!=1.5.7,>=1.5.6) ; extra == 'socks'\" , \"win-inet-pton ; (sys_platform == \\\"win32\\\" and python_version == \\\"2.7\\\") and extra == 'socks'\" , \"chardet (<5,>=3.0.2) ; extra == 'use_chardet_on_py3'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\" , \"version\" : \"2.27.1\" }, \"requests-toolbelt\" : { \"extras\" : [], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"requests (<3.0.0,>=2.0.1)\" ], \"requires_python\" : null , \"version\" : \"0.9.1\" }, \"rfc3986\" : { \"extras\" : [ \"idna2008\" ], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"idna ; extra == 'idna2008'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"2.0.0\" }, \"setuptools\" : { \"extras\" : [ \"docs\" , \"certs\" , \"ssl\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=8.2) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"jaraco.tidelift (>=1.4) ; extra == 'docs'\" , \"pygments-github-lexers (==0.0.5) ; extra == 'docs'\" , \"sphinx-inline-tabs ; extra == 'docs'\" , \"sphinxcontrib-towncrier ; extra == 'docs'\" , \"furo ; extra == 'docs'\" , \"pytest (>=4.6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"mock ; extra == 'testing'\" , \"flake8-2020 ; extra == 'testing'\" , \"virtualenv (>=13.0.0) ; extra == 'testing'\" , \"pytest-virtualenv (>=1.2.7) ; extra == 'testing'\" , \"wheel ; extra == 'testing'\" , \"paver ; extra == 'testing'\" , \"pip (>=19.1) ; extra == 'testing'\" , \"jaraco.envs ; extra == 'testing'\" , \"pytest-xdist ; extra == 'testing'\" , \"sphinx ; extra == 'testing'\" , \"jaraco.path (>=3.2.0) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"58.1.0\" }, \"six\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\" , \"version\" : \"1.16.0\" }, \"soupsieve\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"backports-functools-lru-cache; python_version < '3'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"2.3.2.post1\" }, \"tomli\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.7\" , \"version\" : \"2.0.1\" }, \"tomli-w\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.7\" , \"version\" : \"1.0.0\" }, \"tomlkit\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"0.10.1\" }, \"tqdm\" : { \"extras\" : [ \"notebook\" , \"telegram\" , \"dev\" , \"slack\" ], \"license_name\" : \"MPLv2.0, MIT Licences\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"colorama ; platform_system == \\\"Windows\\\"\" , \"importlib-resources ; python_version < \\\"3.7\\\"\" , \"py-make (>=0.1.0) ; extra == 'dev'\" , \"twine ; extra == 'dev'\" , \"wheel ; extra == 'dev'\" , \"ipywidgets (>=6) ; extra == 'notebook'\" , \"slack-sdk ; extra == 'slack'\" , \"requests ; extra == 'telegram'\" ], \"requires_python\" : \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,>=2.7\" , \"version\" : \"4.64.0\" }, \"twine\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"pkginfo (>=1.8.1)\" , \"readme-renderer (>=21.0)\" , \"requests (>=2.20)\" , \"requests-toolbelt (!=0.9.0,>=0.8.0)\" , \"urllib3 (>=1.26.0)\" , \"tqdm (>=4.14)\" , \"importlib-metadata (>=3.6)\" , \"keyring (>=15.1)\" , \"rfc3986 (>=1.4.0)\" , \"colorama (>=0.4.3)\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.8.0\" }, \"typeapi\" : { \"extras\" : [ \"docs\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"typing-extensions (>=3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"0.1.5\" }, \"typing-extensions\" : { \"extras\" : [], \"license_name\" : \"PSF\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"typing (>=3.7.4) ; python_version < \\\"3.5\\\"\" ], \"requires_python\" : null , \"version\" : \"3.10.0.2\" }, \"urllib3\" : { \"extras\" : [ \"brotli\" , \"secure\" , \"socks\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"brotlicffi (>=0.8.0) ; ((os_name != \\\"nt\\\" or python_version >= \\\"3\\\") and platform_python_implementation != \\\"CPython\\\") and extra == 'brotli'\" , \"brotli (>=1.0.9) ; ((os_name != \\\"nt\\\" or python_version >= \\\"3\\\") and platform_python_implementation == \\\"CPython\\\") and extra == 'brotli'\" , \"brotlipy (>=0.6.0) ; (os_name == \\\"nt\\\" and python_version < \\\"3\\\") and extra == 'brotli'\" , \"pyOpenSSL (>=0.14) ; extra == 'secure'\" , \"cryptography (>=1.3.4) ; extra == 'secure'\" , \"idna (>=2.0.0) ; extra == 'secure'\" , \"certifi ; extra == 'secure'\" , \"ipaddress ; (python_version == \\\"2.7\\\") and extra == 'secure'\" , \"PySocks (!=1.5.7,<2.0,>=1.5.6) ; extra == 'socks'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4\" , \"version\" : \"1.26.9\" }, \"webencodings\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"0.5.1\" }, \"wrapt\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7\" , \"version\" : \"1.14.0\" }, \"zipp\" : { \"extras\" : [ \"docs\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=9) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"jaraco.itertools ; extra == 'testing'\" , \"func-timeout ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy (>=0.9.1) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"3.8.0\" } }, \"missing\" : [ \"importlib-resources\" , \"typing\" ] }","title":"slap report"},{"location":"commands/report/#report","text":"The slap report commands generate reports about your project.","title":"report"},{"location":"commands/report/#subcommands","text":"","title":"Subcommands"},{"location":"commands/report/#slap-report-dependencies","text":"This command is venv aware. Generates a JSON report on the dependencies of your project based on the packages installed in your environment. Usually, the most interesting piece is the license information of every dependency, which is contained in the JSON report. The license name (and text if --with-license-text is specified) is read from the package distribution metadata. The command will only resolve only runtime dependencies by default. You can specify additional extras to include in the resolution using the --extras option. Synopsis report dependencies Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: report dependencies [options] Options: --extras=EXTRAS A comma-separated list of extra dependencies to include. --with-license-text Include license text in the output. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command. Dependencies report for Slap { \"dependencies\" : { \"Deprecated\" : [ \"wrapt\" ], \"SecretStorage\" : [ \"cryptography\" , \"jeepney\" ], \"beautifulsoup4\" : [ \"soupsieve\" ], \"bleach\" : [ \"six\" , \"webencodings\" ], \"cffi\" : [ \"pycparser\" ], \"cleo\" : [ \"crashtest\" , \"pylev\" ], \"cryptography\" : [ \"cffi\" ], \"databind\" : [ \"databind.core\" , \"databind.json\" ], \"databind.core\" : [ \"Deprecated\" , \"nr.util\" , \"typeapi\" , \"typing-extensions\" ], \"databind.json\" : [ \"databind.core\" , \"nr.util\" , \"typing-extensions\" ], \"deprecated\" : [ \"wrapt\" ], \"flit\" : [ \"docutils\" , \"flit_core\" , \"requests\" , \"tomli\" , \"tomli-w\" ], \"importlib-metadata\" : [ \"typing-extensions\" , \"zipp\" ], \"keyring\" : [ \"SecretStorage\" , \"importlib-metadata\" , \"jeepney\" ], \"nr.util\" : [ \"deprecated\" , \"typing-extensions\" ], \"poetry-core\" : [ \"importlib-metadata\" ], \"readme-renderer\" : [ \"Pygments\" , \"bleach\" , \"docutils\" ], \"requests\" : [ \"certifi\" , \"charset-normalizer\" , \"idna\" , \"urllib3\" ], \"requests-toolbelt\" : [ \"requests\" ], \"tqdm\" : [ \"importlib-resources\" ], \"twine\" : [ \"colorama\" , \"importlib-metadata\" , \"keyring\" , \"pkginfo\" , \"readme-renderer\" , \"requests\" , \"requests-toolbelt\" , \"rfc3986\" , \"tqdm\" , \"urllib3\" ], \"typeapi\" : [ \"typing-extensions\" ], \"typing-extensions\" : [ \"typing\" ] }, \"metadata\" : { \"Deprecated\" : { \"extras\" : [ \"dev\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"wrapt (<2,>=1.10)\" , \"tox ; extra == 'dev'\" , \"bump2version (<1) ; extra == 'dev'\" , \"sphinx (<2) ; extra == 'dev'\" , \"importlib-metadata (<3) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"importlib-resources (<4) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"configparser (<5) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"sphinxcontrib-websupport (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"zipp (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"PyTest (<5) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov (<2.6) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"1.2.13\" }, \"PyYAML\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Any\" , \"requirements\" : [], \"requires_python\" : \">=3.6\" , \"version\" : \"6.0\" }, \"Pygments\" : { \"extras\" : [], \"license_name\" : \"BSD License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"2.11.2\" }, \"SecretStorage\" : { \"extras\" : [], \"license_name\" : \"BSD 3-Clause License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Linux\" , \"requirements\" : [ \"cryptography (>=2.0)\" , \"jeepney (>=0.6)\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.3.1\" }, \"beautifulsoup4\" : { \"extras\" : [ \"html5lib\" , \"lxml\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"soupsieve (>1.2)\" , \"html5lib; extra == 'html5lib'\" , \"lxml; extra == 'lxml'\" ], \"requires_python\" : \">=3.6.0\" , \"version\" : \"4.11.1\" }, \"bleach\" : { \"extras\" : [ \"css\" , \"dev\" ], \"license_name\" : \"Apache Software License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"six (>=1.9.0)\" , \"webencodings\" , \"tinycss2 (>=1.1.0<1.2) ; extra == 'css'\" , \"pip-tools (==6.5.1) ; extra == 'dev'\" , \"pytest (==7.1.1) ; extra == 'dev'\" , \"flake8 (==4.0.1) ; extra == 'dev'\" , \"tox (==3.24.5) ; extra == 'dev'\" , \"sphinx (==4.3.2) ; extra == 'dev'\" , \"twine (==4.0.0) ; extra == 'dev'\" , \"wheel (==0.37.1) ; extra == 'dev'\" , \"hashin (==0.17.0) ; extra == 'dev'\" , \"black (==22.3.0) ; (implementation_name == \\\"cpython\\\") and extra == 'dev'\" , \"mypy (==0.942) ; (implementation_name == \\\"cpython\\\") and extra == 'dev'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"5.0.0\" }, \"certifi\" : { \"extras\" : [], \"license_name\" : \"MPL-2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"2021.10.8\" }, \"cffi\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"pycparser\" ], \"requires_python\" : null , \"version\" : \"1.15.0\" }, \"charset-normalizer\" : { \"extras\" : [ \"unicode_backport\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"unicodedata2 ; extra == 'unicode_backport'\" ], \"requires_python\" : \">=3.5.0\" , \"version\" : \"2.0.12\" }, \"cleo\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"crashtest (>=0.3.1,<0.4.0)\" , \"pylev (>=1.3.0,<2.0.0)\" ], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"1.0.0a4\" }, \"colorama\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\" , \"version\" : \"0.4.4\" }, \"crashtest\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"0.3.1\" }, \"cryptography\" : { \"extras\" : [ \"docs\" , \"test\" , \"sdist\" , \"pep8test\" , \"docstest\" , \"ssh\" ], \"license_name\" : \"BSD or Apache License, Version 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"cffi (>=1.12)\" , \"sphinx (!=1.8.0,!=3.1.0,!=3.1.1,>=1.6.5) ; extra == 'docs'\" , \"sphinx-rtd-theme ; extra == 'docs'\" , \"pyenchant (>=1.6.11) ; extra == 'docstest'\" , \"twine (>=1.12.0) ; extra == 'docstest'\" , \"sphinxcontrib-spelling (>=4.0.1) ; extra == 'docstest'\" , \"black ; extra == 'pep8test'\" , \"flake8 ; extra == 'pep8test'\" , \"flake8-import-order ; extra == 'pep8test'\" , \"pep8-naming ; extra == 'pep8test'\" , \"setuptools-rust (>=0.11.4) ; extra == 'sdist'\" , \"bcrypt (>=3.1.5) ; extra == 'ssh'\" , \"pytest (>=6.2.0) ; extra == 'test'\" , \"pytest-cov ; extra == 'test'\" , \"pytest-subtests ; extra == 'test'\" , \"pytest-xdist ; extra == 'test'\" , \"pretend ; extra == 'test'\" , \"iso8601 ; extra == 'test'\" , \"pytz ; extra == 'test'\" , \"hypothesis (!=3.79.2,>=1.11.4) ; extra == 'test'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"36.0.2\" }, \"databind\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"databind.core (>=2.0.0,<3.0.0)\" , \"databind.json (>=2.0.0,<3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"databind.core\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"Deprecated (>=1.2.12,<2.0.0)\" , \"nr.util (>=0.8.8,<1.0.0)\" , \"typeapi (>=0.1.5,<0.2.0)\" , \"typing-extensions (>=3.10.0,<4.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"databind.json\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"databind.core (>=2.0.0-alpha.4,<3.0.0)\" , \"nr.util (>=0.8.6,<1.0.0)\" , \"typing-extensions (>=3.10.0,<4.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"2.0.0\" }, \"deprecated\" : { \"extras\" : [ \"dev\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"wrapt (<2,>=1.10)\" , \"tox ; extra == 'dev'\" , \"bump2version (<1) ; extra == 'dev'\" , \"sphinx (<2) ; extra == 'dev'\" , \"importlib-metadata (<3) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"importlib-resources (<4) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"configparser (<5) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"sphinxcontrib-websupport (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"zipp (<2) ; (python_version < \\\"3\\\") and extra == 'dev'\" , \"PyTest (<5) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov (<2.6) ; (python_version < \\\"3.6\\\") and extra == 'dev'\" , \"PyTest ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" , \"PyTest-Cov ; (python_version >= \\\"3.6\\\") and extra == 'dev'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"1.2.13\" }, \"docutils\" : { \"extras\" : [], \"license_name\" : \"public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt)\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"OS-independent\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\" , \"version\" : \"0.18.1\" }, \"flit\" : { \"extras\" : [ \"doc\" , \"test\" ], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"flit_core >=3.7.1\" , \"requests\" , \"docutils\" , \"tomli\" , \"tomli-w\" , \"sphinx ; extra == \\\"doc\\\"\" , \"sphinxcontrib_github_alt ; extra == \\\"doc\\\"\" , \"pygments-github-lexers ; extra == \\\"doc\\\"\" , \"testpath ; extra == \\\"test\\\"\" , \"responses ; extra == \\\"test\\\"\" , \"pytest>=2.7.3 ; extra == \\\"test\\\"\" , \"pytest-cov ; extra == \\\"test\\\"\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.7.1\" }, \"flit_core\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6\" , \"version\" : \"3.7.1\" }, \"idna\" : { \"extras\" : [], \"license_name\" : \"BSD-3-Clause\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"3.3\" }, \"importlib-metadata\" : { \"extras\" : [ \"docs\" , \"perf\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"zipp (>=0.5)\" , \"typing-extensions (>=3.6.4) ; python_version < \\\"3.8\\\"\" , \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=9) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"ipython ; extra == 'perf'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"packaging ; extra == 'testing'\" , \"pyfakefs ; extra == 'testing'\" , \"flufl.flake8 ; extra == 'testing'\" , \"pytest-perf (>=0.9.2) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy (>=0.9.1) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"importlib-resources (>=1.3) ; (python_version < \\\"3.9\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"4.11.3\" }, \"jeepney\" : { \"extras\" : [ \"trio\" , \"test\" ], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"pytest ; extra == \\\"test\\\"\" , \"pytest-trio ; extra == \\\"test\\\"\" , \"pytest-asyncio >=0.17 ; extra == \\\"test\\\"\" , \"testpath ; extra == \\\"test\\\"\" , \"trio ; extra == \\\"test\\\"\" , \"async-timeout ; extra == \\\"test\\\"\" , \"trio ; extra == \\\"trio\\\"\" , \"async_generator ; extra == \\\"trio\\\" and ( python_version == '3.6')\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"0.8.0\" }, \"keyring\" : { \"extras\" : [ \"docs\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"importlib-metadata (>=3.6)\" , \"SecretStorage (>=3.2) ; sys_platform == \\\"linux\\\"\" , \"jeepney (>=0.4.2) ; sys_platform == \\\"linux\\\"\" , \"pywin32-ctypes (!=0.1.0,!=0.1.1) ; sys_platform == \\\"win32\\\"\" , \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=8.2) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"jaraco.tidelift (>=1.4) ; extra == 'docs'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"23.5.0\" }, \"nr.util\" : { \"extras\" : [ \"config\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"deprecated (>=1.2.0,<2.0.0)\" , \"typing-extensions (>=3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"0.8.8\" }, \"pkginfo\" : { \"extras\" : [ \"testing\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Unix\" , \"requirements\" : [ \"coverage ; extra == 'testing'\" , \"nose ; extra == 'testing'\" ], \"requires_python\" : null , \"version\" : \"1.8.2\" }, \"poetry-core\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"importlib-metadata (>=1.7.0); python_version < \\\"3.8\\\"\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"1.1.0a7\" }, \"ptyprocess\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"0.7.0\" }, \"pycparser\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"Cross Platform\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\" , \"version\" : \"2.21\" }, \"pygments\" : { \"extras\" : [], \"license_name\" : \"BSD License\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \">=3.5\" , \"version\" : \"2.11.2\" }, \"pylev\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"1.4.0\" }, \"readme-renderer\" : { \"extras\" : [ \"md\" ], \"license_name\" : \"Apache License, Version 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"bleach (>=2.1.0)\" , \"docutils (>=0.13.1)\" , \"Pygments (>=2.5.1)\" , \"cmarkgfm (>=0.8.0) ; extra == 'md'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"34.0\" }, \"requests\" : { \"extras\" : [ \"security\" , \"use_chardet_on_py3\" , \"socks\" ], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"urllib3 (<1.27,>=1.21.1)\" , \"certifi (>=2017.4.17)\" , \"chardet (<5,>=3.0.2) ; python_version < \\\"3\\\"\" , \"idna (<3,>=2.5) ; python_version < \\\"3\\\"\" , \"charset-normalizer (~=2.0.0) ; python_version >= \\\"3\\\"\" , \"idna (<4,>=2.5) ; python_version >= \\\"3\\\"\" , \"PySocks (!=1.5.7,>=1.5.6) ; extra == 'socks'\" , \"win-inet-pton ; (sys_platform == \\\"win32\\\" and python_version == \\\"2.7\\\") and extra == 'socks'\" , \"chardet (<5,>=3.0.2) ; extra == 'use_chardet_on_py3'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\" , \"version\" : \"2.27.1\" }, \"requests-toolbelt\" : { \"extras\" : [], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"requests (<3.0.0,>=2.0.1)\" ], \"requires_python\" : null , \"version\" : \"0.9.1\" }, \"rfc3986\" : { \"extras\" : [ \"idna2008\" ], \"license_name\" : \"Apache 2.0\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"idna ; extra == 'idna2008'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"2.0.0\" }, \"setuptools\" : { \"extras\" : [ \"docs\" , \"certs\" , \"ssl\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=8.2) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"jaraco.tidelift (>=1.4) ; extra == 'docs'\" , \"pygments-github-lexers (==0.0.5) ; extra == 'docs'\" , \"sphinx-inline-tabs ; extra == 'docs'\" , \"sphinxcontrib-towncrier ; extra == 'docs'\" , \"furo ; extra == 'docs'\" , \"pytest (>=4.6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"mock ; extra == 'testing'\" , \"flake8-2020 ; extra == 'testing'\" , \"virtualenv (>=13.0.0) ; extra == 'testing'\" , \"pytest-virtualenv (>=1.2.7) ; extra == 'testing'\" , \"wheel ; extra == 'testing'\" , \"paver ; extra == 'testing'\" , \"pip (>=19.1) ; extra == 'testing'\" , \"jaraco.envs ; extra == 'testing'\" , \"pytest-xdist ; extra == 'testing'\" , \"sphinx ; extra == 'testing'\" , \"jaraco.path (>=3.2.0) ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"58.1.0\" }, \"six\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\" , \"version\" : \"1.16.0\" }, \"soupsieve\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"backports-functools-lru-cache; python_version < '3'\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"2.3.2.post1\" }, \"tomli\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.7\" , \"version\" : \"2.0.1\" }, \"tomli-w\" : { \"extras\" : [], \"license_name\" : null , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.7\" , \"version\" : \"1.0.0\" }, \"tomlkit\" : { \"extras\" : [], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [], \"requires_python\" : \">=3.6,<4.0\" , \"version\" : \"0.10.1\" }, \"tqdm\" : { \"extras\" : [ \"notebook\" , \"telegram\" , \"dev\" , \"slack\" ], \"license_name\" : \"MPLv2.0, MIT Licences\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [ \"colorama ; platform_system == \\\"Windows\\\"\" , \"importlib-resources ; python_version < \\\"3.7\\\"\" , \"py-make (>=0.1.0) ; extra == 'dev'\" , \"twine ; extra == 'dev'\" , \"wheel ; extra == 'dev'\" , \"ipywidgets (>=6) ; extra == 'notebook'\" , \"slack-sdk ; extra == 'slack'\" , \"requests ; extra == 'telegram'\" ], \"requires_python\" : \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,>=2.7\" , \"version\" : \"4.64.0\" }, \"twine\" : { \"extras\" : [], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"pkginfo (>=1.8.1)\" , \"readme-renderer (>=21.0)\" , \"requests (>=2.20)\" , \"requests-toolbelt (!=0.9.0,>=0.8.0)\" , \"urllib3 (>=1.26.0)\" , \"tqdm (>=4.14)\" , \"importlib-metadata (>=3.6)\" , \"keyring (>=15.1)\" , \"rfc3986 (>=1.4.0)\" , \"colorama (>=0.4.3)\" ], \"requires_python\" : \">=3.6\" , \"version\" : \"3.8.0\" }, \"typeapi\" : { \"extras\" : [ \"docs\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : null , \"requirements\" : [ \"typing-extensions (>=3.0.0)\" ], \"requires_python\" : \">=3.7,<4.0\" , \"version\" : \"0.1.5\" }, \"typing-extensions\" : { \"extras\" : [], \"license_name\" : \"PSF\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"typing (>=3.7.4) ; python_version < \\\"3.5\\\"\" ], \"requires_python\" : null , \"version\" : \"3.10.0.2\" }, \"urllib3\" : { \"extras\" : [ \"brotli\" , \"secure\" , \"socks\" ], \"license_name\" : \"MIT\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"brotlicffi (>=0.8.0) ; ((os_name != \\\"nt\\\" or python_version >= \\\"3\\\") and platform_python_implementation != \\\"CPython\\\") and extra == 'brotli'\" , \"brotli (>=1.0.9) ; ((os_name != \\\"nt\\\" or python_version >= \\\"3\\\") and platform_python_implementation == \\\"CPython\\\") and extra == 'brotli'\" , \"brotlipy (>=0.6.0) ; (os_name == \\\"nt\\\" and python_version < \\\"3\\\") and extra == 'brotli'\" , \"pyOpenSSL (>=0.14) ; extra == 'secure'\" , \"cryptography (>=1.3.4) ; extra == 'secure'\" , \"idna (>=2.0.0) ; extra == 'secure'\" , \"certifi ; extra == 'secure'\" , \"ipaddress ; (python_version == \\\"2.7\\\") and extra == 'secure'\" , \"PySocks (!=1.5.7,<2.0,>=1.5.6) ; extra == 'socks'\" ], \"requires_python\" : \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4\" , \"version\" : \"1.26.9\" }, \"webencodings\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [], \"requires_python\" : null , \"version\" : \"0.5.1\" }, \"wrapt\" : { \"extras\" : [], \"license_name\" : \"BSD\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"any\" , \"requirements\" : [], \"requires_python\" : \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7\" , \"version\" : \"1.14.0\" }, \"zipp\" : { \"extras\" : [ \"docs\" , \"testing\" ], \"license_name\" : \"UNKNOWN\" , \"location\" : \"/home/runner/work/slap/slap/.venvs/runtime/lib/python3.10/site-packages\" , \"platform\" : \"UNKNOWN\" , \"requirements\" : [ \"sphinx ; extra == 'docs'\" , \"jaraco.packaging (>=9) ; extra == 'docs'\" , \"rst.linker (>=1.9) ; extra == 'docs'\" , \"pytest (>=6) ; extra == 'testing'\" , \"pytest-checkdocs (>=2.4) ; extra == 'testing'\" , \"pytest-flake8 ; extra == 'testing'\" , \"pytest-cov ; extra == 'testing'\" , \"pytest-enabler (>=1.0.1) ; extra == 'testing'\" , \"jaraco.itertools ; extra == 'testing'\" , \"func-timeout ; extra == 'testing'\" , \"pytest-black (>=0.3.7) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" , \"pytest-mypy (>=0.9.1) ; (platform_python_implementation != \\\"PyPy\\\") and extra == 'testing'\" ], \"requires_python\" : \">=3.7\" , \"version\" : \"3.8.0\" } }, \"missing\" : [ \"importlib-resources\" , \"typing\" ] }","title":"slap report dependencies"},{"location":"commands/run/","text":"slap run This command is venv aware. Runs a command, using the commands configured under the [tool.slap.run] section as a source for aliases. If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the command is run. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: run [options] [--] <args>... Arguments: args Command name and arguments. Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command. Configuration Option scope: [tool.slap.run] or [run] Option Type Default Description <name> str n/a A command as a string to run with the system shell. Example configuration pyproject.toml slap.toml [tool.slap.run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\" [run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\" $ slap run docs:dev ...","title":"slap run"},{"location":"commands/run/#slap-run","text":"This command is venv aware. Runs a command, using the commands configured under the [tool.slap.run] section as a source for aliases. If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the command is run. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: run [options] [--] <args>... Arguments: args Command name and arguments. Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command.","title":"slap run"},{"location":"commands/run/#configuration","text":"Option scope: [tool.slap.run] or [run] Option Type Default Description <name> str n/a A command as a string to run with the system shell. Example configuration pyproject.toml slap.toml [tool.slap.run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\" [run] \"docs:build\" = \"cd docs && novella --base-url slap/\" \"docs:dev\" = \"cd docs && novella --serve\" $ slap run docs:dev ...","title":"Configuration"},{"location":"commands/test/","text":"slap test This command is venv aware. Runs some or all of the tests from the Slap configuration. This is different from slap run in that by default it runs multiple commands, prefixes the output them with the test name (similar to docker-compose logs ), works across multiple projects in a mono-repository and prints a summary of the results at the end. If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the test commands are run. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: test [options] [--] [<test>...] Arguments: test One or more tests to run (runs all if none are specified) Options: -s, --no-line-prefix Do not prefix output from the test commands with the test name (default if a single argument for test is specified). -l, --list List all available tests -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command. Configuration Option scope: [tool.slap.run] or [run] Option Type Default Description <name> str n/a A command as a string to run with the system shell. An example configuration pyproject.toml [tool.slap.test] check = \"slap check\" mypy = \"mypy src/\" pytest = \"pytest test/\" Example from the databind project Databind is a mono-repository of three Python projects, two of which have tests set up. Running `slap test` in the project root folder runs all tests of all projects. $ slap test databind.core:mypy| Success: no issues found in 8 source files databind.core:pytest| ================== test session starts ================== databind.core:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0 databind.core:pytest| rootdir: /home/niklas/git/databind/databind.core collected 17 items databind.core:pytest| databind.core:pytest| test/test_context.py . [ 5%] databind.core:pytest| test/test_schema.py ................ [100%] databind.core:pytest| databind.core:pytest| ================== 17 passed in 0.05s =================== databind.json:mypy| Success: no issues found in 5 source files databind.json:pytest| ================== test session starts ================== databind.json:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0 databind.json:pytest| rootdir: /home/niklas/git/databind/databind.json collected 32 items databind.json:pytest| databind.json:pytest| test/test_converters.py ......................... [ 78%] databind.json:pytest| ....... [100%] databind.json:pytest| databind.json:pytest| ================== 32 passed in 0.11s =================== test summary: \u2022 databind.core:mypy (exit code: 0) \u2022 databind.core:pytest (exit code: 0) \u2022 databind.json:mypy (exit code: 0) \u2022 databind.json:pytest (exit code: 0) Test selection If no test positional argument is specified, all tests in the project or projects of the repository will be run. ( $ slap test ) To run the tests of only one project while in a mono-repository folder, pass the project name as the test argument. ( $ slap test databind.core ) To run tests of the same name across all projects, pass the test name prefixed with a colon as the test argument. ( $ slap test :mypy ) To run only one particular test from a given project, pass the project name and test name separated by a colon as the test argument. ( $ slap test databind.core:mypy )","title":"slap test"},{"location":"commands/test/#slap-test","text":"This command is venv aware. Runs some or all of the tests from the Slap configuration. This is different from slap run in that by default it runs multiple commands, prefixes the output them with the test name (similar to docker-compose logs ), works across multiple projects in a mono-repository and prints a summary of the results at the end. If there is an active virtual environment and you are not already in a virtual environment, it will be activated before the test commands are run. Synopsis Description: Base class for commands that should be aware of the active local virtual environment. Before the Usage: test [options] [--] [<test>...] Arguments: test One or more tests to run (runs all if none are specified) Options: -s, --no-line-prefix Do not prefix output from the test commands with the test name (default if a single argument for test is specified). -l, --list List all available tests -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Base class for commands that should be aware of the active local virtual environment. Before the command is executed, it will check if we're currently in a virtual environment. If not, it will activate the environment that is considered \"active\" by the Slap `venv` command.","title":"slap test"},{"location":"commands/test/#configuration","text":"Option scope: [tool.slap.run] or [run] Option Type Default Description <name> str n/a A command as a string to run with the system shell. An example configuration pyproject.toml [tool.slap.test] check = \"slap check\" mypy = \"mypy src/\" pytest = \"pytest test/\" Example from the databind project Databind is a mono-repository of three Python projects, two of which have tests set up. Running `slap test` in the project root folder runs all tests of all projects. $ slap test databind.core:mypy| Success: no issues found in 8 source files databind.core:pytest| ================== test session starts ================== databind.core:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0 databind.core:pytest| rootdir: /home/niklas/git/databind/databind.core collected 17 items databind.core:pytest| databind.core:pytest| test/test_context.py . [ 5%] databind.core:pytest| test/test_schema.py ................ [100%] databind.core:pytest| databind.core:pytest| ================== 17 passed in 0.05s =================== databind.json:mypy| Success: no issues found in 5 source files databind.json:pytest| ================== test session starts ================== databind.json:pytest| platform linux -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0 databind.json:pytest| rootdir: /home/niklas/git/databind/databind.json collected 32 items databind.json:pytest| databind.json:pytest| test/test_converters.py ......................... [ 78%] databind.json:pytest| ....... [100%] databind.json:pytest| databind.json:pytest| ================== 32 passed in 0.11s =================== test summary: \u2022 databind.core:mypy (exit code: 0) \u2022 databind.core:pytest (exit code: 0) \u2022 databind.json:mypy (exit code: 0) \u2022 databind.json:pytest (exit code: 0)","title":"Configuration"},{"location":"commands/test/#test-selection","text":"If no test positional argument is specified, all tests in the project or projects of the repository will be run. ( $ slap test ) To run the tests of only one project while in a mono-repository folder, pass the project name as the test argument. ( $ slap test databind.core ) To run tests of the same name across all projects, pass the test name prefixed with a colon as the test argument. ( $ slap test :mypy ) To run only one particular test from a given project, pass the project name and test name separated by a colon as the test argument. ( $ slap test databind.core:mypy )","title":"Test selection"},{"location":"commands/venv/","text":"slap venv The slap venv command is a utility for managing virtual environments created using the standard library venv module in the current directory or globally (in ~/.local/venvs ). Slap keeps track of an \"active\" environment that is used activated by default by commands such as slap install , slap link , slap run and slap test before they perform their regular duties. This allows you to not have to actually activate a virtual environment while still operating within it while using Slap commands (similar to poetry run , etc.). Synopsis venv Description: Create, activate and remove virtual environments. Usage: venv [options] [--] [<name>] Arguments: name The environment name. Options: -g, --global Manage virtual environments in the global scope instead of the local directory. -a, --activate Activate the environment given by the environment name. Note that using this option if used directly with the Slap CLI will cause an error because it needs to be shadowed by a function of your shell. -c, --create Create the environment with the given environment name. If no name is specified, the environment name will be the major.minor version of the current Python version. -d, --delete Delete the environment with the given environment name. -s, --set Similar to -a,--activate, but it will not activate the environment in your active shell even if you have the Slap shim installed (see -i,--init-code). -l, --list List the available environments. -p, --path Print the path of the specified or the current venv. Exit with status code 1 and no output if the environment does not exist or there is no current environment. -i, --init-code=INIT-CODE Print the code snippet that can be placed in your shells init scripts to shadow this command in order to properly make use of the -a,--activate option. Currently supported shells are: bash --python=PYTHON The Python executable to use to create the virtual environment. If this is not specified, it defaults to python + the environment name if the environment name looks like a version number (contains numbers and dots). Otehrwise, it defaults to python3. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Create, activate and remove virtual environments. This command makes it easy to create and manage virtual environments, locally as well as globally. Local environments are stored in the `.venvs/` directory in the current directory. Global environments are stored in `~/.local/venvs`. In order to be able to use the -a,--activate option directly from this command, it must be shadowed by a function in your shell. Use the -i,--init-code command to get a code snippet that you can place in your shell's init scripts. Usage Example: $ slap venv -i bash >> ~/.profile; source ~/.profile $ slap venv -cg craftr creating global environment \"craftr\" (using python3) $ slap venv -lg 1 environment in \"/home/niklas/.local/venvs\" \u2022 craftr 3.10.2 (main, Jan 15 2022, 18:02:07) [GCC 9.3.0] $ slap venv -ag craftr (craftr) $ Note that most Slap commands support using the active virtual environment it to be active in your shell (such as `slap run`, `slap test`, `slap install`, etc.). Synopsis venv link Description: Link executables from a global virtual environment. Usage: venv link [options] [--] <name> <program> Arguments: name The global environment name. program The name of the program to link. Options: -g, --global Manage virtual environments in the global scope instead of the local directory. -f, --force Overwrite the link target if it already exists. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Configuration The venv command does not have any Slap configuration options. However, in order to use the slap venv --activate option properly, you need to configure your shell to shadow the slap command with a function such that it can source the activate script. To do this, run $ slap venv -i <shell> and add the output to your shell init scripts. Currently, the -i option only supports bash as an argument. $ slap venv -i bash which slap >/dev/null && eval \" $( SLAP_SHADOW = true slap venv -i bash ) \" What will be evaluated in your init script then implements the shadow function: $ SLAP_SHADOW=true slap venv -i bash function slap () { local ORIGINAL = $( which slap ) if ! [ $? = 0 ] ; then > & 2 echo \"error: command 'slap' does not exist\" return 127 fi if [ \" $1 \" == \"venv\" ] && [[ \" $2 \" = ~ - [ gc ] *a [ gc ] * ]] ; then eval \" $( SLAP_SHADOW = true \" $ORIGINAL \" \" $@ \" ) \" else \" $ORIGINAL \" \" $@ \" fi return $? } Now you can enjoy using slap venv -a [-g] [<env>] to activate a virtual environment. Activate behaviour Using -a,--activate without arguments will pick the most recently activated environment in the current context, or if that is not available, the one and only virtual environment. If multiple environments exist in that case, it is an error.","title":"slap venv"},{"location":"commands/venv/#slap-venv","text":"The slap venv command is a utility for managing virtual environments created using the standard library venv module in the current directory or globally (in ~/.local/venvs ). Slap keeps track of an \"active\" environment that is used activated by default by commands such as slap install , slap link , slap run and slap test before they perform their regular duties. This allows you to not have to actually activate a virtual environment while still operating within it while using Slap commands (similar to poetry run , etc.). Synopsis venv Description: Create, activate and remove virtual environments. Usage: venv [options] [--] [<name>] Arguments: name The environment name. Options: -g, --global Manage virtual environments in the global scope instead of the local directory. -a, --activate Activate the environment given by the environment name. Note that using this option if used directly with the Slap CLI will cause an error because it needs to be shadowed by a function of your shell. -c, --create Create the environment with the given environment name. If no name is specified, the environment name will be the major.minor version of the current Python version. -d, --delete Delete the environment with the given environment name. -s, --set Similar to -a,--activate, but it will not activate the environment in your active shell even if you have the Slap shim installed (see -i,--init-code). -l, --list List the available environments. -p, --path Print the path of the specified or the current venv. Exit with status code 1 and no output if the environment does not exist or there is no current environment. -i, --init-code=INIT-CODE Print the code snippet that can be placed in your shells init scripts to shadow this command in order to properly make use of the -a,--activate option. Currently supported shells are: bash --python=PYTHON The Python executable to use to create the virtual environment. If this is not specified, it defaults to python + the environment name if the environment name looks like a version number (contains numbers and dots). Otehrwise, it defaults to python3. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Help: Create, activate and remove virtual environments. This command makes it easy to create and manage virtual environments, locally as well as globally. Local environments are stored in the `.venvs/` directory in the current directory. Global environments are stored in `~/.local/venvs`. In order to be able to use the -a,--activate option directly from this command, it must be shadowed by a function in your shell. Use the -i,--init-code command to get a code snippet that you can place in your shell's init scripts. Usage Example: $ slap venv -i bash >> ~/.profile; source ~/.profile $ slap venv -cg craftr creating global environment \"craftr\" (using python3) $ slap venv -lg 1 environment in \"/home/niklas/.local/venvs\" \u2022 craftr 3.10.2 (main, Jan 15 2022, 18:02:07) [GCC 9.3.0] $ slap venv -ag craftr (craftr) $ Note that most Slap commands support using the active virtual environment it to be active in your shell (such as `slap run`, `slap test`, `slap install`, etc.). Synopsis venv link Description: Link executables from a global virtual environment. Usage: venv link [options] [--] <name> <program> Arguments: name The global environment name. program The name of the program to link. Options: -g, --global Manage virtual environments in the global scope instead of the local directory. -f, --force Overwrite the link target if it already exists. -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.","title":"slap venv"},{"location":"commands/venv/#configuration","text":"The venv command does not have any Slap configuration options. However, in order to use the slap venv --activate option properly, you need to configure your shell to shadow the slap command with a function such that it can source the activate script. To do this, run $ slap venv -i <shell> and add the output to your shell init scripts. Currently, the -i option only supports bash as an argument. $ slap venv -i bash which slap >/dev/null && eval \" $( SLAP_SHADOW = true slap venv -i bash ) \" What will be evaluated in your init script then implements the shadow function: $ SLAP_SHADOW=true slap venv -i bash function slap () { local ORIGINAL = $( which slap ) if ! [ $? = 0 ] ; then > & 2 echo \"error: command 'slap' does not exist\" return 127 fi if [ \" $1 \" == \"venv\" ] && [[ \" $2 \" = ~ - [ gc ] *a [ gc ] * ]] ; then eval \" $( SLAP_SHADOW = true \" $ORIGINAL \" \" $@ \" ) \" else \" $ORIGINAL \" \" $@ \" fi return $? } Now you can enjoy using slap venv -a [-g] [<env>] to activate a virtual environment.","title":"Configuration"},{"location":"commands/venv/#activate-behaviour","text":"Using -a,--activate without arguments will pick the most recently activated environment in the current context, or if that is not available, the one and only virtual environment. If multiple environments exist in that case, it is an error.","title":"Activate behaviour"},{"location":"guides/github/","text":"Using Slap in GitHub repositories Most of Slap's functionality is independent of the repository hosting service that you use. However, Slap comes with some built-in utities to make integration with GitHub easier. GitHub Actions Install Slap The NiklasRosenstein/slap@gha/install/v1 action installs Slap for you. It does this by setting up Python 3.10 and installing Slap via Pipx. Note Use this action before you run your own step of actions/setup-python@v2 as after this action the current Python version will be 3.10. The version option defaults to * , which installs the latest version of Slap. It is recommended that you pick an exact version for your configuration to avoid surprises. .github/workflows/python.yml jobs : test : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : NiklasRosenstein/slap@gha/install/v1 with : { version : '*' } - uses : actions/setup-python@v2 with : { python-version : \"3.x\" } - run : slap install --no-venv-check - run : slap test Update Changelogs The slap changelog update-pr command updates the PR references of changelogs added between two Git revisions. In addition, by passing --use github-actions , there is almost no need for any additional configuration inside of a GitHub action run for a Pull Request event. The NiklasRosenstein/slap@gha/changelog/update/v1 action makes automatically updated changelogs a breeze: .github/workflows/python.yml on : [ pull_request ] jobs : changelog-update : runs-on : ubuntu-latest if : github.event_name == 'pull_request' steps : - uses : actions/checkout@v2 - uses : NiklasRosenstein/slap@gha/changelog/update/v1 with : { version : '*' }","title":"GitHub"},{"location":"guides/github/#using-slap-in-github-repositories","text":"Most of Slap's functionality is independent of the repository hosting service that you use. However, Slap comes with some built-in utities to make integration with GitHub easier.","title":"Using Slap in GitHub repositories"},{"location":"guides/github/#github-actions","text":"","title":"GitHub Actions"},{"location":"guides/github/#install-slap","text":"The NiklasRosenstein/slap@gha/install/v1 action installs Slap for you. It does this by setting up Python 3.10 and installing Slap via Pipx. Note Use this action before you run your own step of actions/setup-python@v2 as after this action the current Python version will be 3.10. The version option defaults to * , which installs the latest version of Slap. It is recommended that you pick an exact version for your configuration to avoid surprises. .github/workflows/python.yml jobs : test : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : NiklasRosenstein/slap@gha/install/v1 with : { version : '*' } - uses : actions/setup-python@v2 with : { python-version : \"3.x\" } - run : slap install --no-venv-check - run : slap test","title":"Install Slap"},{"location":"guides/github/#update-changelogs","text":"The slap changelog update-pr command updates the PR references of changelogs added between two Git revisions. In addition, by passing --use github-actions , there is almost no need for any additional configuration inside of a GitHub action run for a Pull Request event. The NiklasRosenstein/slap@gha/changelog/update/v1 action makes automatically updated changelogs a breeze: .github/workflows/python.yml on : [ pull_request ] jobs : changelog-update : runs-on : ubuntu-latest if : github.event_name == 'pull_request' steps : - uses : actions/checkout@v2 - uses : NiklasRosenstein/slap@gha/changelog/update/v1 with : { version : '*' }","title":"Update Changelogs"}]}