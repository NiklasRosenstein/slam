{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"shut Shut is a CLI that provides utilities for developing on Python projects. It works well with [Poetry][] projects in particular, but you're not required to use it. Available commands: check Run sanity checks on your Python project. help Displays help for a command. link Symlink your Python package with the help of Flit. release Create a new release of your Python package. test Execute commands configured in [tool.shut.test]. log log add Add an entry to the unreleased changelog via the CLI. log convert Convert Shut's old YAML based changelogs to new style TOML changelogs. log format Format the changelog in the terminal or in Markdown format. log pr update Update the pr field of changelog entries in a commit range. Installation It is recommended to install Shut via Pipx, but you can also install it with Pip directly. $ pipx install shut Copyright \u00a9 2022 Niklas Rosenstein","title":"shut"},{"location":"#shut","text":"Shut is a CLI that provides utilities for developing on Python projects. It works well with [Poetry][] projects in particular, but you're not required to use it. Available commands: check Run sanity checks on your Python project. help Displays help for a command. link Symlink your Python package with the help of Flit. release Create a new release of your Python package. test Execute commands configured in [tool.shut.test]. log log add Add an entry to the unreleased changelog via the CLI. log convert Convert Shut's old YAML based changelogs to new style TOML changelogs. log format Format the changelog in the terminal or in Markdown format. log pr update Update the pr field of changelog entries in a commit range.","title":"shut"},{"location":"#installation","text":"It is recommended to install Shut via Pipx, but you can also install it with Pip directly. $ pipx install shut Copyright \u00a9 2022 Niklas Rosenstein","title":"Installation"},{"location":"configuration/","text":"Configuration The Shut configuration is read either from a shut.toml file or from the [tool.shut] section in pyproject.toml . When a configuration value is described in the documentation, it is referenced without the [tool.shut] prefix that is needed in the case where the configuration is loaded from pyproject.toml . Check out the documentation for each command separately to understand how they can be configured. Application configuration plugins.disable Type : list[str] | None Default : None A list of plugins to disable, subtracting from the list of plugins that are loaded by default. By default, all builtin plugins provided directly by Shut will be loaded. External plugins need to be enabled explicitly with plugins.enable . plugins.enable Type : list[str] | None Default : None A list of plugins to enable in addition to the list of plugins that are loaded by default (i.e. all the Shut builtin plugins). External plugins need to be enabled explicitly with this option. source-directory Type : str | None Default : None The directory in which the Python source code resides. If not set, Shut will attempt to look into ./src/ first and then ./ . This is used to detect the Python packages. Todo : If [tool.poetry.packages] is set, try and use that over manually detecting the packages. typed Type : bool Default : True Whether the project uses type hints.","title":"Configuration"},{"location":"configuration/#configuration","text":"The Shut configuration is read either from a shut.toml file or from the [tool.shut] section in pyproject.toml . When a configuration value is described in the documentation, it is referenced without the [tool.shut] prefix that is needed in the case where the configuration is loaded from pyproject.toml . Check out the documentation for each command separately to understand how they can be configured.","title":"Configuration"},{"location":"configuration/#application-configuration","text":"","title":"Application configuration"},{"location":"configuration/#pluginsdisable","text":"Type : list[str] | None Default : None A list of plugins to disable, subtracting from the list of plugins that are loaded by default. By default, all builtin plugins provided directly by Shut will be loaded. External plugins need to be enabled explicitly with plugins.enable .","title":"plugins.disable"},{"location":"configuration/#pluginsenable","text":"Type : list[str] | None Default : None A list of plugins to enable in addition to the list of plugins that are loaded by default (i.e. all the Shut builtin plugins). External plugins need to be enabled explicitly with this option.","title":"plugins.enable"},{"location":"configuration/#source-directory","text":"Type : str | None Default : None The directory in which the Python source code resides. If not set, Shut will attempt to look into ./src/ first and then ./ . This is used to detect the Python packages. Todo : If [tool.poetry.packages] is set, try and use that over manually detecting the packages.","title":"source-directory"},{"location":"configuration/#typed","text":"Type : bool Default : True Whether the project uses type hints.","title":"typed"},{"location":"plugins/","text":"Plugins A lot of Shut's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Shut further. Types of plugins ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. CheckPlugin \u2013 The type of plugin used by shut check . ReleasePlugin \u2013 The type of plugin used by shut release to detect version references. RemoteDetectorPlugin \u2013 A type of plugin that is intended to automatically detect the type of remote repository used in a project and return an appropriate ChangelogValidator for use by the shut log commands. Plugin API Documentation @pydoc shut.application.ApplicationPlugin @pydoc shut.commands.check.api.CheckPlugin @pydoc shut.commands.release.api.ReleasePlugin @pydoc shut.commands.log.api.RemoteDetectorPlugin @pydoc shut.commands.log.api.RemoteProvider","title":"Plugins"},{"location":"plugins/#plugins","text":"A lot of Shut's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Shut further.","title":"Plugins"},{"location":"plugins/#types-of-plugins","text":"ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. CheckPlugin \u2013 The type of plugin used by shut check . ReleasePlugin \u2013 The type of plugin used by shut release to detect version references. RemoteDetectorPlugin \u2013 A type of plugin that is intended to automatically detect the type of remote repository used in a project and return an appropriate ChangelogValidator for use by the shut log commands.","title":"Types of plugins"},{"location":"plugins/#plugin-api-documentation","text":"@pydoc shut.application.ApplicationPlugin @pydoc shut.commands.check.api.CheckPlugin @pydoc shut.commands.release.api.ReleasePlugin @pydoc shut.commands.log.api.RemoteDetectorPlugin @pydoc shut.commands.log.api.RemoteProvider","title":"Plugin API Documentation"},{"location":"commands/check/","text":"shut check The shut check command performs sanity checks on your project. Configuration check.plugins Type : list[str] Default : [\"log\", \"poetry\", \"release\", \"shut\"] A list of check plugins to use. Note that the Poetry plugin will only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't use it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group. Todo : Error if a specified plugin does not exist. Built-in checks log The ChangelogConsistencyCheck checks if the changelogs managed by Shut are in order. log:validate Checks if all structured changelog files managed by Shut can be loaded and are valid. shut The ShutChecksPlugin provides all Python specific checks. shut:packages Checks if Shut can detect at least one package. shut:typed Checks if the project is typed but does not contain a py.typed file or the other way round. This currently relies on the $.typed configuration and does not inspect the code for type hints. poetry The PoetryChecksPlugin will perform some Poetry specific configuration checks. poetry:readme Checks if the project readme is configured correctly or if Poetry is able to automatically pick up the readme file if it is not configured. This inspects te [tool.poetry.readme] or [project.readme] settings in pyproject.toml and compares it with the readme file that was automatically identified by Shut (which is a file called README, case-insensitive with one of the suffixes in the order of .md , .rst , .txt , or if that does not match, any file beginning with README. ). poetry:urls Checks if the homepage key is set in [tool.poetry] , TODO Also warn for missing issue and documentation URL poetry:classifiers TODO Check if all classifiers in [tool.poetry.classifiers] are valid. poetry:license TODO Check if the license is a valid SPDX license identifier. Todo : More of those checks should also support looking into [project] . release The ReleaseChecksPlugin performs checks to validate that shut release can be used properly. release:version Checks if the __version__ can be detected in the source code of all detected packages. release:remote TODO Checks if the VCS remote is configured or can be detected automatically such that the shut release --create-release option can be used.","title":"shut check"},{"location":"commands/check/#shut-check","text":"The shut check command performs sanity checks on your project.","title":"shut check"},{"location":"commands/check/#configuration","text":"","title":"Configuration"},{"location":"commands/check/#checkplugins","text":"Type : list[str] Default : [\"log\", \"poetry\", \"release\", \"shut\"] A list of check plugins to use. Note that the Poetry plugin will only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't use it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group. Todo : Error if a specified plugin does not exist.","title":"check.plugins"},{"location":"commands/check/#built-in-checks","text":"","title":"Built-in checks"},{"location":"commands/check/#log","text":"The ChangelogConsistencyCheck checks if the changelogs managed by Shut are in order.","title":"log"},{"location":"commands/check/#logvalidate","text":"Checks if all structured changelog files managed by Shut can be loaded and are valid.","title":"log:validate"},{"location":"commands/check/#shut","text":"The ShutChecksPlugin provides all Python specific checks.","title":"shut"},{"location":"commands/check/#shutpackages","text":"Checks if Shut can detect at least one package.","title":"shut:packages"},{"location":"commands/check/#shuttyped","text":"Checks if the project is typed but does not contain a py.typed file or the other way round. This currently relies on the $.typed configuration and does not inspect the code for type hints.","title":"shut:typed"},{"location":"commands/check/#poetry","text":"The PoetryChecksPlugin will perform some Poetry specific configuration checks.","title":"poetry"},{"location":"commands/check/#poetryreadme","text":"Checks if the project readme is configured correctly or if Poetry is able to automatically pick up the readme file if it is not configured. This inspects te [tool.poetry.readme] or [project.readme] settings in pyproject.toml and compares it with the readme file that was automatically identified by Shut (which is a file called README, case-insensitive with one of the suffixes in the order of .md , .rst , .txt , or if that does not match, any file beginning with README. ).","title":"poetry:readme"},{"location":"commands/check/#poetryurls","text":"Checks if the homepage key is set in [tool.poetry] , TODO Also warn for missing issue and documentation URL","title":"poetry:urls"},{"location":"commands/check/#poetryclassifiers","text":"TODO Check if all classifiers in [tool.poetry.classifiers] are valid.","title":"poetry:classifiers"},{"location":"commands/check/#poetrylicense","text":"TODO Check if the license is a valid SPDX license identifier. Todo : More of those checks should also support looking into [project] .","title":"poetry:license"},{"location":"commands/check/#release","text":"The ReleaseChecksPlugin performs checks to validate that shut release can be used properly.","title":"release"},{"location":"commands/check/#releaseversion","text":"Checks if the __version__ can be detected in the source code of all detected packages.","title":"release:version"},{"location":"commands/check/#releaseremote","text":"TODO Checks if the VCS remote is configured or can be detected automatically such that the shut release --create-release option can be used.","title":"release:remote"},{"location":"commands/link/","text":"shut link This is particularly interesting when managing the package with Poetry as it does not currently support editable installs (as of Poetry 1.2.0a2 on 2022-01-14). This is a little helper command that will temporarily reorganize the pyproject.toml to be compatible with Flit and make use if it's symlink installation feature ( flit install -s ). $ shut link Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> /home/niklas/.local/venvs/craftr/lib/python3.10/site-packages/my_package","title":"shut link"},{"location":"commands/link/#shut-link","text":"This is particularly interesting when managing the package with Poetry as it does not currently support editable installs (as of Poetry 1.2.0a2 on 2022-01-14). This is a little helper command that will temporarily reorganize the pyproject.toml to be compatible with Flit and make use if it's symlink installation feature ( flit install -s ). $ shut link Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> /home/niklas/.local/venvs/craftr/lib/python3.10/site-packages/my_package","title":"shut link"},{"location":"commands/log/","text":"shut log The shut log command can be used to manage changelog files which are usually stored in a .changelog/ directory, but the directory can be changed using the tool.shut.changelog-dir option. The CLI allows you to add new entries as well as print them in a pretty format in the terminal or render the changelog as Markdown. A changelog entry has a unique ID, one or more tags that categorize the type of change, one or more authors, a short description, maybe a link to a pull request and links to issues that are fixed by the change. $ shut log add -t fix,docs -m 'Fix the documentation' --fixes 231,234 # Added changelog entry to .changelog/_unreleased.toml id = \"d0092ba\" tags = [ \"fix\", \"docs\" ] message = \"Fix the documentation\" fixes = [ \"https://github.com/username/repo/issues/231\", \"https://github.com/username/repo/issues/234\", ] pr = null The pr value can be set manually once a PR was created, or be updated automatically for example through a GitHub action or other type of CI job (the shut log inject-pr-url command can help with that). Configuration log.directory Type : str Default : .changelog/ The directory in which the changelogs are stored. log.valid-types Type : list[str] Default : `[\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types. log.remote Type : RemoteProvider | None Default : None If None , will be automatically detected using the RemoteDetectorPlugin plugins.","title":"shut log"},{"location":"commands/log/#shut-log","text":"The shut log command can be used to manage changelog files which are usually stored in a .changelog/ directory, but the directory can be changed using the tool.shut.changelog-dir option. The CLI allows you to add new entries as well as print them in a pretty format in the terminal or render the changelog as Markdown. A changelog entry has a unique ID, one or more tags that categorize the type of change, one or more authors, a short description, maybe a link to a pull request and links to issues that are fixed by the change. $ shut log add -t fix,docs -m 'Fix the documentation' --fixes 231,234 # Added changelog entry to .changelog/_unreleased.toml id = \"d0092ba\" tags = [ \"fix\", \"docs\" ] message = \"Fix the documentation\" fixes = [ \"https://github.com/username/repo/issues/231\", \"https://github.com/username/repo/issues/234\", ] pr = null The pr value can be set manually once a PR was created, or be updated automatically for example through a GitHub action or other type of CI job (the shut log inject-pr-url command can help with that).","title":"shut log"},{"location":"commands/log/#configuration","text":"","title":"Configuration"},{"location":"commands/log/#logdirectory","text":"Type : str Default : .changelog/ The directory in which the changelogs are stored.","title":"log.directory"},{"location":"commands/log/#logvalid-types","text":"Type : list[str] Default : `[\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types.","title":"log.valid-types"},{"location":"commands/log/#logremote","text":"Type : RemoteProvider | None Default : None If None , will be automatically detected using the RemoteDetectorPlugin plugins.","title":"log.remote"},{"location":"commands/release/","text":"shut release The shut release command is a much improved version to the poetry version command in that is can bump multiple references to the version number in the project. It can also be used to verify that the version number is consistent and matching a particular value in CI checks using the --verify option. Shut currently reads the configuration from tool.poetry , but support for [PEP 621][] metadata is planned. It tries its best to detect the package source code roots, but if the automatic detection fails or cannot be detected from other existing configurations, the tool.shut.packages and tool.shut.source-directory options can be set explicitly. The release process will also rename changelogs and insert the release date into changelogs created and managed with shut log . $ shut release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.0.toml tagging 0.1.1 [develop] ec1e9b3] release 0.1.0 3 files changed, 3 insertions(+), 4 deletions(-) rename .changelog/{_unreleased.yml => 0.1.0.yml} (78%) pushing develop, 0.1.1 to origin Enumerating objects: 24, done. Counting objects: 100% (24/24), done. Delta compression using up to 8 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (24/24), 3.87 KiB | 566.00 KiB/s, done. Total 24 (delta 4), reused 0 (delta 0) To https://github.com/username/repo * [new branch] develop -> develop * [new tag] 0.1.1 -> 0.1.1 Additional version references can be configured using the tool.shut.version-references option or by installing a plugin that registers an entrypoint under tool.shut.plugins.release . TODO Support releases on the remote with the shut release --create-release option. Configuration release.branch Type : str Default : \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to shut release , the command will refuse to continue if the current branch name does not match this value. release.commit-message Type : str Default : \"release {version}\" The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number. release.tag-name Type : str Default : \"{version}\" The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number. release.references Type : list[VersionRefConfig] Default : [] A list of version references that should be considered in addition to the version references that are automatically detected by Shut when updating version numbers across the project with the shut release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the shut.toml or pyproject.toml configuration file resides).","title":"shut release"},{"location":"commands/release/#shut-release","text":"The shut release command is a much improved version to the poetry version command in that is can bump multiple references to the version number in the project. It can also be used to verify that the version number is consistent and matching a particular value in CI checks using the --verify option. Shut currently reads the configuration from tool.poetry , but support for [PEP 621][] metadata is planned. It tries its best to detect the package source code roots, but if the automatic detection fails or cannot be detected from other existing configurations, the tool.shut.packages and tool.shut.source-directory options can be set explicitly. The release process will also rename changelogs and insert the release date into changelogs created and managed with shut log . $ shut release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.0.toml tagging 0.1.1 [develop] ec1e9b3] release 0.1.0 3 files changed, 3 insertions(+), 4 deletions(-) rename .changelog/{_unreleased.yml => 0.1.0.yml} (78%) pushing develop, 0.1.1 to origin Enumerating objects: 24, done. Counting objects: 100% (24/24), done. Delta compression using up to 8 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (24/24), 3.87 KiB | 566.00 KiB/s, done. Total 24 (delta 4), reused 0 (delta 0) To https://github.com/username/repo * [new branch] develop -> develop * [new tag] 0.1.1 -> 0.1.1 Additional version references can be configured using the tool.shut.version-references option or by installing a plugin that registers an entrypoint under tool.shut.plugins.release . TODO Support releases on the remote with the shut release --create-release option.","title":"shut release"},{"location":"commands/release/#configuration","text":"","title":"Configuration"},{"location":"commands/release/#releasebranch","text":"Type : str Default : \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to shut release , the command will refuse to continue if the current branch name does not match this value.","title":"release.branch"},{"location":"commands/release/#releasecommit-message","text":"Type : str Default : \"release {version}\" The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number.","title":"release.commit-message"},{"location":"commands/release/#releasetag-name","text":"Type : str Default : \"{version}\" The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number.","title":"release.tag-name"},{"location":"commands/release/#releasereferences","text":"Type : list[VersionRefConfig] Default : [] A list of version references that should be considered in addition to the version references that are automatically detected by Shut when updating version numbers across the project with the shut release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the shut.toml or pyproject.toml configuration file resides).","title":"release.references"},{"location":"commands/test/","text":"shut test Configure the commands to run with shut test under the tool.shut.test table: [tool.shut.test] pytest = \"pytest --cov=shut\" mypy = \"mypy\" pylint = \"pylint --fail-under=8.0\"","title":"shut test"},{"location":"commands/test/#shut-test","text":"Configure the commands to run with shut test under the tool.shut.test table: [tool.shut.test] pytest = \"pytest --cov=shut\" mypy = \"mypy\" pylint = \"pylint --fail-under=8.0\"","title":"shut test"},{"location":"guides/publishing/","text":"TODO: This guide needs to be updated. Publishing with Shut By default, every package is configured to publish to PyPI using the warehouse:pypi publishing target. A test publish to test.pypi.org can be performed by using the --test option when using the shut pkg publish command. Automate publishing in CI checls You can specify the username and password in the config as environment variables. Most CI systems allow you to securely store a secret as an environment variable. name: my-package # ... publish: pypi: credentials: username: __token__ password: '$PYPI_TOKEN' test_username: __token__ test_password: '$TESTPYPI_TOKEN' When you're ready to publish from the CI checks, make it run the following commands: - pip install shut - shut pkg update --verify-tag \"$CI_TAG\" - shut pkg publish warehouse:pypi It is also recommended that you add a trial-publish step. Note that we add the --allow-empty-tag to flag to allow that the value passed to --verify-tag can be empty. This is important because most commits won't be tagged during development. - pip install shut - shut pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - shut pkg publish warehouse:pypi --test Publishing Snapshots The bump command can be used with the --snapshot option to update the version to one that indicates the Git commit distance since the last tagged version. This is useful to publish development snapshots. Note that PyPI/Warehouse does not actually (yet?) support snapshot version numbers. If you want to publish snapshots, you need an alternative package registry such as Artifactory). - shut pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - shut pkg bump --snapshot - shut pkg publish warehouse:pypi --test Important : Many CI systems may not fetch tags when cloning your repository. This means bump --snapshot can not figure out the commit distance and the generated snapshot version number will begin with 0.0.0 . If you encounter this issue, run git fetch --tags before Shut. If you do try to use snapshot versions with PyPI, you will see this type of error: HTTPError: 400 Bad Request from https://test.pypi.org/legacy/ '0.17.1+1.g986bed6' is an invalid value for Version. Error: Can't use PEP 440 local versions. See https://packaging.python.org/specifications/core-metadata for more information.","title":"Publishing"},{"location":"guides/publishing/#publishing-with-shut","text":"By default, every package is configured to publish to PyPI using the warehouse:pypi publishing target. A test publish to test.pypi.org can be performed by using the --test option when using the shut pkg publish command.","title":"Publishing with Shut"},{"location":"guides/publishing/#automate-publishing-in-ci-checls","text":"You can specify the username and password in the config as environment variables. Most CI systems allow you to securely store a secret as an environment variable. name: my-package # ... publish: pypi: credentials: username: __token__ password: '$PYPI_TOKEN' test_username: __token__ test_password: '$TESTPYPI_TOKEN' When you're ready to publish from the CI checks, make it run the following commands: - pip install shut - shut pkg update --verify-tag \"$CI_TAG\" - shut pkg publish warehouse:pypi It is also recommended that you add a trial-publish step. Note that we add the --allow-empty-tag to flag to allow that the value passed to --verify-tag can be empty. This is important because most commits won't be tagged during development. - pip install shut - shut pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - shut pkg publish warehouse:pypi --test","title":"Automate publishing in CI checls"},{"location":"guides/publishing/#publishing-snapshots","text":"The bump command can be used with the --snapshot option to update the version to one that indicates the Git commit distance since the last tagged version. This is useful to publish development snapshots. Note that PyPI/Warehouse does not actually (yet?) support snapshot version numbers. If you want to publish snapshots, you need an alternative package registry such as Artifactory). - shut pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - shut pkg bump --snapshot - shut pkg publish warehouse:pypi --test Important : Many CI systems may not fetch tags when cloning your repository. This means bump --snapshot can not figure out the commit distance and the generated snapshot version number will begin with 0.0.0 . If you encounter this issue, run git fetch --tags before Shut. If you do try to use snapshot versions with PyPI, you will see this type of error: HTTPError: 400 Bad Request from https://test.pypi.org/legacy/ '0.17.1+1.g986bed6' is an invalid value for Version. Error: Can't use PEP 440 local versions. See https://packaging.python.org/specifications/core-metadata for more information.","title":"Publishing Snapshots"},{"location":"remotes/github/","text":"GitHub shut.ext.remotes.github Can be detected automatically in projects that use Git where the origin remote points to a github.com HTTP or SSH URL. Configuration repo Type : str The repository ID in the form of owner/repo or domain/owner/repo . Examples: NiklasRosenstein/shut our-ghe-instance.io/owner/repo","title":"GitHub"},{"location":"remotes/github/#github","text":"shut.ext.remotes.github Can be detected automatically in projects that use Git where the origin remote points to a github.com HTTP or SSH URL.","title":"GitHub"},{"location":"remotes/github/#configuration","text":"","title":"Configuration"},{"location":"remotes/github/#repo","text":"Type : str The repository ID in the form of owner/repo or domain/owner/repo . Examples: NiklasRosenstein/shut our-ghe-instance.io/owner/repo","title":"repo"}]}