{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Slam documentation! Slam is a CLI that provides utilities for developing on Python projects. It works well with Poetry projects in particular, but you're not required to use it. Slam (version 1.0.0) Usage: command [options] [arguments] Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Available commands: check Run sanity checks on your Python project. help Displays help for a command. info Show info about the Slam application workspace and the loaded projects. install Install your project and its dependencies via Pip. link Symlink your Python package with the help of Flit. publish A wrapper to publish the Python project to a repository such as PyPI. release Create a new release of your Python package. test Execute commands configured in [tool.slam.test]. changelog changelog add Add an entry to the unreleased changelog via the CLI. changelog convert Convert Slam's old YAML based changelogs to new style TOML changelogs. changelog format Format the changelog in the terminal or in Markdown format. changelog update-pr Update the pr field of changelog entries in a commit range. Installation It is recommended to install Slam via Pipx, but you can also install it with Pip directly. $ pipx install slam-cli Note : Currently, Slam relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). Copyright \u00a9 2022 Niklas Rosenstein","title":"Welcome to the Slam documentation!"},{"location":"#welcome-to-the-slam-documentation","text":"Slam is a CLI that provides utilities for developing on Python projects. It works well with Poetry projects in particular, but you're not required to use it. Slam (version 1.0.0) Usage: command [options] [arguments] Options: -h, --help Display help for the given command. When no command is given display help for the help command. -q, --quiet Do not output any message. -V, --version Display this application version. --ansi Force ANSI output. --no-ansi Disable ANSI output. -n, --no-interaction Do not ask any interactive question. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. Available commands: check Run sanity checks on your Python project. help Displays help for a command. info Show info about the Slam application workspace and the loaded projects. install Install your project and its dependencies via Pip. link Symlink your Python package with the help of Flit. publish A wrapper to publish the Python project to a repository such as PyPI. release Create a new release of your Python package. test Execute commands configured in [tool.slam.test]. changelog changelog add Add an entry to the unreleased changelog via the CLI. changelog convert Convert Slam's old YAML based changelogs to new style TOML changelogs. changelog format Format the changelog in the terminal or in Markdown format. changelog update-pr Update the pr field of changelog entries in a commit range.","title":"Welcome to the Slam documentation!"},{"location":"#installation","text":"It is recommended to install Slam via Pipx, but you can also install it with Pip directly. $ pipx install slam-cli Note : Currently, Slam relies on an alpha version of poetry-core ( ^1.1.0a6 ). If you install it into the same environment as Poetry itself, you may also need to use an alpha version of Poetry (e.g. 1.2.0a2 ). Copyright \u00a9 2022 Niklas Rosenstein","title":"Installation"},{"location":"api/","text":"API Documentation @pydoc slam.application.Application Plugins @pydoc :set header_level = 3 @pydoc slam.application.ApplicationPlugin :with @pydoc slam.commands.check.api.CheckPlugin @pydoc slam.commands.release.api.ReleasePlugin @pydoc slam.commands.log.api.RemoteDetectorPlugin @pydoc slam.commands.log.api.RemoteProvider","title":"API Documentation"},{"location":"api/#api-documentation","text":"@pydoc slam.application.Application","title":"API Documentation"},{"location":"api/#plugins","text":"@pydoc :set header_level = 3 @pydoc slam.application.ApplicationPlugin :with @pydoc slam.commands.check.api.CheckPlugin @pydoc slam.commands.release.api.ReleasePlugin @pydoc slam.commands.log.api.RemoteDetectorPlugin @pydoc slam.commands.log.api.RemoteProvider","title":"Plugins"},{"location":"configuration/","text":"Configuration The Slam configuration is read either from a slam.toml file or from the [tool.slam] section in pyproject.toml . When a configuration value is described in the documentation, it is referenced without the [tool.slam] prefix that is needed in the case where the configuration is loaded from pyproject.toml . Check out the documentation for each command separately to understand how they can be configured. Application configuration plugins.disable Type : list[str] | None Default : None A list of plugins to disable, subtracting from the list of plugins that are loaded by default. By default, all builtin plugins provided directly by Slam will be loaded. External plugins need to be enabled explicitly with plugins.enable . plugins.enable Type : list[str] | None Default : None A list of plugins to enable in addition to the list of plugins that are loaded by default (i.e. all the Slam builtin plugins). External plugins need to be enabled explicitly with this option. source-directory Type : str | None Default : None The directory in which the Python source code resides. If not set, Slam will attempt to look into ./src/ first and then ./ . This is used to detect the Python packages. Todo : If [tool.poetry.packages] is set, try and use that over manually detecting the packages. typed Type : bool Default : True Whether the project uses type hints.","title":"Configuration"},{"location":"configuration/#configuration","text":"The Slam configuration is read either from a slam.toml file or from the [tool.slam] section in pyproject.toml . When a configuration value is described in the documentation, it is referenced without the [tool.slam] prefix that is needed in the case where the configuration is loaded from pyproject.toml . Check out the documentation for each command separately to understand how they can be configured.","title":"Configuration"},{"location":"configuration/#application-configuration","text":"","title":"Application configuration"},{"location":"configuration/#pluginsdisable","text":"Type : list[str] | None Default : None A list of plugins to disable, subtracting from the list of plugins that are loaded by default. By default, all builtin plugins provided directly by Slam will be loaded. External plugins need to be enabled explicitly with plugins.enable .","title":"plugins.disable"},{"location":"configuration/#pluginsenable","text":"Type : list[str] | None Default : None A list of plugins to enable in addition to the list of plugins that are loaded by default (i.e. all the Slam builtin plugins). External plugins need to be enabled explicitly with this option.","title":"plugins.enable"},{"location":"configuration/#source-directory","text":"Type : str | None Default : None The directory in which the Python source code resides. If not set, Slam will attempt to look into ./src/ first and then ./ . This is used to detect the Python packages. Todo : If [tool.poetry.packages] is set, try and use that over manually detecting the packages.","title":"source-directory"},{"location":"configuration/#typed","text":"Type : bool Default : True Whether the project uses type hints.","title":"typed"},{"location":"plugins/","text":"Plugins A lot of Slam's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Slam further. Types of plugins ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. CheckPlugin \u2013 The type of plugin used by slam check . ReleasePlugin \u2013 The type of plugin used by slam release to detect version references. RemoteDetectorPlugin \u2013 A type of plugin that is intended to automatically detect the type of remote repository used in a project and return an appropriate ChangelogValidator for use by the slam log commands.","title":"Plugins"},{"location":"plugins/#plugins","text":"A lot of Slam's internal functionality is provided through a plugin interface, allowing other tools to extend the functionality of Slam further.","title":"Plugins"},{"location":"plugins/#types-of-plugins","text":"ApplicationPlugin \u2013 This is the main type of plugin. Most other types of plugins are registered through an application plugin using the Application.plugins registry. CheckPlugin \u2013 The type of plugin used by slam check . ReleasePlugin \u2013 The type of plugin used by slam release to detect version references. RemoteDetectorPlugin \u2013 A type of plugin that is intended to automatically detect the type of remote repository used in a project and return an appropriate ChangelogValidator for use by the slam log commands.","title":"Types of plugins"},{"location":"commands/changelog/","text":"slam changelog The slam log command can be used to manage changelog files which are usually stored in a .changelog/ directory, but the directory can be changed using the tool.slam.changelog-dir option. The CLI allows you to add new entries as well as print them in a pretty format in the terminal or render the changelog as Markdown. A changelog entry has a unique ID, one or more tags that categorize the type of change, one or more authors, a short description, maybe a link to a pull request and links to issues that are fixed by the change. $ slam log add - t fix , docs - m 'Fix the documentation' -- fixes 231 , 234 # Added changelog entry to .changelog/_unreleased.toml id = \"d0092ba\" tags = [ \"fix\" , \"docs\" ] message = \"Fix the documentation\" fixes = [ \"https://github.com/username/repo/issues/231\" , \"https://github.com/username/repo/issues/234\" , ] pr = null The pr value can be set manually once a PR was created, or be updated automatically for example through a GitHub action or other type of CI job (the slam log inject-pr-url command can help with that). Update the PR field in CI checks Example for GitHub Actions update-pr-numbers: if: github.event_name == 'pull_request' permissions: contents: write runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v2 with: { python-version: \"3.10\" } - name: Install Slam run: pip install slam-cli==1.0.0 - name: Update PR references in changelogs run: slam -vv changelog update-pr --use github-actions Note that you still have to configure Git such that it has an author email and name to create the commit with. Configuration log.directory Type : str Default : .changelog/ The directory in which the changelogs are stored. log.valid-types Type : list[str] Default : [\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types. log.remote Type : RemoteProvider | None Default : None If None , will be automatically detected using the RemoteDetectorPlugin plugins.","title":"slam changelog"},{"location":"commands/changelog/#slam-changelog","text":"The slam log command can be used to manage changelog files which are usually stored in a .changelog/ directory, but the directory can be changed using the tool.slam.changelog-dir option. The CLI allows you to add new entries as well as print them in a pretty format in the terminal or render the changelog as Markdown. A changelog entry has a unique ID, one or more tags that categorize the type of change, one or more authors, a short description, maybe a link to a pull request and links to issues that are fixed by the change. $ slam log add - t fix , docs - m 'Fix the documentation' -- fixes 231 , 234 # Added changelog entry to .changelog/_unreleased.toml id = \"d0092ba\" tags = [ \"fix\" , \"docs\" ] message = \"Fix the documentation\" fixes = [ \"https://github.com/username/repo/issues/231\" , \"https://github.com/username/repo/issues/234\" , ] pr = null The pr value can be set manually once a PR was created, or be updated automatically for example through a GitHub action or other type of CI job (the slam log inject-pr-url command can help with that).","title":"slam changelog"},{"location":"commands/changelog/#update-the-pr-field-in-ci-checks","text":"Example for GitHub Actions update-pr-numbers: if: github.event_name == 'pull_request' permissions: contents: write runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v2 with: { python-version: \"3.10\" } - name: Install Slam run: pip install slam-cli==1.0.0 - name: Update PR references in changelogs run: slam -vv changelog update-pr --use github-actions Note that you still have to configure Git such that it has an author email and name to create the commit with.","title":"Update the PR field in CI checks"},{"location":"commands/changelog/#configuration","text":"","title":"Configuration"},{"location":"commands/changelog/#logdirectory","text":"Type : str Default : .changelog/ The directory in which the changelogs are stored.","title":"log.directory"},{"location":"commands/changelog/#logvalid-types","text":"Type : list[str] Default : [\"breaking change\", \"docs\", \"feature\", \"fix\", \"hygiene\", \"improvement\", \"tests\"] A list of strings that are accepted in changelog entries as types.","title":"log.valid-types"},{"location":"commands/changelog/#logremote","text":"Type : RemoteProvider | None Default : None If None , will be automatically detected using the RemoteDetectorPlugin plugins.","title":"log.remote"},{"location":"commands/check/","text":"slam check The slam check command performs sanity checks on your project. Configuration check.plugins Type : list[str] Default : [\"log\", \"poetry\", \"release\", \"slam\"] A list of check plugins to use. Note that the Poetry plugin will only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't use it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group. Todo : Error if a specified plugin does not exist. Built-in checks log The ChangelogConsistencyCheck checks if the changelogs managed by Slam are in order. Check log:validate Checks if all structured changelog files managed by Slam can be loaded and are valid. slam The ShutChecksPlugin provides all Python specific checks. Check slam:packages Checks if Slam can detect at least one package. Check slam:typed Checks if the project is typed but does not contain a py.typed file or the other way round. This currently relies on the $.typed configuration and does not inspect the code for type hints. poetry The PoetryChecksPlugin will perform some Poetry specific configuration checks. Check poetry:readme Checks if the project readme is configured correctly or if Poetry is able to automatically pick up the readme file if it is not configured. This inspects te [tool.poetry.readme] or [project.readme] settings in pyproject.toml and compares it with the readme file that was automatically identified by Slam (which is a file called README, case-insensitive with one of the suffixes in the order of .md , .rst , .txt , or if that does not match, any file beginning with README. ). Check poetry:urls Checks if the project URLs are configured properly. For the homepage URL, it will check for [tool.poetry.homepage] or the Homepage key in [tool.poetry.urls] . Not having the homepage configured will trigger a warning. If otherwise at least one of Documentation , Repository or Bug Tracker are missing, the check shows a recommendation. Check poetry:classifiers Checks if [tool.poetry] classifiers are all valid trove classifiers per https://pypi.org/classifiers/. Check poetry:license Checks if the [tool.poetry] license is set and whether it is a valid SPDX license identifier. TODO Check if the license is a valid SPDX license identifier. Todo : More of those checks should also support looking into [project] . release The ReleaseChecksPlugin performs checks to validate that slam release can be used properly. Check release:version Checks if the __version__ can be detected in the source code of all detected packages. Check release:remote TODO Checks if the VCS remote is configured or can be detected automatically such that the slam release --create-release option can be used.","title":"slam check"},{"location":"commands/check/#slam-check","text":"The slam check command performs sanity checks on your project.","title":"slam check"},{"location":"commands/check/#configuration","text":"","title":"Configuration"},{"location":"commands/check/#checkplugins","text":"Type : list[str] Default : [\"log\", \"poetry\", \"release\", \"slam\"] A list of check plugins to use. Note that the Poetry plugin will only fire checks if your project appears to be using Poetry, so there is no harm in leaving it enabled even if you don't use it. Additional plugins can be registered via an ApplicationPlugin under the CheckPlugin group. Todo : Error if a specified plugin does not exist.","title":"check.plugins"},{"location":"commands/check/#built-in-checks","text":"","title":"Built-in checks"},{"location":"commands/check/#log","text":"The ChangelogConsistencyCheck checks if the changelogs managed by Slam are in order.","title":"log"},{"location":"commands/check/#check-logvalidate","text":"Checks if all structured changelog files managed by Slam can be loaded and are valid.","title":"Check log:validate"},{"location":"commands/check/#slam","text":"The ShutChecksPlugin provides all Python specific checks.","title":"slam"},{"location":"commands/check/#check-slampackages","text":"Checks if Slam can detect at least one package.","title":"Check slam:packages"},{"location":"commands/check/#check-slamtyped","text":"Checks if the project is typed but does not contain a py.typed file or the other way round. This currently relies on the $.typed configuration and does not inspect the code for type hints.","title":"Check slam:typed"},{"location":"commands/check/#poetry","text":"The PoetryChecksPlugin will perform some Poetry specific configuration checks.","title":"poetry"},{"location":"commands/check/#check-poetryreadme","text":"Checks if the project readme is configured correctly or if Poetry is able to automatically pick up the readme file if it is not configured. This inspects te [tool.poetry.readme] or [project.readme] settings in pyproject.toml and compares it with the readme file that was automatically identified by Slam (which is a file called README, case-insensitive with one of the suffixes in the order of .md , .rst , .txt , or if that does not match, any file beginning with README. ).","title":"Check poetry:readme"},{"location":"commands/check/#check-poetryurls","text":"Checks if the project URLs are configured properly. For the homepage URL, it will check for [tool.poetry.homepage] or the Homepage key in [tool.poetry.urls] . Not having the homepage configured will trigger a warning. If otherwise at least one of Documentation , Repository or Bug Tracker are missing, the check shows a recommendation.","title":"Check poetry:urls"},{"location":"commands/check/#check-poetryclassifiers","text":"Checks if [tool.poetry] classifiers are all valid trove classifiers per https://pypi.org/classifiers/.","title":"Check poetry:classifiers"},{"location":"commands/check/#check-poetrylicense","text":"Checks if the [tool.poetry] license is set and whether it is a valid SPDX license identifier. TODO Check if the license is a valid SPDX license identifier. Todo : More of those checks should also support looking into [project] .","title":"Check poetry:license"},{"location":"commands/check/#release","text":"The ReleaseChecksPlugin performs checks to validate that slam release can be used properly.","title":"release"},{"location":"commands/check/#check-releaseversion","text":"Checks if the __version__ can be detected in the source code of all detected packages.","title":"Check release:version"},{"location":"commands/check/#check-releaseremote","text":"TODO Checks if the VCS remote is configured or can be detected automatically such that the slam release --create-release option can be used.","title":"Check release:remote"},{"location":"commands/link/","text":"slam link This is particularly interesting when managing the package with Poetry as it does not currently support editable installs (as of Poetry 1.2.0a2 on 2022-01-14). This is a little helper command that will temporarily reorganize the pyproject.toml to be compatible with Flit and make use if it's symlink installation feature ( flit install -s ). $ slam link Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> /home/niklas/.local/venvs/craftr/lib/python3.10/site-packages/my_package","title":"slam link"},{"location":"commands/link/#slam-link","text":"This is particularly interesting when managing the package with Poetry as it does not currently support editable installs (as of Poetry 1.2.0a2 on 2022-01-14). This is a little helper command that will temporarily reorganize the pyproject.toml to be compatible with Flit and make use if it's symlink installation feature ( flit install -s ). $ slam link Extras to install for deps 'all': {'.none'} Symlinking src/my_package -> /home/niklas/.local/venvs/craftr/lib/python3.10/site-packages/my_package","title":"slam link"},{"location":"commands/release/","text":"slam release The slam release command updates references to the version number in pyproject.toml and your source code, updates the unreleased changelog if you make use of Slam's structured changelogs, as well as updating any other versions specified in the configuration or detected by other plugins. It covers the following use cases: Bump the version number (and various features around that event) Validate that the version number is consistent across the project Example $ slam release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.0.toml tagging 0.1.1 [develop] ec1e9b3] release 0.1.0 3 files changed, 3 insertions(+), 4 deletions(-) rename .changelog/{_unreleased.yml => 0.1.0.yml} (78%) pushing develop, 0.1.1 to origin Enumerating objects: 24, done. Counting objects: 100% (24/24), done. Delta compression using up to 8 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (24/24), 3.87 KiB | 566.00 KiB/s, done. Total 24 (delta 4), reused 0 (delta 0) To https://github.com/username/repo * [new branch] develop -> develop * [new tag] 0.1.1 -> 0.1.1 Configuration release.branch Type : str Default : \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to slam release , the command will refuse to continue if the current branch name does not match this value. release.commit-message Type : str Default : \"release {version}\" The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number. release.tag-name Type : str Default : \"{version}\" The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number. release.references Type : list[VersionRefConfig] Default : [] A list of version references that should be considered in addition to the version references that are automatically detected by Slam when updating version numbers across the project with the slam release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the slam.toml or pyproject.toml configuration file resides).","title":"slam release"},{"location":"commands/release/#slam-release","text":"The slam release command updates references to the version number in pyproject.toml and your source code, updates the unreleased changelog if you make use of Slam's structured changelogs, as well as updating any other versions specified in the configuration or detected by other plugins. It covers the following use cases: Bump the version number (and various features around that event) Validate that the version number is consistent across the project Example $ slam release patch --tag --push bumping 2 version references: pyproject.toml: 0.1.0 \u2192 0.1.1 src/my_package/__init__.py: 0.1.0 \u2192 0.1.1 release staged changelog .changelog/_unreleased.toml \u2192 .changelog/0.1.0.toml tagging 0.1.1 [develop] ec1e9b3] release 0.1.0 3 files changed, 3 insertions(+), 4 deletions(-) rename .changelog/{_unreleased.yml => 0.1.0.yml} (78%) pushing develop, 0.1.1 to origin Enumerating objects: 24, done. Counting objects: 100% (24/24), done. Delta compression using up to 8 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (24/24), 3.87 KiB | 566.00 KiB/s, done. Total 24 (delta 4), reused 0 (delta 0) To https://github.com/username/repo * [new branch] develop -> develop * [new tag] 0.1.1 -> 0.1.1","title":"slam release"},{"location":"commands/release/#configuration","text":"","title":"Configuration"},{"location":"commands/release/#releasebranch","text":"Type : str Default : \"develop\" The branch on which releases are created. Unless --no-branch-check is passed to slam release , the command will refuse to continue if the current branch name does not match this value.","title":"release.branch"},{"location":"commands/release/#releasecommit-message","text":"Type : str Default : \"release {version}\" The commit message to use when using the --tag, -t option. The string {version} will be replaced with the new version number.","title":"release.commit-message"},{"location":"commands/release/#releasetag-name","text":"Type : str Default : \"{version}\" The tag name to use when using the --tag, -t option. The string {version} will be replaced with the new version number.","title":"release.tag-name"},{"location":"commands/release/#releasereferences","text":"Type : list[VersionRefConfig] Default : [] A list of version references that should be considered in addition to the version references that are automatically detected by Slam when updating version numbers across the project with the slam release command. A VersionRefConfig contains the fields file: str and pattern: str . The file is considered relative to the project directory (which is the directory where the slam.toml or pyproject.toml configuration file resides).","title":"release.references"},{"location":"commands/test/","text":"slam test Configure the commands to run with slam test under the tool.slam.test table: [tool.slam.test] pytest = \"pytest --cov=slam\" mypy = \"mypy\" pylint = \"pylint --fail-under=8.0\"","title":"slam test"},{"location":"commands/test/#slam-test","text":"Configure the commands to run with slam test under the tool.slam.test table: [tool.slam.test] pytest = \"pytest --cov=slam\" mypy = \"mypy\" pylint = \"pylint --fail-under=8.0\"","title":"slam test"},{"location":"guides/publishing/","text":"TODO: This guide needs to be updated. Publishing with Slam By default, every package is configured to publish to PyPI using the warehouse:pypi publishing target. A test publish to test.pypi.org can be performed by using the --test option when using the slam pkg publish command. Automate publishing in CI checls You can specify the username and password in the config as environment variables. Most CI systems allow you to securely store a secret as an environment variable. name: my-package # ... publish: pypi: credentials: username: __token__ password: '$PYPI_TOKEN' test_username: __token__ test_password: '$TESTPYPI_TOKEN' When you're ready to publish from the CI checks, make it run the following commands: - pip install slam - slam pkg update --verify-tag \"$CI_TAG\" - slam pkg publish warehouse:pypi It is also recommended that you add a trial-publish step. Note that we add the --allow-empty-tag to flag to allow that the value passed to --verify-tag can be empty. This is important because most commits won't be tagged during development. - pip install slam - slam pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - slam pkg publish warehouse:pypi --test Publishing Snapshots The bump command can be used with the --snapshot option to update the version to one that indicates the Git commit distance since the last tagged version. This is useful to publish development snapshots. Note that PyPI/Warehouse does not actually (yet?) support snapshot version numbers. If you want to publish snapshots, you need an alternative package registry such as Artifactory). - slam pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - slam pkg bump --snapshot - slam pkg publish warehouse:pypi --test Important : Many CI systems may not fetch tags when cloning your repository. This means bump --snapshot can not figure out the commit distance and the generated snapshot version number will begin with 0.0.0 . If you encounter this issue, run git fetch --tags before Slam. If you do try to use snapshot versions with PyPI, you will see this type of error: HTTPError: 400 Bad Request from https://test.pypi.org/legacy/ '0.17.1+1.g986bed6' is an invalid value for Version. Error: Can't use PEP 440 local versions. See https://packaging.python.org/specifications/core-metadata for more information.","title":"Publishing"},{"location":"guides/publishing/#publishing-with-slam","text":"By default, every package is configured to publish to PyPI using the warehouse:pypi publishing target. A test publish to test.pypi.org can be performed by using the --test option when using the slam pkg publish command.","title":"Publishing with Slam"},{"location":"guides/publishing/#automate-publishing-in-ci-checls","text":"You can specify the username and password in the config as environment variables. Most CI systems allow you to securely store a secret as an environment variable. name: my-package # ... publish: pypi: credentials: username: __token__ password: '$PYPI_TOKEN' test_username: __token__ test_password: '$TESTPYPI_TOKEN' When you're ready to publish from the CI checks, make it run the following commands: - pip install slam - slam pkg update --verify-tag \"$CI_TAG\" - slam pkg publish warehouse:pypi It is also recommended that you add a trial-publish step. Note that we add the --allow-empty-tag to flag to allow that the value passed to --verify-tag can be empty. This is important because most commits won't be tagged during development. - pip install slam - slam pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - slam pkg publish warehouse:pypi --test","title":"Automate publishing in CI checls"},{"location":"guides/publishing/#publishing-snapshots","text":"The bump command can be used with the --snapshot option to update the version to one that indicates the Git commit distance since the last tagged version. This is useful to publish development snapshots. Note that PyPI/Warehouse does not actually (yet?) support snapshot version numbers. If you want to publish snapshots, you need an alternative package registry such as Artifactory). - slam pkg update --verify-tag \"$CI_TAG\" --allow-empty-tag - slam pkg bump --snapshot - slam pkg publish warehouse:pypi --test Important : Many CI systems may not fetch tags when cloning your repository. This means bump --snapshot can not figure out the commit distance and the generated snapshot version number will begin with 0.0.0 . If you encounter this issue, run git fetch --tags before Slam. If you do try to use snapshot versions with PyPI, you will see this type of error: HTTPError: 400 Bad Request from https://test.pypi.org/legacy/ '0.17.1+1.g986bed6' is an invalid value for Version. Error: Can't use PEP 440 local versions. See https://packaging.python.org/specifications/core-metadata for more information.","title":"Publishing Snapshots"},{"location":"remotes/github/","text":"GitHub slam.ext.remotes.github Can be detected automatically in projects that use Git where the origin remote points to a github.com HTTP or SSH URL. Configuration repo Type : str The repository ID in the form of owner/repo or domain/owner/repo . Examples: NiklasRosenstein/slam our-ghe-instance.io/owner/repo","title":"GitHub"},{"location":"remotes/github/#github","text":"slam.ext.remotes.github Can be detected automatically in projects that use Git where the origin remote points to a github.com HTTP or SSH URL.","title":"GitHub"},{"location":"remotes/github/#configuration","text":"","title":"Configuration"},{"location":"remotes/github/#repo","text":"Type : str The repository ID in the form of owner/repo or domain/owner/repo . Examples: NiklasRosenstein/slam our-ghe-instance.io/owner/repo","title":"repo"}]}